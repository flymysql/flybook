
    <rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
        <channel>
            <title>兰州小红鸡</title>
            <link>https://me.idealli.com</link>
            <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
            <description>桃李春风一杯酒，江湖夜雨十年灯</description>
            <pubDate>()=>{
    // 获取当前日期
    var date = new Date();

    // 获取当前月份
    var nowMonth = date.getMonth() + 1;

    // 获取当前是几号
    var strDate = date.getDate();

    // 添加分隔符“-”
    var seperator = "-";

    // 对月份进行处理，1-9月在前面添加一个“0”
    if (nowMonth >= 1 && nowMonth <= 9) {
    nowMonth = "0" + nowMonth;
    }

    // 对月份进行处理，1-9号在前面添加一个“0”
    if (strDate >= 0 && strDate <= 9) {
    strDate = "0" + strDate;
    }

    // 最后拼接字符串，得到一个格式为(yyyy-MM-dd)的日期
    var nowDate = date.getFullYear() + seperator + nowMonth + seperator + strDate;
    return nowDate;
}</pubDate>
            <generator>https://me.idealli.com/</generator>

    
            <item>
                <title>新建文章</title>
                <link>https://me.idealli.com/post/6bc658b0e</link>
                <guid>https://me.idealli.com/post/6bc658b0e</guid>
                <pubDate>2019-6-8</pubDate>
                <description>
                测试
                </description>
                <content:encoded>
                <![CDATA[<p>测试</p>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/6bc658b0e#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>用node从头开始自己搭建一个动态博客</title>
                <link>https://me.idealli.com/post/86b3cc61.html</link>
                <guid>https://me.idealli.com/post/86b3cc61.html</guid>
                <pubDate>2019-5-28</pubDate>
                <description>
                搭了快一年的博客了，用过wordpress，也用过typecho，用的时间最长的是hexo。平常喜欢折腾，就一直在搞些杂七杂八的。也一直想自己动手做个属于自己的博客框架，奈何之前技术水平不够，觉得这种
                </description>
                <content:encoded>
                <![CDATA[<div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div class="post-body" itemprop="articleBody">
<p>搭了快一年的博客了，用过wordpress，也用过typecho，用的时间最长的是hexo。平常喜欢折腾，就一直在搞些杂七杂八的。也一直想自己动手做个属于自己的博客框架，奈何之前技术水平不够，觉得这种项目离自己的水平还有点距离，学了半年前端后（其实也没系统地学），最近看到node这个轻量级的后端语言以及express这个成熟的框架可以很快的搭起一个网站骨架。</p>
<p>自己其实想要做的也很简单，一个轻量级的博客框架，只针对博客！对的，目标明确，这个框架应该只用来做博客，不考虑其他网站的用途。</p>
<h2 id="网站骨架"><a class="header-anchor" href="#网站骨架">¶</a>网站骨架</h2>
<p>那么有了目标，思维就变得清晰了，只针对博客，其实需要的东西就没那么多了。动手进行第一个版本的网站骨架设计（其实也就是想到哪写到哪）</p>
<p>网站骨架如下</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── app.js</span><br><span class="line">├── bin					// 入口文件</span><br><span class="line">├── config.js				// 站点配置</span><br><span class="line">├── controllers			// 路由控制器</span><br><span class="line">├── package.json</span><br><span class="line">├── public					// 静态文件</span><br><span class="line">│   ├── images</span><br><span class="line">│   ├── javascripts</span><br><span class="line">│   └── stylesheets</span><br><span class="line">├── routes					// 路由</span><br><span class="line">├── server					// 数据库操作</span><br><span class="line">├── sessions				// 登录验证</span><br><span class="line">├── until					// 工具函数</span><br><span class="line">└── views					// 主题</span><br></pre></td></tr></tbody></table></figure>
<p>第一个版本的数据库初始模型：只有一个文章模型，模型的属性包含一篇正常博客文章所需的内容。</p>
<h2 id="todo列表"><a class="header-anchor" href="#todo列表">¶</a>todo列表</h2>
<p>版本一计划开发周期一星期，目前迭代进度。</p>
<p><strong>版本一迭代任务清单</strong></p>
<p>开始时间：2019-05-11<br>
计划完成时间:2019-05-16<br>
计划周期：一周</p>
<ul>
<li>网站骨架</li>
<li>首页页面渲染</li>
<li>文章详情页渲染</li>
<li>归档页面渲染</li>
<li>前台登录验证的实现</li>
<li>前台编写文章</li>
<li>前台修改与删除文章</li>
<li>后台文章</li>
<li>自定义页面</li>
<li>ajax渲染标签</li>
<li>各个页面美化</li>
<li>将博客搬过去</li>
</ul>
<h2 id="剧透"><a class="header-anchor" href="#剧透">¶</a>剧透</h2>
<p>部分页面（未编写css进行美化，有点丑）</p>
<h3 id="首页"><a class="header-anchor" href="#首页">¶</a>首页</h3>
<p><img alt="" src="/images/loading.gif"></p>
<h3 id="文章详情页"><a class="header-anchor" href="#文章详情页">¶</a>文章详情页</h3>
<p><img alt="" src="/images/loading.gif"></p>
<h3 id="前台编写文章"><a class="header-anchor" href="#前台编写文章">¶</a>前台编写文章</h3>
<p><img alt="" src="/images/loading.gif"></p>
</div></div><p><br></p></div><p><br></p></div><p><br></p></div><p><br></p></div><p><br></p></div><p><br></p></div><p><br></p></div><p><br></p></div><p><br></p></div><p><br></p></div><p><br></p></div><p><br></p></div><p><br></p></div><p><br></p></div><p><br></p></div><p><br></p>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/86b3cc61.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>再次回到Linux，manjaro真香</title>
                <link>https://me.idealli.com/post/b7872cd9.html</link>
                <guid>https://me.idealli.com/post/b7872cd9.html</guid>
                <pubDate>2019-5-24</pubDate>
                <description>
                昨天在写node.js的一个小网页，写到一半连接数据库的时候出了各种bug，反正就是连不上数据库，哎好气，然后顺手就换了个操作系统——manjaro（虽然一直想换回以前用的debian，不过感觉之前d
                </description>
                <content:encoded>
                <![CDATA[<div><div><div><div class="post-body" itemprop="articleBody">
<p>昨天在写node.js的一个小网页，写到一半连接数据库的时候出了各种bug，反正就是连不上数据库，哎好气，然后顺手就换了个操作系统——manjaro（虽然一直想换回以前用的debian，不过感觉之前debian在自己电脑的bug还在，就不敢换）</p>
<p>之前就一直有听说manjaro很方便，我现在也不是很想花时间在折腾上面了，索性用个开箱即用的系统好了，正好舍友有个启动盘，备份完数据后直接重启U盘启动安装，整个过程一气呵成，爽快。</p>
<p>之后安装了qt版的ssr，在火狐上安装了SwitchOmega，开心地上谷歌。这就完成一半配置了，安装好vscode，node，还有一些其他的生产环境，过程都很轻松，也很便捷。</p>
<p><img alt="" src="/images/loading.gif" data-src="/images/loading.gif" data-src="/images/loading.gif" data-src="https://image.idealli.com/blog/2019051201.png"></p>
<p>不过中间有遇到一个奇怪但是有趣的bug，就是我在本地端渲染好hexo博客后要<code>hexo d</code>上传到腾讯云cos的时候，发生了403错误。我用的是hexo-deployer-cos插件来上传的，可是之前一直好好地，不知道为什么到了这里就不行。</p>
<p><strong>排查过程</strong></p>
<p>首先觉得是环境的问题，因为coscmd命令是用python写的，官方给的环境是python2.7,python3.4,python3.6，虽然我用的python3.7应该也没什么大碍，然而找不出bug只能试试，用conda新建了一个python3.4的环境，重新操作一遍，还是不行。</p>
<p>然后继续思考，难道是腾讯云那边出问题了？于是我登录了一台vps主机，在上面使用coscmd命令上传东西到腾讯云，发现可以上传。陷入沉思，这说明腾讯云那边没问题，问题只能是出在我本地这里，可是环境明明也没问题。</p>
<p>这里说一下，coscmd是腾讯云cos给的一个本地上传文件的基于python的命令行工具。</p>
<p>我翻了翻官方文档，发现一段话：<strong>本地时间保持与服务器时间基本一致，不然会出现问题</strong></p>
<p>啊，时间？我看了下右下角的时间，发现是凌晨四点，而现在是下午四点，刚安装的系统忘了调时区了，所以时间有点乱。</p>
<p>调整好时间后重新上传，成功！</p>
<p>为什么呢？我在网上搜了一遍，没有相关的解释，我个人感觉，这可能就是服务器端的一种校验机制，请求头中的时间如果和服务器时间不一致，那么拒绝请求。如果有更详细的解释，还请大神评论区指出</p>
<p>换了个桌面环境还是挺舒服的，虽然忙活了半天，但还是值得的，就hexo博客的渲染来讲，因为我把魔板乱七八糟改了一堆，原来在Windows下渲染一次要两分钟多，在Linux下只要30秒，虽然我也不清楚这个差异是哪些地方导致的，不过爽就对了！</p>
</div></div><p><br></p></div><p><br></p></div><p><br></p>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/b7872cd9.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>继续前端？还是走一条其他的路？</title>
                <link>https://me.idealli.com/post/1fb2e86a.html</link>
                <guid>https://me.idealli.com/post/1fb2e86a.html</guid>
                <pubDate>2019-5-24</pubDate>
                <description>
                自从决定不考研继续工作之后，在等待七月份去华为实习的这两三个月时间里，一直在纠结一件事，以后的技术栈应该往哪个方向发展？真的好迷茫，每次想到这里就觉得自己好菜，杂七杂八学了一堆，却好像什么也没学。
                </description>
                <content:encoded>
                <![CDATA[<div><div class="post-body" itemprop="articleBody">
<p>自从决定不考研继续工作之后，在等待七月份去华为实习的这两三个月时间里，一直在纠结一件事，以后的技术栈应该往哪个方向发展？真的好迷茫，每次想到这里就觉得自己好菜，杂七杂八学了一堆，却好像什么也没学。</p>
<p>前端接触的比较多，却一直想着要做算法，做机器学习和数据分析。然而这方面又没什么经验和项目，也就刷刷算法题，学学几个常见的算法模型。平常用python也就写写爬虫写写算法题，而c++也就用来刷刷leetcode，JavaScript也没深入研究，前端学的乱七八糟。</p>
<p>赶快做出选择了，继续往前端深入研究，然后争取在校招的时候去个大厂，还是往算法方向走？然而算法岗位没个研究生水平好像也没大厂会收吧？</p>
<p>流下了菜鸡的泪水。</p>
<p>要不，就继续往前端走吧，先努力进个大厂安顿下来再说？</p>
<p>华为那边之前面试的岗位是算法岗，然而能不能留下来还是个问题了。</p>
<p>先继续学前端了，深度学习和机器学习也继续入门看看，等到了华为再看安排什么岗位吧。</p>
<p>本以为考研或工作这两个选择已经让我很迷茫，没想到技术栈的选择让人更难受了。</p>
<p>可能归根结底还是能力不够的原因吧。</p>
<p>要加油呀！</p>
</div></div><p><br></p>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/1fb2e86a.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>新建文章"</title>
                <link>https://me.idealli.com/post/9cbd5cb63</link>
                <guid>https://me.idealli.com/post/9cbd5cb63</guid>
                <pubDate>2019-5-24</pubDate>
                <description>
                开始你的创作吧！""""ii"oo"""""
                </description>
                <content:encoded>
                <![CDATA[<div><p>开始你的创作吧！</p><p>"""</p><p>"ii"oo"</p><p>""""</p></div><p><br></p>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/9cbd5cb63#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>data-src test</title>
                <link>https://me.idealli.com/post/2c53b8618</link>
                <guid>https://me.idealli.com/post/2c53b8618</guid>
                <pubDate>2019-5-24</pubDate>
                <description>
                开始你的创作吧！
                </description>
                <content:encoded>
                <![CDATA[<div><p>开始你的创作吧！</p><p><img src="/images/loading.gif" data-src="/images/loading.gif" data-src="/images/loading.gif" data-src="/uploads/images/imageup-1558586872911.png" style="max-width:100%;"><br></p></div><p><br></p>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/2c53b8618#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>高仿简书的Next主题魔改版</title>
                <link>https://me.idealli.com/post/776c4a00.html</link>
                <guid>https://me.idealli.com/post/776c4a00.html</guid>
                <pubDate>2019-5-21</pubDate>
                <description>
                这两天再次对博客主页进行大改造，效果不错，魔改一遍之后对整个Next主题的主页页面结构进行了重构，感觉以后整理整理都可以自己写个主题了
                </description>
                <content:encoded>
                <![CDATA[<div><div><div><div class="post-body" itemprop="articleBody">
<p>这两天再次对博客主页进行大改造，效果不错，魔改一遍之后对整个Next主题的主页页面结构进行了重构，感觉以后整理整理都可以自己写个主题了</p>
<p>主题是模仿简书风格进行修改，首页的界面UI可以说是照抄了（不知道界面UI会不会有版权问题），<a href="https://www.jianshu.com/" rel="noopener" target="_blank">简书官网</a>，以前没做博客的时候就有在简书写文，后来账号荒废了，但是一直挺喜欢简书的首页UI风格。</p>
<h2 id="与简书的界面ui对比"><a class="header-anchor" href="#与简书的界面ui对比">¶</a>与简书的界面UI对比</h2>
<p>色彩鲜明但是又不过分花里胡哨，各个版块都恰到好处，没有很空白也没有很杂乱。下面这个是简书的首页UI</p>
<p><img alt="" src="https://media2.giphy.com/media/11FuEnXyGsXFba/source.gif" data-src="https://image.idealli.com/blog/2019050901.png"></p>
<p>然后这是我的首页UI，可以说是高仿了。</p>
<p><img alt="" src="https://media2.giphy.com/media/11FuEnXyGsXFba/source.gif" data-src="https://image.idealli.com/blog/2019050902.png"></p>
<p>相比简书，我在侧边栏添加了标签云，而简书的<strong>推荐作者</strong>我做成了友链，目前友情位尚有空缺，欢迎大佬交换友链。</p>
<p><img alt="" src="https://media2.giphy.com/media/11FuEnXyGsXFba/source.gif" data-src="https://image.idealli.com/blog/2019050903.png"></p>
<h2 id="作者信息"><a class="header-anchor" href="#作者信息">¶</a>作者信息</h2>
<p>虽然看起来只是个首页的改动，但是修改的和新增的主题模板文件有几十个，工作量还是挺大的，此外标签页面也相同的用了这个UI风格，这里就不再图片展示了。此外也修改了文章的<code>meta</code>部分</p>
<p><img alt="" src="https://media2.giphy.com/media/11FuEnXyGsXFba/source.gif" data-src="https://image.idealli.com/blog/2019050904.png"></p>
<p>对比主页文章列表的<code>meta</code>部分</p>
<p><img alt="" src="https://media2.giphy.com/media/11FuEnXyGsXFba/source.gif" data-src="https://image.idealli.com/blog/2019050905.png"></p>
<h2 id="整理开源"><a class="header-anchor" href="#整理开源">¶</a>整理开源</h2>
<p>有打算把主题整理开源做成自己的一个主题，不过一方面修改的地方天多，整理起来麻烦，一方面可能也没什么人用，就暂时先搁置了，等有人需要了再说。</p>
<blockquote>
<p><strong>flag</strong>评论区需要主题的朋友达到10个就整理主题包开源哈</p>
</blockquote>
<p>另外，欢迎交换友链</p>
</div></div><p><br></p></div><p><br></p></div><p><br></p>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/776c4a00.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>深度学习笔记——误差的反向传播</title>
                <link>https://me.idealli.com/post/6fe32b0d.html</link>
                <guid>https://me.idealli.com/post/6fe32b0d.html</guid>
                <pubDate>2019-5-20</pubDate>
                <description>
                通过数值微分计算神经网络的损失函数关于权重参数的梯度，虽然简单也容易实现，但是缺点是计算上比较费时间。而误差的反向传播法可以高效地计算梯度。
                </description>
                <content:encoded>
                <![CDATA[<div><div><div class="post-body" itemprop="articleBody">
<blockquote>
<p>通过数值微分计算神经网络的损失函数关于权重参数的梯度，虽然简单也容易实现，但是缺点是计算上比较费时间。而误差的反向传播法可以高效地计算梯度。</p>
</blockquote>
<p>通过计算图来理解误差反向传播</p>
<a id="more"></a>
<h3 id="什么是计算图"><a class="header-anchor" href="#什么是计算图">¶</a>什么是计算图</h3>
<p>计算图将计算过程用图形表示出来。这里说的图形是数据结构图，通过多个节点和边表示（连接节点的直线称为“边”）。</p>
<p><strong>一个例子</strong></p>
<blockquote>
<p><strong>问题1</strong>：你在超市买了2个100日元一个的苹果，消费税是10%，请算支付金额</p>
</blockquote>
<p>计算图通过节点和箭头表示计算过程。节点用○表示，○中是计算的内容。将计算的中间结果写在箭头的上方，表示各个节点的计算结果从左向右传递。用计算图解问题1，求解过程如图所示</p>
<p><img src="/uploads/images/imageup-1558344910490.png" style="max-width:100%;"><br></p>
<p>开始时，苹果的100日元流到“×2”节点，变成200日元，然后被传递给下一个节点。接着，这个200日元流向“× 1.1”节点，变成220日元。因此，从这个计算图的结果可知，答案为220日元。</p>
<p><img src="/uploads/images/imageup-1558344970324.png" style="max-width:100%;"><br></p>
<blockquote>
<p><strong>问题2</strong>：你在超市买了2个苹果、3个橘子。其中，苹果每个100日元，橘子每个150日元。消费税是10%，请计算支付金额。</p>
</blockquote>
<p><img src="/uploads/images/imageup-1558344995279.png" style="max-width:100%;"><br></p>
<p>综上，用计算图解题的情况下，需要按如下流程进行。</p>
<ol>
<li>构建计算图。</li>
<li>在计算图上，从左向右进行计算。</li>
</ol>
<p>这里的第2歩“从左向右进行计算”是一种正方向上的传播，简称为正向传播。正向传播是从计算图出发点到结束点的传播。</p>
<p>那么，可以联想到，反向传播应该就是在计算图上反方向传播数据，而这将会在导数计算中返回很大作用。</p>
<p>下面考虑“支付金额关于苹果地价格地导数”，可以通过计算图地反向传播求出来。</p>
<p><img src="/uploads/images/imageup-1558345033694.png" style="max-width:100%;"><br></p>
<p>如上图所示，反向传播使用反向箭头（粗线）表示，反向传播的是局部导数，将导数地值写在箭头下方。</p>
<p>上图地意思是：支付金额关于苹果价格地导数为2.2。也就是说，如果苹果地价格上涨1元，那么最终地支付金额上涨2.2元。</p>
<h3 id="链式法则与复合函数"><a class="header-anchor" href="#链式法则与复合函数">¶</a>链式法则与复合函数</h3>
<p>高数基础知识，跳过</p>
<h3 id="链式法则与计算图"><a class="header-anchor" href="#链式法则与计算图">¶</a>链式法则与计算图</h3>
<p>比如，z = (x + y)^2是下面的两个式子构成的。</p>
<ul>
<li>z = t^2</li>
<li>t = x + y</li>
</ul>
<p>该计算式的反向传播如图所示</p>
<p><img src="/uploads/images/imageup-1558345051703.png" style="max-width:100%;"><br></p>
<p>由链式法则计算z对于x的导数有</p>
<ul>
<li>z’(t) = 2t</li>
<li>z’(x) = 2(x+y)</li>
</ul>
<p><img src="/uploads/images/imageup-1558345071129.png" style="max-width:100%;"><br></p>
<h3 id="反向传播"><a class="header-anchor" href="#反向传播">¶</a>反向传播</h3>
<h4 id="加法节点的反向传播"><a class="header-anchor" href="#加法节点的反向传播">¶</a>加法节点的反向传播</h4>
<p>加法节点的反向传播只是将输入信号原封不动输出到下一个节点</p>
<p><img src="/uploads/images/imageup-1558345196753.png" style="max-width:100%;"><br></p>
<h4 id="乘法节点的反向传播"><a class="header-anchor" href="#乘法节点的反向传播">¶</a>乘法节点的反向传播</h4>
<p>乘法的反向传播会将上游的值乘以正向传播时的输入信号的“翻转值”后传递给下游。翻转值表示一种翻转关系，如下图所示，正向传播时信号是x的话，反向传播时则是y；正向传播时信号是y的话，反向传播时则是x。</p>
<p><img src="/uploads/images/imageup-1558345262585.png" style="max-width:100%;"><br></p>
<p>另一个例子</p>
<p><img src="/uploads/images/imageup-1558345366105.png" style="max-width:100%;"><br></p>
<h3 id="用python来简单实现计算图"><a class="header-anchor" href="#用python来简单实现计算图">¶</a>用python来简单实现计算图</h3>
<p>下面实现乘法层，两个乘数作为成员变量，一个成员函数<code>forward()</code>作为正向传播函数，一个成员函数<code>backward()</code>作为反向传播函数。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="class"><span class="keyword"><span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span></span></span><span class="hljs-class"><span class="hljs-class"> </span></span><span class="title"><span class="hljs-class"><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">MulLayer</span></span></span></span></span><span class="hljs-class"><span class="hljs-class">:</span></span></span></span><br><span class="line">    <span class="function"><span class="keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span></span></span><span class="hljs-function"><span class="hljs-function"> </span></span><span class="title"><span class="hljs-function"><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">__init__</span></span></span></span></span><span class="params"><span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(self)</span></span></span></span></span><span class="hljs-function"><span class="hljs-function">:</span></span></span></span><br><span class="line">        self.x = <span class="keyword"><span class="hljs-literal"><span class="hljs-literal">None</span></span></span></span><br><span class="line">        self.y = <span class="keyword"><span class="hljs-literal"><span class="hljs-literal">None</span></span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span></span></span><span class="hljs-function"><span class="hljs-function"> </span></span><span class="title"><span class="hljs-function"><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">forward</span></span></span></span></span><span class="params"><span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(self, x, y)</span></span></span></span></span><span class="hljs-function"><span class="hljs-function">:</span></span></span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y                </span><br><span class="line">        out = x * y</span><br><span class="line"></span><br><span class="line">        <span class="keyword"><span class="hljs-keyword"><span class="hljs-keyword">return</span></span></span> out</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span></span></span><span class="hljs-function"><span class="hljs-function"> </span></span><span class="title"><span class="hljs-function"><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">backward</span></span></span></span></span><span class="params"><span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(self, dout)</span></span></span></span></span><span class="hljs-function"><span class="hljs-function">:</span></span></span></span><br><span class="line">        dx = dout * self.y</span><br><span class="line">        dy = dout * self.x</span><br><span class="line"></span><br><span class="line">        <span class="keyword"><span class="hljs-keyword"><span class="hljs-keyword">return</span></span></span> dx, dy</span><br></pre></td></tr></tbody></table></figure>
<h3 id="激活函数的实现"><a class="header-anchor" href="#激活函数的实现">¶</a>激活函数的实现</h3>
<p>将计算图的思路应用到神经网络中，把构成神经网络的层实现为一个类，以激活函数的ReLU层和sigmoid层为例。</p>
<h4 id="relu层"><a class="header-anchor" href="#relu层">¶</a>ReLU层</h4>
<p>激活函数ReLU表达式如下</p>
<ul>
<li>y = x  (x&gt;0)</li>
<li>y = 0  (x&lt;=0)</li>
</ul>
<p>ReLU的计算图如下</p>
<p><img src="/uploads/images/imageup-1558345391006.png" style="max-width:100%;"><br></p>
<p>python代码如下。<br>
<code>ReLU</code>有成员变量<code>mask</code>，这个变量是由<code>true</code>和<code>false</code>构成的<code>Numpy</code>数组，将正向传播时小于0的地方保存为true，其他地方为false</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="class"><span class="keyword"><span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span></span></span><span class="hljs-class"><span class="hljs-class"> </span></span><span class="title"><span class="hljs-class"><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">Relu</span></span></span></span></span><span class="hljs-class"><span class="hljs-class">:</span></span></span></span><br><span class="line">    <span class="function"><span class="keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span></span></span><span class="hljs-function"><span class="hljs-function"> </span></span><span class="title"><span class="hljs-function"><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">__init__</span></span></span></span></span><span class="params"><span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(self)</span></span></span></span></span><span class="hljs-function"><span class="hljs-function">:</span></span></span></span><br><span class="line">        self.mask = <span class="keyword"><span class="hljs-literal"><span class="hljs-literal">None</span></span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span></span></span><span class="hljs-function"><span class="hljs-function"> </span></span><span class="title"><span class="hljs-function"><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">forward</span></span></span></span></span><span class="params"><span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(self, x)</span></span></span></span></span><span class="hljs-function"><span class="hljs-function">:</span></span></span></span><br><span class="line">        self.mask = (x &lt;= <span class="number"><span class="hljs-number"><span class="hljs-number">0</span></span></span>)</span><br><span class="line">        out = x.copy()</span><br><span class="line">        out[self.mask] = <span class="number"><span class="hljs-number"><span class="hljs-number">0</span></span></span></span><br><span class="line"></span><br><span class="line">        <span class="keyword"><span class="hljs-keyword"><span class="hljs-keyword">return</span></span></span> out</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span></span></span><span class="hljs-function"><span class="hljs-function"> </span></span><span class="title"><span class="hljs-function"><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">backward</span></span></span></span></span><span class="params"><span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(self, dout)</span></span></span></span></span><span class="hljs-function"><span class="hljs-function">:</span></span></span></span><br><span class="line">        dout[self.mask] = <span class="number"><span class="hljs-number"><span class="hljs-number">0</span></span></span></span><br><span class="line">        dx = dout</span><br><span class="line"></span><br><span class="line">        <span class="keyword"><span class="hljs-keyword"><span class="hljs-keyword">return</span></span></span> dx</span><br></pre></td></tr></tbody></table></figure>
<h4 id="sigmoid层的实现"><a class="header-anchor" href="#sigmoid层的实现">¶</a>sigmoid层的实现</h4>
<p>y = 1 / (1 + exp(-x))</p>
<p>计算图表示如下</p>
<p><img src="/uploads/images/imageup-1558345397603.png" style="max-width:100%;"><br></p>
<p>而它的反向传播如下图</p>
<p><img src="/uploads/images/imageup-1558345401848.png" style="max-width:100%;"><br></p>
<p>省略中间过程，将其看作一个变换，结果相同，但是减少计算步骤，可以不用在意Sigmoid层中琐碎的细节，而只需要专注它的输入和输出，这一点也很重要。其输入输入的正反向传播可以简化如下</p>
<p><img src="/uploads/images/imageup-1558345406399.png" style="max-width:100%;"><br></p>
<p><img src="/uploads/images/imageup-1558345414212.png" style="max-width:100%;"><br></p>
<p>最后可以得到最终版的sigmoid层计算图如下</p>
<p><img src="/uploads/images/imageup-1558345421724.png" style="max-width:100%;"><br></p>
<p>用python代码实现如下</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="class"><span class="keyword"><span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span></span></span><span class="hljs-class"><span class="hljs-class"> </span></span><span class="title"><span class="hljs-class"><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">Sigmoid</span></span></span></span></span><span class="hljs-class"><span class="hljs-class">:</span></span></span></span><br><span class="line">    <span class="function"><span class="keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span></span></span><span class="hljs-function"><span class="hljs-function"> </span></span><span class="title"><span class="hljs-function"><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">__init__</span></span></span></span></span><span class="params"><span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(self)</span></span></span></span></span><span class="hljs-function"><span class="hljs-function">:</span></span></span></span><br><span class="line">        self.out = <span class="keyword"><span class="hljs-literal"><span class="hljs-literal">None</span></span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span></span></span><span class="hljs-function"><span class="hljs-function"> </span></span><span class="title"><span class="hljs-function"><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">forward</span></span></span></span></span><span class="params"><span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(self, x)</span></span></span></span></span><span class="hljs-function"><span class="hljs-function">:</span></span></span></span><br><span class="line">        out = sigmoid(x)</span><br><span class="line">        self.out = out</span><br><span class="line">        <span class="keyword"><span class="hljs-keyword"><span class="hljs-keyword">return</span></span></span> out</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span></span></span><span class="hljs-function"><span class="hljs-function"> </span></span><span class="title"><span class="hljs-function"><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">backward</span></span></span></span></span><span class="params"><span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(self, dout)</span></span></span></span></span><span class="hljs-function"><span class="hljs-function">:</span></span></span></span><br><span class="line">        dx = dout * (<span class="number"><span class="hljs-number"><span class="hljs-number">1.0</span></span></span> - self.out) * self.out</span><br><span class="line"></span><br><span class="line">        <span class="keyword"><span class="hljs-keyword"><span class="hljs-keyword">return</span></span></span> dx</span><br></pre></td></tr></tbody></table></figure>
<h3 id="affine-softmax层的实现"><a class="header-anchor" href="#affine-softmax层的实现">¶</a>Affine/Softmax层的实现</h3>
<blockquote>
<p>神经网络的正向传播中进行的矩阵的乘积运算在几何学领域被称为“仿射变换”A。因此，这里将进行仿射变换的处理实现为“Affine层”。</p>
</blockquote>
<p>神经网络的正向传播，计算加权信号的总和可以用<code>Y = np.dot(X, W) + B</code>计算出来，然后Y经过激活函数转换后，传递给下一层，这是神经网络正向传播的流程。<br><img src="/uploads/images/imageup-1558345435700.png" style="max-width:100%;"><br></p>
<p>需要注意的是之前介绍的计算图中，各节点之间流动的是标量，而现在流动的是矩阵。那么现在考虑这个计算图的反向传播。</p>
<p>从数学公式上(X为输入矩阵，W为权重矩阵，B为偏置矩阵，L为损失函数，WT为矩阵W的转置)</p>
<p>Y = XW + B<br>
L = loss(Y)</p>
<p>dL/dX = (dL/dY)·WT<br>
dL/dW = XT·(dL/dY)</p>
<p>反向传播的计算图如下，这里假设X的形状为(2,)，W的形状为(2,3)</p>
<p><img src="/uploads/images/imageup-1558345447346.png" style="max-width:100%;"><br></p>
<p>同样的，也可以获得批处理版本的Affine层</p>
<p><img src="/uploads/images/imageup-1558345455424.png" style="max-width:100%;"><br></p>
<p><strong>加上偏置时，需要特别注意。正向传播时，偏置被加到X·W的各个数据上</strong>。比如，N = 2（数据为2个）时，偏置会被分别加到这2个数据（各自的计算结果）上，具体的例子如下所示</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs php"><span class="line"><span class="meta">&gt;&gt;&gt; </span>X_dot_W = np.<span class="hljs-keyword"><span class="hljs-keyword">array</span></span>([[<span class="number"><span class="hljs-number"><span class="hljs-number">0</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">0</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">0</span></span></span>], [<span class="number"><span class="hljs-number"><span class="hljs-number">10</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">10</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">10</span></span></span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B = np.<span class="hljs-keyword"><span class="hljs-keyword">array</span></span>([<span class="number"><span class="hljs-number"><span class="hljs-number">1</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">2</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">3</span></span></span>])</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X_dot_W</span><br><span class="line">array([[ <span class="number"><span class="hljs-number"><span class="hljs-number">0</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">0</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">0</span></span></span>],</span><br><span class="line">    [ <span class="number"><span class="hljs-number"><span class="hljs-number">10</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">10</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">10</span></span></span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X_dot_W + B</span><br><span class="line">array([[ <span class="number"><span class="hljs-number"><span class="hljs-number">1</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">2</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">3</span></span></span>],</span><br><span class="line">    [<span class="number"><span class="hljs-number"><span class="hljs-number">11</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">12</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">13</span></span></span>]])</span><br></pre></td></tr></tbody></table></figure>
<p>正向传播时，偏置会被加到每一个数据（第1个、第2个……）上。<strong>因此，反向传播时，各个数据的反向传播的值需要汇总为偏置的元素</strong>。用代码表示的话，如下所示。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs php"><span class="line"><span class="meta">&gt;&gt;&gt; </span>dY = np.<span class="hljs-keyword"><span class="hljs-keyword">array</span></span>([[<span class="number"><span class="hljs-number"><span class="hljs-number">1</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">2</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">3</span></span></span>,], [<span class="number"><span class="hljs-number"><span class="hljs-number">4</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">5</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">6</span></span></span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dY</span><br><span class="line">array([[<span class="number"><span class="hljs-number"><span class="hljs-number">1</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">2</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">3</span></span></span>],</span><br><span class="line">    [<span class="number"><span class="hljs-number"><span class="hljs-number">4</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">5</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">6</span></span></span>]])</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dB = np.sum(dY, axis=<span class="number"><span class="hljs-number"><span class="hljs-number">0</span></span></span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dB</span><br><span class="line">array([<span class="number"><span class="hljs-number"><span class="hljs-number">5</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">7</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">9</span></span></span>])</span><br></pre></td></tr></tbody></table></figure>
<p>上面的例子中，批处理的偏置的反向传播会对N个数据进行求和。</p>
<p>综上所诉，Affine层的代码实现如下</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="class"><span class="keyword"><span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span></span></span><span class="hljs-class"><span class="hljs-class"> </span></span><span class="title"><span class="hljs-class"><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">Affine</span></span></span></span></span><span class="hljs-class"><span class="hljs-class">:</span></span></span></span><br><span class="line">     <span class="function"><span class="keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span></span></span><span class="hljs-function"><span class="hljs-function"> </span></span><span class="title"><span class="hljs-function"><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">__init__</span></span></span></span></span><span class="params"><span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(self, W, b)</span></span></span></span></span><span class="hljs-function"><span class="hljs-function">:</span></span></span></span><br><span class="line">         self.W = W</span><br><span class="line">         self.b = b</span><br><span class="line">         self.x = <span class="keyword"><span class="hljs-literal"><span class="hljs-literal">None</span></span></span></span><br><span class="line">         self.dW = <span class="keyword"><span class="hljs-literal"><span class="hljs-literal">None</span></span></span></span><br><span class="line">         self.db = <span class="keyword"><span class="hljs-literal"><span class="hljs-literal">None</span></span></span></span><br><span class="line">         </span><br><span class="line">     <span class="function"><span class="keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span></span></span><span class="hljs-function"><span class="hljs-function"> </span></span><span class="title"><span class="hljs-function"><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">forward</span></span></span></span></span><span class="params"><span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(self, x)</span></span></span></span></span><span class="hljs-function"><span class="hljs-function">:</span></span></span></span><br><span class="line">         self.x = x</span><br><span class="line">         out = np.dot(x, self.W) + self.b</span><br><span class="line">         <span class="keyword"><span class="hljs-keyword"><span class="hljs-keyword">return</span></span></span> out</span><br><span class="line">         </span><br><span class="line">     <span class="function"><span class="keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span></span></span><span class="hljs-function"><span class="hljs-function"> </span></span><span class="title"><span class="hljs-function"><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">backward</span></span></span></span></span><span class="params"><span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(self, dout)</span></span></span></span></span><span class="hljs-function"><span class="hljs-function">:</span></span></span></span><br><span class="line">         dx = np.dot(dout, self.W.T)</span><br><span class="line">         self.dW = np.dot(self.x.T, dout)</span><br><span class="line">         self.db = np.sum(dout, axis=<span class="number"><span class="hljs-number"><span class="hljs-number">0</span></span></span>)</span><br><span class="line">         <span class="keyword"><span class="hljs-keyword"><span class="hljs-keyword">return</span></span></span> dx</span><br></pre></td></tr></tbody></table></figure>
<h3 id="softmax-with-loss-层"><a class="header-anchor" href="#softmax-with-loss-层">¶</a>Softmax-with-Loss 层</h3>
<p><code>softmax</code>函数将输入值正规化后再输出，比如手写字识别时，softmax层的输出如下</p>
<p><img src="/uploads/images/imageup-1558345461511.png" style="max-width:100%;"><br></p>
<blockquote>
<p>神经网络中进行的处理有推理（inference）和学习两个阶段。神经网络的推理通常不使用 Softmax层。当神经网络的推理只需要给出一个答案的情况下，因为此时只对得分最大值感兴趣，所以不需要Softmax层。不过，神经网络的学习阶段则需要 Softmax层。</p>
</blockquote>
<p>实现Softmax层。考虑到这里也包含作为<strong>损失函数</strong>的<strong>交叉熵误差</strong>（cross entropy error），所以称为“Softmax-with-Loss层”。Softmax-withLoss层（Softmax函数和交叉熵误差）的计算图如图，略复杂。</p>
<p><img src="/uploads/images/imageup-1558345468291.png" style="max-width:100%;"><br></p>
<p>这里假设要进行3类分类，从前面的层接收3个输入（得分）<strong>。Softmax层</strong>将输入（a1, a2, a3）正规化，输出（y1,y2, y3）。<strong>Cross Entropy Error层</strong>接收Softmax的输出（y1, y2, y3）和<strong>教师标签</strong>（t1,t2,t3），从这些数据中<strong>输出损失L</strong>。</p>
<p><img src="/uploads/images/imageup-1558345472847.png" style="max-width:100%;"><br></p>
<p>由于（y1, y2, y3）是Softmax层的输出，（t1, t2, t3）是<strong>监督数据</strong>，所以（y1 − t1, y2 − t2, y3 − t3）是<strong>Softmax层的输出和教师标签的差分</strong>。神经网络的反向传播会把这个差分表示的误差传递给前面的层，<strong>这是神经网络学习中的重要性质</strong></p>
<blockquote>
<p>使用交叉熵误差作为<strong>softmax函数</strong>的损失函数后，反向传播得到（y1 − t1, y2 − t2, y3 − t3）这样“简约”的结果。实际上，这样“简约”的结果并不是偶然的，而是为了得到这样的结果，特意设计了交叉熵误差函数。回归问题中输出层使用“恒等函数”，损失函数使用“平方和误差”，也是出于同样的理由</p>
</blockquote>
<p>Softmax-with-Loss层的python代码实现</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="class"><span class="keyword"><span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span></span></span><span class="hljs-class"><span class="hljs-class"> </span></span><span class="title"><span class="hljs-class"><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">SoftmaxWithLoss</span></span></span></span></span><span class="hljs-class"><span class="hljs-class">:</span></span></span></span><br><span class="line">    <span class="function"><span class="keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span></span></span><span class="hljs-function"><span class="hljs-function"> </span></span><span class="title"><span class="hljs-function"><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">__init__</span></span></span></span></span><span class="params"><span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(self)</span></span></span></span></span><span class="hljs-function"><span class="hljs-function">:</span></span></span></span><br><span class="line">        self.loss = <span class="keyword"><span class="hljs-literal"><span class="hljs-literal">None</span></span></span></span><br><span class="line">        self.y = <span class="keyword"><span class="hljs-literal"><span class="hljs-literal">None</span></span></span> <span class="comment"><span class="hljs-comment"><span class="hljs-comment"># softmax的输出</span></span></span></span><br><span class="line"><span class="hljs-comment"><span class="hljs-comment">        self.t = </span></span><span class="keyword"><span class="hljs-comment"><span class="hljs-comment">None</span></span></span><span class="hljs-comment"><span class="hljs-comment"> </span></span><span class="comment"><span class="hljs-comment"><span class="hljs-comment"># 监督数据</span></span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"><span class="hljs-comment">    </span></span><span class="function"><span class="keyword"><span class="hljs-comment"><span class="hljs-comment">def</span></span></span><span class="hljs-comment"><span class="hljs-comment"> </span></span><span class="title"><span class="hljs-comment"><span class="hljs-comment">forward</span></span></span><span class="params"><span class="hljs-comment"><span class="hljs-comment">(self, x, t)</span></span></span><span class="hljs-comment"><span class="hljs-comment">:</span></span></span></span><br><span class="line"><span class="hljs-comment"><span class="hljs-comment">        self.t = t</span></span></span><br><span class="line"><span class="hljs-comment"><span class="hljs-comment">        self.y = softmax(x)</span></span></span><br><span class="line"><span class="hljs-comment"><span class="hljs-comment">        self.loss = cross_entropy_error(self.y, self.t)</span></span></span><br><span class="line"><span class="hljs-comment"><span class="hljs-comment">        </span></span></span><br><span class="line"><span class="hljs-comment"><span class="hljs-comment">        </span></span><span class="keyword"><span class="hljs-comment"><span class="hljs-comment">return</span></span></span><span class="hljs-comment"><span class="hljs-comment"> self.loss</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"><span class="hljs-comment">    </span></span><span class="function"><span class="keyword"><span class="hljs-comment"><span class="hljs-comment">def</span></span></span><span class="hljs-comment"><span class="hljs-comment"> </span></span><span class="title"><span class="hljs-comment"><span class="hljs-comment">backward</span></span></span><span class="params"><span class="hljs-comment"><span class="hljs-comment">(self, dout=</span></span><span class="number"><span class="hljs-comment"><span class="hljs-comment">1</span></span></span><span class="hljs-comment"><span class="hljs-comment">)</span></span></span><span class="hljs-comment"><span class="hljs-comment">:</span></span></span></span><br><span class="line"><span class="hljs-comment"><span class="hljs-comment">        batch_size = self.t.shape[</span></span><span class="number"><span class="hljs-comment"><span class="hljs-comment">0</span></span></span><span class="hljs-comment"><span class="hljs-comment">]</span></span></span><br><span class="line"><span class="hljs-comment"><span class="hljs-comment">        dx = (self.y - self.t) / batch_size</span></span></span><br><span class="line"><span class="hljs-comment"><span class="hljs-comment">        </span></span><span class="keyword"><span class="hljs-comment"><span class="hljs-comment">return</span></span></span><span class="hljs-comment"><span class="hljs-comment"> dx</span></span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="误差反向传播法的实现"><a class="header-anchor" href="#误差反向传播法的实现">¶</a>误差反向传播法的实现</h3>
<p>将上面介绍的各个层的类组装起来，就可以构建可以反向传播的神经网络。步骤如下</p>
<p><strong>前提</strong><br>
神经网络中有合适的权重和偏置，调整权重和偏置以便拟合训练数据的过程称为学习。神经网络的学习分为下面4个步骤。误差反向传播法会在步骤2中出现</p>
<p><strong>步骤1（mini-batch）</strong><br>
从训练数据中随机选择一部分数据。</p>
<p><strong>步骤2（计算梯度）</strong><br>
计算损失函数关于各个权重参数的梯度。</p>
<p><strong>步骤3（更新参数）</strong><br>
将权重参数沿梯度方向进行微小的更新。</p>
<p><strong>步骤4（重复）</strong><br>
重复步骤1、步骤2、步骤3。</p>
<p>数值微分虽然实现简单，但是计算要耗费较多的时间。和需要花费较多时间的数值微分不同，误差反向传播法可以快速高效地计算梯度。</p>
<p>至于为什么？因为数值微分通过计算两次在输入值X附近的近似值的输出值之差，并除于这两个近似值的距离来计算近似导数。数学公式如下。</p>
<p>f‘(x) = [f(x + dx) - f(x - dx)] / 2dx</p>
<p>这样的话，就意味着需要进行多两次正向传输才可以计算出这次的误差导数。即f(x + dx)和 f(x - dx)的计算。这样往往很耗费时间，而反向误差计算只有一次，而且反向误差计算一次的计算量往往还很小，就像上面只需要计算<code>(y-t)</code>，这点计算量相比数值微分的计算小太多。</p>
<h3 id="对应误差反向传播法的神经网络的实现"><a class="header-anchor" href="#对应误差反向传播法的神经网络的实现">¶</a>对应误差反向传播法的神经网络的实现</h3>
<p>这个的源码还没自己动手写就不上代码了，书上给的思路如下</p>
<p><strong>TwoLayerNet类的实例变量</strong></p>
<table>
<thead>
<tr>
<th>实例变量</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>params</td>
<td>保存神经网络的参数的字典型变量。params[‘W1’]是第1层的权重，params[‘b1’]是第1层的偏置。params[‘W2’]是第2层的权重，params[‘b2’]是第2层的偏置</td>
</tr>
<tr>
<td>layers</td>
<td>保存神经网络的层的有序字典型变量。以layers[‘Affine1’]、layers[‘ReLu1’]、layers[‘Affine2’]的形式，通过有序字典保存各个层</td>
</tr>
<tr>
<td>lastLayer</td>
<td>神经网络的最后一层。本例中为SoftmaxWithLoss层</td>
</tr>
</tbody>
</table>
<p><strong>TwoLayerNet类的方法</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>__init__(self, input_size,hidden_size,output_size,weight_init_std)</td>
<td>进行初始化。参数从头开始依次是输入层的神经元数、隐藏层的神经元数、输出层的神经元数、初始化权重时的高斯分布的规模</td>
</tr>
<tr>
<td>predict(self, x)</td>
<td>进行识别（推理）。参数x是图像数据</td>
</tr>
<tr>
<td>loss(self, x, t)</td>
<td>计算损失函数的值。参数X是图像数据、t是正确解标签</td>
</tr>
<tr>
<td>accuracy(self, x, t)</td>
<td>计算识别精度</td>
</tr>
<tr>
<td>numerical_gradient(self, x, t)</td>
<td>通过数值微分计算关于权重参数的梯度（同上一章）</td>
</tr>
<tr>
<td>gradient(self, x, t)</td>
<td>通过误差反向传播法计算关于权重参数的梯度</td>
</tr>
</tbody>
</table>
<hr>
<p><strong>注</strong>:本文为<strong>斋藤康毅</strong>的《<strong>深度学习入门：基于Python的理论与实现</strong>》片段摘抄与学习笔记</p>
</div></div><p><br></p></div><p><br></p>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/6fe32b0d.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>用python做一个类c编译器——词法分析器</title>
                <link>https://me.idealli.com/post/52e79625.html</link>
                <guid>https://me.idealli.com/post/52e79625.html</guid>
                <pubDate>2019-5-20</pubDate>
                <description>
                程序创建一个词法类——classword_list，在使用类构造一个示例对象时需传入一个文件名参数。而后，对象的初始化函数对该源代码进行切割，并返回一个字典，存放单词和单词所在的行号。接着，初始化函数调用单词分类函数
                </description>
                <content:encoded>
                <![CDATA[<div><div class="post-body" itemprop="articleBody">
<p>程序创建一个词法类——classword_list，在使用类构造一个示例对象时需传入一个文件名参数。<br>
而后，对象的初始化函数对该源代码进行切割，并返回一个字典，存放单词和单词所在的行号。<br>
接着，初始化函数调用单词分类函数（creat_table）对每个单词进行分类，并且进行括号匹配<br>
最后将分类的单词放进对象的四个成员变量中，也就是四个表。</p>
<p>我的词法分析思维导图</p>
<p><img src="/uploads/images/imageup-1558345882989.png" style="max-width:100%;"><img alt="" src="https://note.youdao.com/yws/public/resource/6660343368f65029befe1eb768dec97d/xmlnote/OFFICED67A9DFC4CF54595BD58848DB2C212F7/1048"></p>
<a id="more"></a>
<h3 id="单词类别序号和表序号"><a class="header-anchor" href="#单词类别序号和表序号">¶</a>单词类别序号和表序号</h3>
<p>输出单词结点有类别,序号等信息</p>
<h5 id="运算符表"><a class="header-anchor" href="#运算符表">¶</a>运算符表</h5>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs php"><span class="line">y_list = [<span class="string"><span class="hljs-string">"+"</span></span>,<span class="string"><span class="hljs-string">"-"</span></span>,<span class="string"><span class="hljs-string">"*"</span></span>,<span class="string"><span class="hljs-string">"/"</span></span>,<span class="string"><span class="hljs-string">"&lt;"</span></span>,<span class="string"><span class="hljs-string">"&lt;="</span></span>,<span class="string"><span class="hljs-string">"&gt;"</span></span>,<span class="string"><span class="hljs-string">"&gt;="</span></span>,<span class="string"><span class="hljs-string">"="</span></span>,<span class="string"><span class="hljs-string">"=="</span></span>,<span class="string"><span class="hljs-string">"!="</span></span>,<span class="string"><span class="hljs-string">"^"</span></span>,<span class="string"><span class="hljs-string">","</span></span>,<span class="string"><span class="hljs-string">"&amp;"</span></span>,<span class="string"><span class="hljs-string">"&amp;&amp;"</span></span>,<span class="string"><span class="hljs-string">"|"</span></span>,<span class="string"><span class="hljs-string">"||"</span></span>,<span class="string"><span class="hljs-string">"%"</span></span>,<span class="string"><span class="hljs-string">"~"</span></span>,<span class="string"><span class="hljs-string">"&lt;&lt;"</span></span>,<span class="string"><span class="hljs-string">"&gt;&gt;"</span></span>,<span class="string"><span class="hljs-string">"!"</span></span>]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="分隔符表"><a class="header-anchor" href="#分隔符表">¶</a>分隔符表</h5>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs cpp"><span class="line">f_list = [<span class="string"><span class="hljs-string">";"</span></span>,<span class="string"><span class="hljs-string">"("</span></span>,<span class="string"><span class="hljs-string">")"</span></span>,<span class="string"><span class="hljs-string">"["</span></span>,<span class="string"><span class="hljs-string">"]"</span></span>,<span class="string"><span class="hljs-string">"{"</span></span>,<span class="string"><span class="hljs-string">"}"</span></span>, <span class="string"><span class="hljs-string">"."</span></span>,<span class="string"><span class="hljs-string">":"</span></span>,<span class="string"><span class="hljs-string">""</span><span class="hljs-string">"</span></span><span class="hljs-string">,</span><span class="string"><span class="hljs-string">"</span>#<span class="hljs-string">"</span></span><span class="hljs-string">,</span><span class="string"><span class="hljs-string">"</span><span class="hljs-string">"</span></span><span class="hljs-string">,</span><span class="string"><span class="hljs-string">"</span><span class="hljs-string">"</span></span><span class="hljs-string">,</span><span class="string"><span class="hljs-string">"</span>?<span class="hljs-string">"</span></span><span class="hljs-string">]</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="关键字表"><a class="header-anchor" href="#关键字表">¶</a>关键字表</h5>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs sql"><span class="line">k_list = [</span><br><span class="line">    <span class="string">"auto"</span>, <span class="string">"break"</span>, <span class="string">"case"</span>, <span class="string">"char"</span>, <span class="string">"const"</span>, <span class="string">"continue"</span>,<span class="string">"default"</span>, <span class="string">"<span class="hljs-keyword">do</span><span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span><span class="hljs-keyword">double</span><span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span><span class="hljs-keyword">else</span><span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span>enum<span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span>extern<span class="hljs-string">"</span></span><span class="hljs-string">,</span></span><br><span class="line"><span class="hljs-string">    </span><span class="string"><span class="hljs-string">"</span><span class="hljs-built_in">float</span><span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span><span class="hljs-keyword">for</span><span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span><span class="hljs-keyword">goto</span><span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span><span class="hljs-keyword">if</span><span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span><span class="hljs-built_in">int</span><span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span><span class="hljs-keyword">long</span><span class="hljs-string">"</span></span><span class="hljs-string">,</span><span class="string"><span class="hljs-string">"</span><span class="hljs-keyword">register</span><span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span><span class="hljs-keyword">return</span><span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span><span class="hljs-keyword">short</span><span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span>signed<span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span>sizeof<span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span><span class="hljs-keyword">static</span><span class="hljs-string">"</span></span><span class="hljs-string">,</span></span><br><span class="line"><span class="hljs-string">    </span><span class="string"><span class="hljs-string">"</span><span class="hljs-keyword">struct</span><span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span><span class="hljs-keyword">switch</span><span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span>typedef<span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span><span class="hljs-keyword">union</span><span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span><span class="hljs-keyword">unsigned</span><span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span><span class="hljs-built_in">void</span><span class="hljs-string">"</span></span><span class="hljs-string">,</span><span class="string"><span class="hljs-string">"</span>volatile<span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span><span class="hljs-keyword">while</span><span class="hljs-string">"</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">"</span>printf<span class="hljs-string">"</span></span></span><br><span class="line"><span class="hljs-string">]</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="括号配对判断"><a class="header-anchor" href="#括号配对判断">¶</a>括号配对判断</h5>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs"><span class="line">kuo_cp = {<span class="string">{</span>:<span class="string">}</span>, <span class="string">[</span>:<span class="string">]</span>, <span class="string">(</span>:<span class="string">)</span>}</span><br></pre></td></tr></tbody></table></figure>
<p>说明：每个关键字的id定义为它在该关键字表中的索引位置，运算符表与分隔符表也是如此</p>
<h4 id="代码注释部分"><a class="header-anchor" href="#代码注释部分">¶</a>代码注释部分</h4>
<p>由<code>//</code>开始的行注释,和<code>/*</code>开始<code>*/</code>结束的段注释,对程序没有影响,也忽略.</p>
<h3 id="词法分析程序的功能"><a class="header-anchor" href="#词法分析程序的功能">¶</a>词法分析程序的功能</h3>
<p>输入：所给文法的源程序字符串。<br>
输出：一个自定义的词法类</p>
<p>该词法类定义如下</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs shell"><span class="line"><span class="comment"><span class="hljs-meta">#</span><span class="bash"> 词法分析器输出对象</span></span></span><br><span class="line"><span class="comment"><span class="bash"><span class="hljs-comment"># 成员变量：输出的单词表，源代码中的分隔符表,运算符表,变量表,关键字表</span></span></span></span><br><span class="line"><span class="comment"><span class="bash"><span class="hljs-comment"># 一个方法，将源代码字符切割并存入对应表中</span></span></span></span><br><span class="line"><span class="comment"><span class="bash"><span class="hljs-comment"># 对象创建实例需要传入filename参数，默认为test.c</span></span></span></span><br><span class="line"><span class="class"><span class="keyword"><span class="bash"><span class="hljs-comment">class</span></span></span><span class="bash"><span class="hljs-comment"> </span></span><span class="title"><span class="bash"><span class="hljs-comment">word_list</span></span></span><span class="params"><span class="bash"><span class="hljs-comment">()</span></span></span><span class="bash"><span class="hljs-comment">:</span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    </span></span><span class="function"><span class="keyword"><span class="bash"><span class="hljs-comment">def</span></span></span><span class="bash"><span class="hljs-comment"> </span></span><span class="title"><span class="bash"><span class="hljs-comment">__init__</span></span></span><span class="params"><span class="bash"><span class="hljs-comment">(self, filename=</span></span><span class="string"><span class="bash"><span class="hljs-comment">test.c</span></span></span><span class="bash"><span class="hljs-comment">)</span></span></span><span class="bash"><span class="hljs-comment">:</span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        self.word_list = []          </span></span><span class="comment"><span class="bash"><span class="hljs-comment"># 输出单词列表</span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        self.separator_list = []     </span></span><span class="comment"><span class="bash"><span class="hljs-comment"># 分隔符</span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        self.operator_list = []      </span></span><span class="comment"><span class="bash"><span class="hljs-comment"># 运算符</span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        self.name_list = []          </span></span><span class="comment"><span class="bash"><span class="hljs-comment"># 变量</span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        self.key_word_table = []     </span></span><span class="comment"><span class="bash"><span class="hljs-comment"># 关键字</span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        self.flag = </span></span><span class="keyword"><span class="bash"><span class="hljs-comment">True</span></span></span><span class="bash"><span class="hljs-comment">             </span></span><span class="comment"><span class="bash"><span class="hljs-comment"># 源代码是否无报错标识</span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        </span></span><span class="comment"><span class="bash"><span class="hljs-comment"># get_word函数将源代码切割</span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        self.creat_table(get_word(filename))</span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    </span></span><span class="comment"><span class="bash"><span class="hljs-comment"># 创建各个表</span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    </span></span><span class="function"><span class="keyword"><span class="bash"><span class="hljs-comment">def</span></span></span><span class="bash"><span class="hljs-comment"> </span></span><span class="title"><span class="bash"><span class="hljs-comment">creat_table</span></span></span><span class="params"><span class="bash"><span class="hljs-comment">(self, in_words)</span></span></span><span class="bash"><span class="hljs-comment">:</span></span></span></span><br></pre></td></tr></tbody></table></figure>
<ol>
<li>成员变量：输出的单词表，源代码中的分隔符表,运算符表,变量表,关键字表</li>
<li>成员方法：将源代码字符切割并存入对应表中</li>
</ol>
<p>其中，word_list（输出单词列表）中包含所有答源代码单词，其他表中存放着细分的单词（考虑到后面的程序会用到）</p>
<h3 id="词法分析器由两个python文件组成"><a class="header-anchor" href="#词法分析器由两个python文件组成">¶</a>词法分析器由两个python文件组成</h3>
<ol>
<li><a href="http://Cmp.py" rel="noopener" target="_blank">Cmp.py</a> 为分析器主函数</li>
<li><a href="http://Function.py" rel="noopener" target="_blank">Function.py</a> 存放我写的一些单词处理函数，并在cmp.py中导入调用</li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs cpp"><span class="line"><span class="keyword"><span class="hljs-keyword">import</span></span> re</span><br><span class="line"><span class="comment"># 一些判断函数和字符分割函数放在function文件中</span></span><br><span class="line"><span class="keyword">from</span> function <span class="keyword"><span class="hljs-keyword">import</span></span> if_num, if_name, have_name, <span class="hljs-built_in">printf</span>, get_word</span><br></pre></td></tr></tbody></table></figure>
<h3 id="词法分析程序的主要算法思想"><a class="header-anchor" href="#词法分析程序的主要算法思想">¶</a>词法分析程序的主要算法思想</h3>
<p>程序创建一个词法类——classword_list，在使用类构造一个示例对象时需传入一个文件名参数。<br>
而后，对象的初始化函数对该源代码进行切割，并返回一个字典，存放单词和单词所在的行号。<br>
接着，初始化函数调用单词分类函数（creat_table）对每个单词进行分类，并且进行括号匹配<br>
最后将分类的单词放进对象的四个成员变量中，也就是四个表。</p>
<h3 id="测试用例"><a class="header-anchor" href="#测试用例">¶</a>测试用例</h3>
<ol>
<li>测试一（正确用例）:</li>
</ol>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre class="hljs php"><span class="line"><span class="meta"><span class="hljs-comment">#</span><span class="meta-keyword"><span class="hljs-comment">include</span></span><span class="hljs-comment"> </span><span class="meta-string"><span class="hljs-comment">&lt;stdio.h&gt;</span></span></span></span><br><span class="line"><span class="function"><span class="keyword"><span class="hljs-comment">int</span></span><span class="hljs-comment"> </span><span class="title"><span class="hljs-comment">main</span></span><span class="params"><span class="hljs-comment">()</span></span></span></span><br><span class="line"><span class="function"></span><span class="hljs-comment">{</span></span><br><span class="line"><span class="hljs-comment">    </span><span class="comment"><span class="hljs-comment">// 兰州小红鸡的注释测试</span></span></span><br><span class="line"><span class="hljs-comment">    </span><span class="comment"><span class="hljs-comment">// 这是一条独立行的注释测试</span></span></span><br><span class="line"><span class="hljs-comment">    </span><span class="keyword"><span class="hljs-comment">int</span></span><span class="hljs-comment"> a,b;</span></span><br><span class="line"><span class="hljs-comment">    a=</span><span class="number"><span class="hljs-comment">0</span></span><span class="hljs-comment">;</span></span><br><span class="line"><span class="hljs-comment">    b=</span><span class="number"><span class="hljs-comment">1</span></span><span class="hljs-comment">; </span><span class="comment"><span class="hljs-comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="hljs-comment">    这样的注释测试 </span></span></span><br><span class="line"><span class="comment"><span class="hljs-comment">    */</span></span><span class="hljs-comment">a=a+b;</span></span><br><span class="line"><span class="hljs-comment">    </span><span class="built_in"><span class="hljs-comment">printf</span></span><span class="hljs-comment">(</span><span class="string"><span class="hljs-comment">"%d"</span></span><span class="hljs-comment">,a);     </span><span class="comment"><span class="hljs-comment">// 这是一条同行的注释测试</span></span></span><br><span class="line"><span class="hljs-comment">    </span><span class="keyword"><span class="hljs-comment">return</span></span><span class="hljs-comment"> </span><span class="number"><span class="hljs-comment">0</span></span><span class="hljs-comment">;</span></span><br><span class="line"><span class="hljs-comment">    </span><span class="comment"><span class="hljs-comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="hljs-comment">    多行注释测试</span></span></span><br><span class="line"><span class="comment"><span class="hljs-comment">    */</span></span></span><br><span class="line"><span class="hljs-comment">}</span></span><br></pre></td></tr></tbody></table></figure>
<p>输出单词表如下</p>
<p>Line：行号，type：类型，word：单词</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs css"><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">1</span></span>, <span class="string">type</span>: <span class="string">separator</span>, <span class="string">word</span>: <span class="string">#</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">1</span></span>, <span class="string">type</span>: <span class="string">name</span>, <span class="string">word</span>: <span class="string">include</span>, <span class="string">id</span>: <span class="number"><span class="hljs-number">0</span></span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">1</span></span>, <span class="string">type</span>: <span class="string">operator</span>, <span class="string">word</span>: <span class="string">&lt;</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">1</span></span>, <span class="string">type</span>: <span class="string">name</span>, <span class="string">word</span>: <span class="string">stdio</span>, <span class="string">id</span>: <span class="number"><span class="hljs-number">1</span></span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">1</span></span>, <span class="string">type</span>: <span class="string">separator</span>, <span class="string">word</span>: <span class="string">.</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">1</span></span>, <span class="string">type</span>: <span class="string">name</span>, <span class="string">word</span>: <span class="string">h</span>, <span class="string">id</span>: <span class="number"><span class="hljs-number">2</span></span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">1</span></span>, <span class="string">type</span>: <span class="string">operator</span>, <span class="string">word</span>: <span class="string">&gt;</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">2</span></span>, <span class="string">type</span>: <span class="string">keyword</span>, <span class="string">word</span>: <span class="string">int</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">2</span></span>, <span class="string">type</span>: <span class="string">name</span>, <span class="string">word</span>: <span class="string">main</span>, <span class="string">id</span>: <span class="number"><span class="hljs-number">3</span></span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">2</span></span>, <span class="string">type</span>: <span class="string">separator</span>, <span class="string">word</span>: <span class="string">(</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">2</span></span>, <span class="string">type</span>: <span class="string">separator</span>, <span class="string">word</span>: <span class="string">)</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">3</span></span>, <span class="string">type</span>: <span class="string">separator</span>, <span class="string">word</span>: <span class="string">{</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">6</span></span>, <span class="string">type</span>: <span class="string">keyword</span>, <span class="string">word</span>: <span class="string">int</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">6</span></span>, <span class="string">type</span>: <span class="string">name</span>, <span class="string">word</span>: <span class="string">a</span>, <span class="string">id</span>: <span class="number"><span class="hljs-number">4</span></span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">6</span></span>, <span class="string">type</span>: <span class="string">operator</span>, <span class="string">word</span>: <span class="string">,</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">6</span></span>, <span class="string">type</span>: <span class="string">name</span>, <span class="string">word</span>: <span class="string">b</span>, <span class="string">id</span>: <span class="number"><span class="hljs-number">5</span></span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">6</span></span>, <span class="string">type</span>: <span class="string">separator</span>, <span class="string">word</span>: <span class="string">;</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">7</span></span>, <span class="string">type</span>: <span class="string">operator</span>, <span class="string">word</span>: <span class="string">=</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">7</span></span>, <span class="string">type</span>: <span class="string">number</span>, <span class="string">value</span>: <span class="string"><span class="hljs-number">0</span></span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">7</span></span>, <span class="string">type</span>: <span class="string">separator</span>, <span class="string">word</span>: <span class="string">;</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">8</span></span>, <span class="string">type</span>: <span class="string">operator</span>, <span class="string">word</span>: <span class="string">=</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">8</span></span>, <span class="string">type</span>: <span class="string">number</span>, <span class="string">value</span>: <span class="string"><span class="hljs-number">1</span></span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">8</span></span>, <span class="string">type</span>: <span class="string">separator</span>, <span class="string">word</span>: <span class="string">;</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">11</span></span>, <span class="string">type</span>: <span class="string">keyword</span>, <span class="string">word</span>: <span class="string">printf</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">11</span></span>, <span class="string">type</span>: <span class="string">separator</span>, <span class="string">word</span>: <span class="string">(</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">11</span></span>, <span class="string">type</span>: <span class="string">separator</span>, <span class="string">word</span>: <span class="string"><span class="hljs-string">"</span></span><span class="hljs-string">}</span></span><br><span class="line"><span class="hljs-string">{</span><span class="string"><span class="hljs-string">line</span></span><span class="hljs-string">: </span><span class="number"><span class="hljs-string">11</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">type</span></span><span class="hljs-string">: </span><span class="string"><span class="hljs-string">operator</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">word</span></span><span class="hljs-string">: </span><span class="string"><span class="hljs-string">%</span></span><span class="hljs-string">}</span></span><br><span class="line"><span class="hljs-string">{</span><span class="string"><span class="hljs-string">line</span></span><span class="hljs-string">: </span><span class="number"><span class="hljs-string">11</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">type</span></span><span class="hljs-string">: </span><span class="string"><span class="hljs-string">name</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">word</span></span><span class="hljs-string">: </span><span class="string"><span class="hljs-string">d</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">id</span></span><span class="hljs-string">: </span><span class="number"><span class="hljs-string">6</span></span><span class="hljs-string">}</span></span><br><span class="line"><span class="hljs-string">{</span><span class="string"><span class="hljs-string">line</span></span><span class="hljs-string">: </span><span class="number"><span class="hljs-string">11</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">type</span></span><span class="hljs-string">: </span><span class="string"><span class="hljs-string">separator</span></span><span class="hljs-string">, </span><span class="string"><span class="hljs-string">word</span></span><span class="hljs-string">: </span><span class="string"><span class="hljs-string">"</span></span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">11</span></span>, <span class="string">type</span>: <span class="string">operator</span>, <span class="string">word</span>: <span class="string">,</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">11</span></span>, <span class="string">type</span>: <span class="string">separator</span>, <span class="string">word</span>: <span class="string">)</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">11</span></span>, <span class="string">type</span>: <span class="string">separator</span>, <span class="string">word</span>: <span class="string">;</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">12</span></span>, <span class="string">type</span>: <span class="string">keyword</span>, <span class="string">word</span>: <span class="string">return</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">12</span></span>, <span class="string">type</span>: <span class="string">number</span>, <span class="string">value</span>: <span class="string"><span class="hljs-number">0</span></span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">12</span></span>, <span class="string">type</span>: <span class="string">separator</span>, <span class="string">word</span>: <span class="string">;</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">16</span></span>, <span class="string">type</span>: <span class="string">separator</span>, <span class="string">word</span>: <span class="string">}</span>}</span><br></pre></td></tr></tbody></table></figure>
<p>输出变量表如下</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs css"><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">1</span></span>, <span class="string">id</span>: <span class="number"><span class="hljs-number">0</span></span>, <span class="string">value</span>: <span class="number"><span class="hljs-number">0.0</span></span>, <span class="string">name</span>: <span class="string">include</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">1</span></span>, <span class="string">id</span>: <span class="number"><span class="hljs-number">1</span></span>, <span class="string">value</span>: <span class="number"><span class="hljs-number">0.0</span></span>, <span class="string">name</span>: <span class="string">stdio</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">1</span></span>, <span class="string">id</span>: <span class="number"><span class="hljs-number">2</span></span>, <span class="string">value</span>: <span class="number"><span class="hljs-number">0.0</span></span>, <span class="string">name</span>: <span class="string">h</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">2</span></span>, <span class="string">id</span>: <span class="number"><span class="hljs-number">3</span></span>, <span class="string">value</span>: <span class="number"><span class="hljs-number">0.0</span></span>, <span class="string">name</span>: <span class="string">main</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">6</span></span>, <span class="string">id</span>: <span class="number"><span class="hljs-number">4</span></span>, <span class="string">value</span>: <span class="number"><span class="hljs-number">0.0</span></span>, <span class="string">name</span>: <span class="string">a</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">6</span></span>, <span class="string">id</span>: <span class="number"><span class="hljs-number">5</span></span>, <span class="string">value</span>: <span class="number"><span class="hljs-number">0.0</span></span>, <span class="string">name</span>: <span class="string">b</span>}</span><br><span class="line">{<span class="string"><span class="hljs-attribute">line</span></span>: <span class="number"><span class="hljs-number">11</span></span>, <span class="string">id</span>: <span class="number"><span class="hljs-number">6</span></span>, <span class="string">value</span>: <span class="number"><span class="hljs-number">0.0</span></span>, <span class="string">name</span>: <span class="string">d</span>}</span><br></pre></td></tr></tbody></table></figure>
<p>其他两个表不再累赘输出</p>
<h3 id="报错处理"><a class="header-anchor" href="#报错处理">¶</a>报错处理</h3>
<p>括号匹配处理<br>
测试2（错误代码）</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs shell"><span class="line"><span class="comment"><span class="hljs-meta">#</span><span class="bash">include &lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="bash">int <span class="hljs-function"><span class="hljs-title">main</span></span>()</span></span><br><span class="line"><span class="bash">{</span></span><br><span class="line"><span class="bash">    /*</span></span><br><span class="line"><span class="bash">        括号匹配错误检测</span></span><br><span class="line"><span class="bash">        <span class="hljs-built_in">printf</span>后面多了个括号</span></span><br><span class="line"><span class="bash">    */</span></span><br><span class="line"><span class="bash">    <span class="hljs-built_in">printf</span>(</span><span class="string"><span class="bash"><span class="hljs-string">"hello world"</span></span></span><span class="bash">)); </span></span><br><span class="line"><span class="bash">    </span><span class="keyword"><span class="bash"><span class="hljs-built_in">return</span></span></span><span class="bash"> </span><span class="number"><span class="bash">0</span></span><span class="bash">;</span></span><br><span class="line"><span class="bash">}</span></span><br></pre></td></tr></tbody></table></figure>
<p><img alt="" src="https://note.youdao.com/yws/public/resource/6660343368f65029befe1eb768dec97d/xmlnote/OFFICE5538913CFDDC403EB475AAA769809D6E/1049"></p>
<h3 id="非法变量名处理"><a class="header-anchor" href="#非法变量名处理">¶</a>非法变量名处理</h3>
<p>测试3（错误代码）</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs cpp"><span class="line"><span class="comment"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span></span><br><span class="line"><span class="hljs-meta"><span class="hljs-meta-string">int main()</span></span></span><br><span class="line"><span class="hljs-meta"><span class="hljs-meta-string">{</span></span></span><br><span class="line"><span class="hljs-meta"><span class="hljs-meta-string">    /*</span></span></span><br><span class="line"><span class="hljs-meta"><span class="hljs-meta-string">        变量名错误检测</span></span></span><br><span class="line"><span class="hljs-meta"><span class="hljs-meta-string">    */</span></span></span><br><span class="line"><span class="hljs-meta"><span class="hljs-meta-string">    int </span></span><span class="number"><span class="hljs-meta"><span class="hljs-meta-string">7</span></span></span><span class="hljs-meta"><span class="hljs-meta-string">a,</span></span><span class="number"><span class="hljs-meta"><span class="hljs-meta-string">8</span></span></span><span class="hljs-meta"><span class="hljs-meta-string">b;</span></span></span><br><span class="line"><span class="hljs-meta"><span class="hljs-meta-string">    </span></span><span class="keyword"><span class="hljs-meta"><span class="hljs-meta-string">return</span></span></span><span class="hljs-meta"><span class="hljs-meta-string"> </span></span><span class="number"><span class="hljs-meta"><span class="hljs-meta-string">0</span></span></span><span class="hljs-meta"><span class="hljs-meta-string">;</span></span></span><br><span class="line"><span class="hljs-meta"><span class="hljs-meta-string">}</span></span></span><br></pre></td></tr></tbody></table></figure>
<p><img alt="" src="https://note.youdao.com/yws/public/resource/6660343368f65029befe1eb768dec97d/xmlnote/OFFICEDAEE4955A3124845981C896E46B62603/1050"></p>
<h3 id="词法分析器程序"><a class="header-anchor" href="#词法分析器程序">¶</a>词法分析器程序</h3>
<p>源代码见源文件<br>
<strong>源文件结构</strong>:</p>
<ol>
<li><a href="http://cmp.py" rel="noopener" target="_blank">cmp.py</a> 为分析器主函数</li>
<li><a href="http://function.py" rel="noopener" target="_blank">function.py</a> 存放我写的一些单词处理函数，并在cmp.py中导入调用</li>
</ol>
<p><strong>实验环境</strong></p>
<ul>
<li>编译环境： python3.6</li>
<li>使用库:	re</li>
</ul>
<p>源码见我的GitHub<a href="https://github.com/flymysql/flypython/tree/master/python%E5%AE%9E%E7%8E%B0%E7%BC%96%E8%AF%91%E5%99%A8%E2%80%94%E2%80%94%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90" rel="noopener" target="_blank">兰州小红鸡</a></p>
</div></div><p><br></p>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/52e79625.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>数值微分和梯度法</title>
                <link>https://me.idealli.com/post/21418b73.html</link>
                <guid>https://me.idealli.com/post/21418b73.html</guid>
                <pubDate>2019-5-20</pubDate>
                <description>
                利用微小的差分求导数的过程称为数值微分。以计算函数f在(x + h)和(x − h)之间的差分。因为这种计算方法以x为中心，计算它左右两边的差分，所以也称为中心差分（而(x + h)和x之间的差分称为前向差分）。
                </description>
                <content:encoded>
                <![CDATA[<div><div class="post-body" itemprop="articleBody">
<p><strong>梯度法使用梯度的信息决定前进的方向</strong></p>
<h3 id="数值微分"><a class="header-anchor" href="#数值微分">¶</a>数值微分</h3>
<p>利用微小的差分求导数的过程称为<strong>数值微分</strong>。以计算函数f在(x + h)和(x − h)之间的差分。因为这种计算方法以x为中心，计算它左右两边的差分，所以也称为<strong>中心差分</strong>（而(x + h)和x之间的差分称为前向差分）。</p>
<ol>
<li>用python代码简单表示数值微分，</li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="function"><span class="keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span><span class="hljs-function"> </span><span class="title"><span class="hljs-function"><span class="hljs-title">numerical_diff</span></span></span><span class="params"><span class="hljs-function"><span class="hljs-params">(f, x)</span></span></span><span class="hljs-function">:</span></span></span><br><span class="line">     h = <span class="number"><span class="hljs-number">1e-4</span></span>       <span class="comment"><span class="hljs-comment"># 0.0001</span></span></span><br><span class="line"><span class="hljs-comment">     </span><span class="keyword"><span class="hljs-comment">return</span></span><span class="hljs-comment"> (f(x+h) - f(x-h)) / (</span><span class="number"><span class="hljs-comment">2</span></span><span class="hljs-comment">*h)</span></span><br></pre></td></tr></tbody></table></figure>
<ol start="2">
<li>用python代码求偏导数</li>
</ol>
<a id="more"></a>
<ul>
<li>求x0 = 3, x1 = 4时，关于x0的偏导数。</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="function"><span class="keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span><span class="hljs-function"> </span><span class="title"><span class="hljs-function"><span class="hljs-title">function_tmp1</span></span></span><span class="params"><span class="hljs-function"><span class="hljs-params">(x0)</span></span></span><span class="hljs-function">:</span></span></span><br><span class="line">    <span class="keyword"><span class="hljs-keyword">return</span></span> x0*x0 + <span class="number"><span class="hljs-number">4.0</span></span>**<span class="number"><span class="hljs-number">2.0</span></span></span><br><span class="line">numerical_diff(function_tmp1, <span class="number"><span class="hljs-number">3.0</span></span>)</span><br></pre></td></tr></tbody></table></figure>
<p>输出 6.00000000000378</p>
<ul>
<li>求x0 = 3, x1 = 4时，关于x1的偏导数 。</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="function"><span class="keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span><span class="hljs-function"> </span><span class="title"><span class="hljs-function"><span class="hljs-title">function_tmp2</span></span></span><span class="params"><span class="hljs-function"><span class="hljs-params">(x1)</span></span></span><span class="hljs-function">:</span></span></span><br><span class="line">    <span class="keyword"><span class="hljs-keyword">return</span></span> <span class="number"><span class="hljs-number">3.0</span></span>**<span class="number"><span class="hljs-number">2.0</span></span> + x1*x1</span><br><span class="line"></span><br><span class="line">numerical_diff(function_tmp2, <span class="number"><span class="hljs-number">4.0</span></span>)</span><br></pre></td></tr></tbody></table></figure>
<p>输出：7.999999999999119</p>
<h3 id="梯度"><a class="header-anchor" href="#梯度">¶</a>梯度</h3>
<p>像<code>(f(x0), f(x1))</code>这样的由全部变量的偏导数汇总而成的<strong>向量</strong>称为<strong>梯度</strong>（gradient）。梯度可以像下面这样来实现。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs shell"><span class="line"><span class="comment"><span class="hljs-meta">#</span><span class="bash"> 求中心差分</span></span></span><br><span class="line"><span class="function"><span class="keyword"><span class="bash">def</span></span><span class="bash"> </span><span class="title"><span class="bash">num_gradient</span></span><span class="params"><span class="bash">(f, x)</span></span><span class="bash">:</span></span></span><br><span class="line"><span class="bash">    h = </span><span class="number"><span class="bash">1e-4</span></span><span class="bash"> </span><span class="comment"><span class="bash"><span class="hljs-comment"># 0.0001</span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    grad = np.zeros_like(x)</span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    </span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    it = np.nditer(x, flags=[</span></span><span class="string"><span class="bash"><span class="hljs-comment">multi_index</span></span></span><span class="bash"><span class="hljs-comment">], op_flags=[</span></span><span class="string"><span class="bash"><span class="hljs-comment">readwrite</span></span></span><span class="bash"><span class="hljs-comment">])</span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    </span></span><span class="keyword"><span class="bash"><span class="hljs-comment">while</span></span></span><span class="bash"><span class="hljs-comment"> </span></span><span class="keyword"><span class="bash"><span class="hljs-comment">not</span></span></span><span class="bash"><span class="hljs-comment"> it.finished:</span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        idx = it.multi_index</span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        tmp_val = x[idx]</span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        x[idx] = float(tmp_val) + h</span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        fxh1 = f(x) </span></span><span class="comment"><span class="bash"><span class="hljs-comment"># f(x+h)</span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        </span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        x[idx] = tmp_val - h </span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        fxh2 = f(x) </span></span><span class="comment"><span class="bash"><span class="hljs-comment"># f(x-h)</span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        grad[idx] = (fxh1 - fxh2) / (</span></span><span class="number"><span class="bash"><span class="hljs-comment">2</span></span></span><span class="bash"><span class="hljs-comment">*h)</span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        </span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        x[idx] = tmp_val </span></span><span class="comment"><span class="bash"><span class="hljs-comment"># 还原值</span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        it.iternext()   </span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        </span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    </span></span><span class="keyword"><span class="bash"><span class="hljs-comment">return</span></span></span><span class="bash"><span class="hljs-comment"> grad</span></span></span><br></pre></td></tr></tbody></table></figure>
<p><code>np.zeros_like(x)</code>会生成一个形状和x相同、所有元素都为0的数组。参数<code>f</code>为函数。用一个<code>for</code>循环将所有参数的偏导数求出并放入<code>grad</code>数组中。这里用到<code>np.nditer</code>函数来对多维的输入变量进行遍历，求出变量数组中每个元素的差分</p>
<p><strong>np.nditer</strong>用法：顺序遍历多维数组的元素并进行一些操作</p>
<p>梯度会指向各点处的函数值降低的方向。<strong>更严格地讲，梯度指示的方向是各点处的函数值减小最多的方向</strong></p>
<h3 id="梯度法"><a class="header-anchor" href="#梯度法">¶</a>梯度法</h3>
<p>机器学习的<strong>主要任务是在学习时寻找最优参数</strong>。同样地，神经网络也必须在学习时找到最优参数（<strong>权重和偏置</strong>）。这里所说的最优参数是<strong>指损失函数取最小值时的参数</strong>。但是，一般而言，损失函数很复杂，参数空间庞大，无法确定何处能取得最小值。而通过梯度来寻找函数最小值的方法就是梯度法。</p>
<p><strong>注意</strong>：梯度法找到的当前梯度最小值点不一定是函数的最小值点，可能是局部的最小值。在复杂的函数中，梯度指示的方向基本上都不是函数值最小处。</p>
<p>在梯度法中，函数的取值从当前位置沿着梯度方向前进一定距离，然后在新的地方重新求梯度，再沿着新梯度方向前进，如此反复，不断地沿梯度方向前进。直到梯度的下降小于某个设定的阙值，也就是停止条件。</p>
<p>严格地讲，<strong>寻找最小值的梯度法称为梯度下降法，寻找最大值的梯度法称为梯度上升法</strong>。但是通过反转损失函数的符号，求最小值的问题和求最大值的问题会变成相同的问题，因此“下降”还是“上升”的差异本质上并不重要。<strong>一般来说，神经网络（深度学习）中，梯度法主要是指梯度下降法</strong>。</p>
<p>各函数参数梯度下降的数学表达式如下</p>
<p><img src="/uploads/images/imageup-1558346136921.png" style="max-width:100%;"><br></p>
<p>η表示更新量，在深度学习中也叫<strong>学习率</strong>，学习率决定在一次学习中，应该学习多少，以及在多大程度上更新参数。这个学习率要根据实际情况适中设定，不然太小或太大都会影响结果。在神经网络的学习中，一般会<strong>一边改变学习率的值，一边确认学习是否正确进行了</strong>。</p>
<h4 id="用python简单实现梯度下降法"><a class="header-anchor" href="#用python简单实现梯度下降法">¶</a>用python简单实现梯度下降法</h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="keyword"><span class="hljs-keyword">import</span></span> numpy <span class="keyword"><span class="hljs-keyword">as</span></span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span><span class="params">(fun, init_x, lr=<span class="number"><span class="hljs-number">0.01</span></span>, setp_num=<span class="number"><span class="hljs-number">100</span></span>)</span>:</span></span><br><span class="line">    x =init_x</span><br><span class="line">    <span class="keyword"><span class="hljs-keyword">for</span></span> i <span class="keyword"><span class="hljs-keyword">in</span></span> range(setp_num):</span><br><span class="line">        grad = num_gradient(fun, x)</span><br><span class="line">        x -= lr * grad</span><br><span class="line">    <span class="keyword"><span class="hljs-keyword">return</span></span> x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function1</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword"><span class="hljs-keyword">return</span></span> x[<span class="number"><span class="hljs-number">0</span></span>]**<span class="number"><span class="hljs-number">2</span></span> + x[<span class="number"><span class="hljs-number">1</span></span>]**<span class="number"><span class="hljs-number">2</span></span> - <span class="number"><span class="hljs-number">5</span></span> * x[<span class="number"><span class="hljs-number">2</span></span>]</span><br><span class="line"></span><br><span class="line">init_x = np.array([<span class="number"><span class="hljs-number">-3.0</span></span>, <span class="number"><span class="hljs-number">4.0</span></span>, <span class="number"><span class="hljs-number">6.0</span></span>])</span><br><span class="line">grad1 = gradient_descent(function1, init_x, lr=<span class="number"><span class="hljs-number">0.01</span></span>, setp_num=<span class="number"><span class="hljs-number">10000</span></span>)</span><br><span class="line">print(grad1)</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>输出：[-3.38147288e-11  3.15267812e-11  5.06000000e+02]</p>
</blockquote>
<h4 id="关于学习率的设置"><a class="header-anchor" href="#关于学习率的设置">¶</a>关于学习率的设置</h4>
<p>学习率过大的话，会发散成一个很大的值；反过来，学<br>
习率过小的话，基本上没怎么更新就结束了。也就是说，设定合适的学习率<br>
是一个很重要的问题。</p>
<h5 id="学习率过大的例子：lr-10-0"><a class="header-anchor" href="#学习率过大的例子：lr-10-0">¶</a>学习率过大的例子：lr=10.0</h5>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs php"><span class="line">&gt;&gt;&gt; init_x = np.<span class="hljs-keyword">array</span>([<span class="hljs-number">-3.0</span>, <span class="hljs-number">4.0</span>])</span><br><span class="line">&gt;&gt;&gt; gradient_descent(function_2, init_x=init_x, lr=<span class="hljs-number">10.0</span>, step_num=<span class="hljs-number">100</span>)</span><br><span class="line"><span class="hljs-keyword">array</span>([ <span class="hljs-number">-2.58983747e+13</span>, <span class="hljs-number">-1.29524862e+12</span>])</span><br></pre></td></tr></tbody></table></figure>
<h5 id="学习率过小的例子：lr-1e-10"><a class="header-anchor" href="#学习率过小的例子：lr-1e-10">¶</a>学习率过小的例子：lr=1e-10</h5>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs php"><span class="line">&gt;&gt;&gt; init_x = np.<span class="hljs-keyword">array</span>([<span class="hljs-number">-3.0</span>, <span class="hljs-number">4.0</span>])</span><br><span class="line">&gt;&gt;&gt; gradient_descent(function_2, init_x=init_x, lr=<span class="hljs-number">1e-10</span>, step_num=<span class="hljs-number">100</span>)</span><br><span class="line"><span class="hljs-keyword">array</span>([<span class="hljs-number">-2.99999994</span>, <span class="hljs-number">3.99999992</span>])</span><br></pre></td></tr></tbody></table></figure>
<p>像学习率这样的参数称为<strong>超参数</strong>。它和神经网络的参数（<strong>权重和偏置</strong>）性质不同。相对于神经网络的权重参数是通过训练数据和学习算法自动获得的，学习率这样的超参数则是人工设定的。一般来说，超参数需要尝试多个值，以便找到一种可以使学习顺利进行的设定。</p>
<h3 id="神经网络的梯度"><a class="header-anchor" href="#神经网络的梯度">¶</a>神经网络的梯度</h3>
<p>神经网络的梯度是指损失函数关于权重参数的梯度。比如，有一个只有一个形状为2 × 3的权重W的神经网络，损失函数用L表示。此时，梯度可以<code>dL/dW</code>用表示。用数学式表示的话，如下所示</p>
<p><img src="/uploads/images/imageup-1558346149810.png" style="max-width:100%;"><br></p>
<p>下面用一个simpleNet的类来表示一个简单的一层神经网络。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="keyword"><span class="hljs-keyword">import</span></span> sys, os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword"><span class="hljs-keyword">as</span></span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="hljs-comment"># 求中心差分</span></span></span><br><span class="line"><span class="function"><span class="keyword"><span class="hljs-comment">def</span></span><span class="hljs-comment"> </span><span class="title"><span class="hljs-comment">num_gradient</span></span><span class="params"><span class="hljs-comment">(f, x)</span></span><span class="hljs-comment">:</span></span></span><br><span class="line"><span class="hljs-comment">    h = </span><span class="number"><span class="hljs-comment">1e-4</span></span><span class="hljs-comment"> </span><span class="comment"><span class="hljs-comment"># 0.0001</span></span></span><br><span class="line"><span class="hljs-comment">    grad = np.zeros_like(x)</span></span><br><span class="line"><span class="hljs-comment">    </span></span><br><span class="line"><span class="hljs-comment">    it = np.nditer(x, flags=[</span><span class="string"><span class="hljs-comment">multi_index</span></span><span class="hljs-comment">], op_flags=[</span><span class="string"><span class="hljs-comment">readwrite</span></span><span class="hljs-comment">])</span></span><br><span class="line"><span class="hljs-comment">    </span><span class="keyword"><span class="hljs-comment">while</span></span><span class="hljs-comment"> </span><span class="keyword"><span class="hljs-comment">not</span></span><span class="hljs-comment"> it.finished:</span></span><br><span class="line"><span class="hljs-comment">        idx = it.multi_index</span></span><br><span class="line"><span class="hljs-comment">        tmp_val = x[idx]</span></span><br><span class="line"><span class="hljs-comment">        x[idx] = float(tmp_val) + h</span></span><br><span class="line"><span class="hljs-comment">        fxh1 = f(x) </span><span class="comment"><span class="hljs-comment"># f(x+h)</span></span></span><br><span class="line"><span class="hljs-comment">        </span></span><br><span class="line"><span class="hljs-comment">        x[idx] = tmp_val - h </span></span><br><span class="line"><span class="hljs-comment">        fxh2 = f(x) </span><span class="comment"><span class="hljs-comment"># f(x-h)</span></span></span><br><span class="line"><span class="hljs-comment">        grad[idx] = (fxh1 - fxh2) / (</span><span class="number"><span class="hljs-comment">2</span></span><span class="hljs-comment">*h)</span></span><br><span class="line"><span class="hljs-comment">        </span></span><br><span class="line"><span class="hljs-comment">        x[idx] = tmp_val </span><span class="comment"><span class="hljs-comment"># 还原值</span></span></span><br><span class="line"><span class="hljs-comment">        it.iternext()   </span></span><br><span class="line"><span class="hljs-comment">        </span></span><br><span class="line"><span class="hljs-comment">    </span><span class="keyword"><span class="hljs-comment">return</span></span><span class="hljs-comment"> grad</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="hljs-comment"># 批处理交叉熵误差</span></span></span><br><span class="line"><span class="function"><span class="keyword"><span class="hljs-comment">def</span></span><span class="hljs-comment"> </span><span class="title"><span class="hljs-comment">cross_entropy_error</span></span><span class="params"><span class="hljs-comment">(y, t)</span></span><span class="hljs-comment">:</span></span></span><br><span class="line"><span class="hljs-comment">    </span><span class="keyword"><span class="hljs-comment">if</span></span><span class="hljs-comment"> y.ndim == </span><span class="number"><span class="hljs-comment">1</span></span><span class="hljs-comment">:</span></span><br><span class="line"><span class="hljs-comment">        t = t.reshape(</span><span class="number"><span class="hljs-comment">1</span></span><span class="hljs-comment">, t.size)</span></span><br><span class="line"><span class="hljs-comment">        y = y.reshape(</span><span class="number"><span class="hljs-comment">1</span></span><span class="hljs-comment">, y.size)</span></span><br><span class="line"><span class="hljs-comment">        </span></span><br><span class="line"><span class="hljs-comment">    </span><span class="comment"><span class="hljs-comment"># 监督数据是one-hot-vector的情况下，转换为正确解标签的索引</span></span></span><br><span class="line"><span class="hljs-comment">    </span><span class="keyword"><span class="hljs-comment">if</span></span><span class="hljs-comment"> t.size == y.size:</span></span><br><span class="line"><span class="hljs-comment">        t = t.argmax(axis=</span><span class="number"><span class="hljs-comment">1</span></span><span class="hljs-comment">)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">    batch_size = y.shape[</span><span class="number"><span class="hljs-comment">0</span></span><span class="hljs-comment">]</span></span><br><span class="line"><span class="hljs-comment">    </span><span class="keyword"><span class="hljs-comment">return</span></span><span class="hljs-comment"> -np.sum(np.log(y[np.arange(batch_size), t] + </span><span class="number"><span class="hljs-comment">1e-7</span></span><span class="hljs-comment">)) / batch_size</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="hljs-comment"># softmax激活函数</span></span></span><br><span class="line"><span class="function"><span class="keyword"><span class="hljs-comment">def</span></span><span class="hljs-comment"> </span><span class="title"><span class="hljs-comment">softmax</span></span><span class="params"><span class="hljs-comment">(a)</span></span><span class="hljs-comment">:</span></span></span><br><span class="line"><span class="hljs-comment">    c = np.max(a)</span></span><br><span class="line"><span class="hljs-comment">    </span><span class="comment"><span class="hljs-comment"># 减去最大值，简化运算</span></span></span><br><span class="line"><span class="hljs-comment">    exp_a = np.exp(a - c)</span></span><br><span class="line"><span class="hljs-comment">    sum_exp_a = np.sum(exp_a)</span></span><br><span class="line"><span class="hljs-comment">    y = exp_a / sum_exp_a</span></span><br><span class="line"><span class="hljs-comment">    </span><span class="keyword"><span class="hljs-comment">return</span></span><span class="hljs-comment"> y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="hljs-comment"># 一个简单的一层神经网络</span></span></span><br><span class="line"><span class="class"><span class="keyword"><span class="hljs-comment">class</span></span><span class="hljs-comment"> </span><span class="title"><span class="hljs-comment">simpleNet</span></span><span class="hljs-comment">:</span></span></span><br><span class="line"><span class="hljs-comment">    </span><span class="function"><span class="keyword"><span class="hljs-comment">def</span></span><span class="hljs-comment"> </span><span class="title"><span class="hljs-comment">__init__</span></span><span class="params"><span class="hljs-comment">(self)</span></span><span class="hljs-comment">:</span></span></span><br><span class="line"><span class="hljs-comment">        self.W = np.random.randn(</span><span class="number"><span class="hljs-comment">2</span></span><span class="hljs-comment">,</span><span class="number"><span class="hljs-comment">3</span></span><span class="hljs-comment">)   </span><span class="comment"><span class="hljs-comment"># 用高斯分布进行初始化</span></span></span><br><span class="line"><span class="hljs-comment">    </span><span class="function"><span class="keyword"><span class="hljs-comment">def</span></span><span class="hljs-comment"> </span><span class="title"><span class="hljs-comment">predict</span></span><span class="params"><span class="hljs-comment">(self, x)</span></span><span class="hljs-comment">:</span></span></span><br><span class="line"><span class="hljs-comment">        </span><span class="keyword"><span class="hljs-comment">return</span></span><span class="hljs-comment"> np.dot(x, self.W)</span></span><br><span class="line"><span class="hljs-comment">    </span><span class="function"><span class="keyword"><span class="hljs-comment">def</span></span><span class="hljs-comment"> </span><span class="title"><span class="hljs-comment">loss</span></span><span class="params"><span class="hljs-comment">(self, x, t)</span></span><span class="hljs-comment">:</span></span></span><br><span class="line"><span class="hljs-comment">        z = self.predict(x)</span></span><br><span class="line"><span class="hljs-comment">        y = softmax(z)</span></span><br><span class="line"><span class="hljs-comment">        loss = cross_entropy_error(y, t)</span></span><br><span class="line"><span class="hljs-comment">        </span><span class="keyword"><span class="hljs-comment">return</span></span><span class="hljs-comment"> loss</span></span><br><span class="line"></span><br><span class="line"><span class="keyword"><span class="hljs-comment">if</span></span><span class="hljs-comment"> __name__ == </span><span class="string"><span class="hljs-comment">"__main__"</span></span><span class="hljs-comment">:</span></span><br><span class="line"><span class="hljs-comment">    net = simpleNet()</span></span><br><span class="line"><span class="hljs-comment">    x =np.array([</span><span class="number"><span class="hljs-comment">0.6</span></span><span class="hljs-comment">, </span><span class="number"><span class="hljs-comment">0.9</span></span><span class="hljs-comment">])</span></span><br><span class="line"><span class="hljs-comment">    t = np.array([</span><span class="number"><span class="hljs-comment">0</span></span><span class="hljs-comment">, </span><span class="number"><span class="hljs-comment">0</span></span><span class="hljs-comment">, </span><span class="number"><span class="hljs-comment">1</span></span><span class="hljs-comment">])</span></span><br><span class="line"><span class="hljs-comment">    </span><span class="function"><span class="keyword"><span class="hljs-comment">def</span></span><span class="hljs-comment"> </span><span class="title"><span class="hljs-comment">f</span></span><span class="params"><span class="hljs-comment">(w)</span></span><span class="hljs-comment">:</span></span></span><br><span class="line"><span class="hljs-comment">        </span><span class="keyword"><span class="hljs-comment">return</span></span><span class="hljs-comment"> net.loss(x, t)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">    dw = num_gradient(f, net.W)</span></span><br><span class="line"><span class="hljs-comment">    print(dw)</span></span><br></pre></td></tr></tbody></table></figure>
<p>输出如下</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs json"><span class="line">[[ <span class="hljs-number">0.49075392</span>  <span class="hljs-number">0.06515262</span> <span class="hljs-number">-0.55590654</span>]</span><br><span class="line"> [ <span class="hljs-number">0.73613088</span>  <span class="hljs-number">0.09772893</span> <span class="hljs-number">-0.83385981</span>]]</span><br></pre></td></tr></tbody></table></figure>
<p>这个输出的梯度矩阵的各个元素是loss函数对各个权值的求导，比如该矩阵的(1,3)和(2,3)元素值为负数，说明损失函数loss在这两个点正方向递降，权值<strong>w</strong><sub>13</sub>和<strong>w</strong><sub>23</sub>应该往正方向更新（比如一元递减函数 y=-x，x越大y值越小）</p>
<p>相同的，权值<strong>w</strong><sub>11</sub>，<strong>w</strong><sub>12</sub>，<strong>w</strong><sub>21</sub>和<strong>w</strong><sub>22</sub>就应该往负方向更新（权值减少）</p>
<h3 id="学习算法的实现"><a class="header-anchor" href="#学习算法的实现">¶</a>学习算法的实现</h3>
<p>前面的算法涉及函数颇多，现在整理一下整个学习算法的过程。</p>
<h5 id="概念前提"><a class="header-anchor" href="#概念前提">¶</a>概念前提</h5>
<p>神经网络的学习按照下面4个步骤进行。这个方法通过梯度下降法更新参数，不过因为这里使用的数据是随机选择的<code>minibatch</code>数据，所以又称为随机梯度下降法</p>
<p><strong>神经网络存在合适的权重和偏置，调整权重和偏置以便拟合训练数据的过程称为学习</strong>。神经网络的学习分成下面4个步骤。</p>
<h5 id="步骤1-mini-batch"><a class="header-anchor" href="#步骤1-mini-batch">¶</a>步骤1（mini-batch）</h5>
<p>从训练数据中随机选出一部分数据，这部分数据称为mini-batch。我们的目标是减小mini-batch的损失函数的值。</p>
<h5 id="步骤2-计算梯度"><a class="header-anchor" href="#步骤2-计算梯度">¶</a>步骤2（计算梯度）</h5>
<p>为了减小mini-batch的损失函数的值，需要求出各个权重参数的梯度。梯度表示损失函数的值减小最多的方向。</p>
<h5 id="步骤3-更新参数"><a class="header-anchor" href="#步骤3-更新参数">¶</a>步骤3（更新参数）</h5>
<p>将权重参数沿梯度方向进行微小更新。</p>
<h5 id="步骤4-重复"><a class="header-anchor" href="#步骤4-重复">¶</a>步骤4（重复）</h5>
<p>重复步骤1、步骤2、步骤3。</p>
<p>深度学习的很多框架中，随机梯度下降法一般由一个名为SGD的函数来实现。SGD来源于随机梯度下降法的英文名称的首字母。“随机”指的是“随机选择的”的意思，因此，随机梯度下降法是“对随机选择的数据进行的梯度下降法”。</p>
<h3 id="2层神经网络的类"><a class="header-anchor" href="#2层神经网络的类">¶</a>2层神经网络的类</h3>
<p>在此之前，先用一个思维导图理清要做什么</p>
<p><img src="/uploads/images/imageup-1558346158687.png" style="max-width:100%;"><br></p>
<p>python代码如下</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="keyword"><span class="hljs-keyword">import</span></span> sys, os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword"><span class="hljs-keyword">as</span></span> np</span><br><span class="line"><span class="keyword">from</span> functions <span class="keyword"><span class="hljs-keyword">import</span></span> *</span><br><span class="line"><span class="keyword"><span class="hljs-keyword">from</span></span> gradient_descent <span class="keyword"><span class="hljs-keyword">import</span></span> num_gradient</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwolayerNet</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span><span class="hljs-function"> </span><span class="title"><span class="hljs-function"><span class="hljs-title">__init__</span></span></span><span class="params"><span class="hljs-function"><span class="hljs-params">(self, in_size, hide_size, out_size)</span></span></span><span class="hljs-function">:</span></span></span><br><span class="line">        self.par = {}</span><br><span class="line">        self.par[<span class="string">w1</span>] = np.random.randn(in_size, hide_size)</span><br><span class="line">        self.par[<span class="string">w2</span>] = np.random.randn(hide_size,out_size)</span><br><span class="line">        self.par[<span class="string">b1</span>] = np.zeros(hide_size)</span><br><span class="line">        self.par[<span class="string">b2</span>] = np.zeros(out_size)</span><br><span class="line">    <span class="comment"><span class="hljs-comment"># 神经网络的推理</span></span></span><br><span class="line"><span class="hljs-comment">    </span><span class="function"><span class="keyword"><span class="hljs-comment">def</span></span><span class="hljs-comment"> </span><span class="title"><span class="hljs-comment">predict</span></span><span class="params"><span class="hljs-comment">(self, x)</span></span><span class="hljs-comment">:</span></span></span><br><span class="line"><span class="hljs-comment">        z1 = sigmoid(np.dot(x, self.par[</span><span class="string"><span class="hljs-comment">w1</span></span><span class="hljs-comment">]) + self.par[</span><span class="string"><span class="hljs-comment">b1</span></span><span class="hljs-comment">])</span></span><br><span class="line"><span class="hljs-comment">        z2 = softmax(np.dot(z1, self.par[</span><span class="string"><span class="hljs-comment">w2</span></span><span class="hljs-comment">]) + self.par[</span><span class="string"><span class="hljs-comment">b2</span></span><span class="hljs-comment">])</span></span><br><span class="line"><span class="hljs-comment">        </span><span class="keyword"><span class="hljs-comment">return</span></span><span class="hljs-comment"> z2</span></span><br><span class="line"><span class="hljs-comment">    </span><span class="comment"><span class="hljs-comment"># 损失函数</span></span></span><br><span class="line"><span class="hljs-comment">    </span><span class="function"><span class="keyword"><span class="hljs-comment">def</span></span><span class="hljs-comment"> </span><span class="title"><span class="hljs-comment">loss</span></span><span class="params"><span class="hljs-comment">(self, x, t)</span></span><span class="hljs-comment">:</span></span></span><br><span class="line"><span class="hljs-comment">        y = self.predict(x)</span></span><br><span class="line"><span class="hljs-comment">        </span><span class="keyword"><span class="hljs-comment">return</span></span><span class="hljs-comment"> cross_entropy_error(y, t)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">    </span><span class="function"><span class="keyword"><span class="hljs-comment">def</span></span><span class="hljs-comment"> </span><span class="title"><span class="hljs-comment">accuracy</span></span><span class="params"><span class="hljs-comment">(self,x, t)</span></span><span class="hljs-comment">:</span></span></span><br><span class="line"><span class="hljs-comment">        </span><span class="keyword"><span class="hljs-comment">pass</span></span></span><br><span class="line"><span class="hljs-comment">    </span><span class="comment"><span class="hljs-comment"># 计算梯度</span></span></span><br><span class="line"><span class="hljs-comment">    </span><span class="function"><span class="keyword"><span class="hljs-comment">def</span></span><span class="hljs-comment"> </span><span class="title"><span class="hljs-comment">num_gradient</span></span><span class="params"><span class="hljs-comment">(self, x, t)</span></span><span class="hljs-comment">:</span></span></span><br><span class="line"><span class="hljs-comment">        loss_W = </span><span class="keyword"><span class="hljs-comment">lambda</span></span><span class="hljs-comment"> W: self.loss(x, t)</span></span><br><span class="line"><span class="hljs-comment">        grads = {}</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">        grads[</span><span class="string"><span class="hljs-comment">w1</span></span><span class="hljs-comment">] = num_gradient(loss_W, self.par[</span><span class="string"><span class="hljs-comment">w1</span></span><span class="hljs-comment">])</span></span><br><span class="line"><span class="hljs-comment">        grads[</span><span class="string"><span class="hljs-comment">b1</span></span><span class="hljs-comment">] = num_gradient(loss_W, self.par[</span><span class="string"><span class="hljs-comment">b1</span></span><span class="hljs-comment">])</span></span><br><span class="line"><span class="hljs-comment">        grads[</span><span class="string"><span class="hljs-comment">w2</span></span><span class="hljs-comment">] = num_gradient(loss_W, self.par[</span><span class="string"><span class="hljs-comment">w2</span></span><span class="hljs-comment">])</span></span><br><span class="line"><span class="hljs-comment">        grads[</span><span class="string"><span class="hljs-comment">b2</span></span><span class="hljs-comment">] = num_gradient(loss_W, self.par[</span><span class="string"><span class="hljs-comment">b2</span></span><span class="hljs-comment">])</span></span><br><span class="line"><span class="hljs-comment">        </span><span class="keyword"><span class="hljs-comment">return</span></span><span class="hljs-comment"> grads</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="使用mini-batch实现梯度法"><a class="header-anchor" href="#使用mini-batch实现梯度法">¶</a>使用mini-batch实现梯度法</h3>
<p>就是从训练数据中随机选择一部分数据（称为mini-batch），再以这些mini-batch为对象，使用梯度法更新参数的过程。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs shell"><span class="line"><span class="comment"><span class="hljs-meta">#</span><span class="bash"> coding: utf-8</span></span></span><br><span class="line"><span class="keyword"><span class="bash">import</span></span><span class="bash"> sys, os</span></span><br><span class="line"><span class="bash">sys.path.append(os.pardir)  </span><span class="comment"><span class="bash"><span class="hljs-comment"># 为了导入父目录的文件而进行的设定</span></span></span></span><br><span class="line"><span class="keyword"><span class="bash"><span class="hljs-comment">import</span></span></span><span class="bash"><span class="hljs-comment"> numpy </span></span><span class="keyword"><span class="bash"><span class="hljs-comment">as</span></span></span><span class="bash"><span class="hljs-comment"> np</span></span></span><br><span class="line"><span class="keyword"><span class="bash"><span class="hljs-comment">import</span></span></span><span class="bash"><span class="hljs-comment"> matplotlib.pyplot </span></span><span class="keyword"><span class="bash"><span class="hljs-comment">as</span></span></span><span class="bash"><span class="hljs-comment"> plt</span></span></span><br><span class="line"><span class="keyword"><span class="bash"><span class="hljs-comment">from</span></span></span><span class="bash"><span class="hljs-comment"> dataset.mnist </span></span><span class="keyword"><span class="bash"><span class="hljs-comment">import</span></span></span><span class="bash"><span class="hljs-comment"> load_mnist</span></span></span><br><span class="line"><span class="keyword"><span class="bash"><span class="hljs-comment">from</span></span></span><span class="bash"><span class="hljs-comment"> two_layer_net </span></span><span class="keyword"><span class="bash"><span class="hljs-comment">import</span></span></span><span class="bash"><span class="hljs-comment"> TwoLayerNet</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="bash"><span class="hljs-comment"># 读入数据</span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">(x_train, t_train), (x_test, t_test) = load_mnist(normalize=</span></span><span class="keyword"><span class="bash"><span class="hljs-comment">True</span></span></span><span class="bash"><span class="hljs-comment">, one_hot_label=</span></span><span class="keyword"><span class="bash"><span class="hljs-comment">True</span></span></span><span class="bash"><span class="hljs-comment">)</span></span></span><br><span class="line"></span><br><span class="line"><span class="bash"><span class="hljs-comment">network = TwoLayerNet(input_size=</span></span><span class="number"><span class="bash"><span class="hljs-comment">784</span></span></span><span class="bash"><span class="hljs-comment">, hidden_size=</span></span><span class="number"><span class="bash"><span class="hljs-comment">50</span></span></span><span class="bash"><span class="hljs-comment">, output_size=</span></span><span class="number"><span class="bash"><span class="hljs-comment">10</span></span></span><span class="bash"><span class="hljs-comment">)</span></span></span><br><span class="line"></span><br><span class="line"><span class="bash"><span class="hljs-comment">iters_num = </span></span><span class="number"><span class="bash"><span class="hljs-comment">5000</span></span></span><span class="bash"><span class="hljs-comment">  </span></span><span class="comment"><span class="bash"><span class="hljs-comment"># 适当设定循环的次数</span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">train_size = x_train.shape[</span></span><span class="number"><span class="bash"><span class="hljs-comment">0</span></span></span><span class="bash"><span class="hljs-comment">]</span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">batch_size = </span></span><span class="number"><span class="bash"><span class="hljs-comment">100</span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">learning_rate = </span></span><span class="number"><span class="bash"><span class="hljs-comment">0.1</span></span></span></span><br><span class="line"></span><br><span class="line"><span class="bash"><span class="hljs-comment">train_loss_list = []</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword"><span class="bash"><span class="hljs-comment">for</span></span></span><span class="bash"><span class="hljs-comment"> i </span></span><span class="keyword"><span class="bash"><span class="hljs-comment">in</span></span></span><span class="bash"><span class="hljs-comment"> range(iters_num):</span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    batch_mask = np.random.choice(train_size, batch_size)</span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    x_batch = x_train[batch_mask]</span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    t_batch = t_train[batch_mask]</span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    </span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    </span></span><span class="comment"><span class="bash"><span class="hljs-comment"># 计算梯度</span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    </span></span><span class="comment"><span class="bash"><span class="hljs-comment">#grad = network.numerical_gradient(x_batch, t_batch)</span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    grad = network.gradient(x_batch, t_batch)</span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    </span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    </span></span><span class="comment"><span class="bash"><span class="hljs-comment"># 更新参数</span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    </span></span><span class="keyword"><span class="bash"><span class="hljs-comment">for</span></span></span><span class="bash"><span class="hljs-comment"> key </span></span><span class="keyword"><span class="bash"><span class="hljs-comment">in</span></span></span><span class="bash"><span class="hljs-comment"> (</span></span><span class="string"><span class="bash"><span class="hljs-comment">W1</span></span></span><span class="bash"><span class="hljs-comment">, </span></span><span class="string"><span class="bash"><span class="hljs-comment">b1</span></span></span><span class="bash"><span class="hljs-comment">, </span></span><span class="string"><span class="bash"><span class="hljs-comment">W2</span></span></span><span class="bash"><span class="hljs-comment">, </span></span><span class="string"><span class="bash"><span class="hljs-comment">b2</span></span></span><span class="bash"><span class="hljs-comment">):</span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">        network.params[key] -= learning_rate * grad[key]</span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    </span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    loss = network.loss(x_batch, t_batch)</span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">    train_loss_list.append(loss)</span></span></span><br><span class="line"></span><br><span class="line"><span class="bash"><span class="hljs-comment">y = train_loss_list</span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">x = np.arange(</span></span><span class="number"><span class="bash"><span class="hljs-comment">0</span></span></span><span class="bash"><span class="hljs-comment">, len(y))</span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">plt.plot(x, y)</span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment">plt.show()</span></span></span><br></pre></td></tr></tbody></table></figure>
<p>损失函数下降图像如下</p>
<p><img src="/uploads/images/imageup-1558346170387.png" style="max-width:100%;"><br></p>
<h3 id="基于测试数据的评价"><a class="header-anchor" href="#基于测试数据的评价">¶</a>基于测试数据的评价</h3>
<p>上面使用<code>mini-batch</code>方法对神经网络进行学习使损失函数的值逐渐减小。不过这个损失函数的值，严格地讲是“对训练数据的某个<code>mini-batch</code>的损失函数”的值。训练数据的损失函数值减小，虽说是神经网络的学习正常进行的一个信号，但光看这个结果还不能说明该神经络在其他数据集上也一定能有同等程度的表现。</p>
<p><strong>神经网络的学习中，必须确认是否能够正确识别训练数据以外的其他数据，即确认是否会发生过拟合</strong></p>
<p>神经网络学习的<strong>最初目标是掌握泛化能力</strong>，因此，要评价神经网络的泛化能力，就必须使用不包含在训练数据中的数据。下面的代码在进行学习的过程中，会定期地对训练数据和测试数据记录识别精度。这里，每经过一个<code>epoch</code>，都会记录下训练数据和测试数据的识别精度。</p>
<blockquote>
<p><code>epoch</code>是一个单位。一个<code>epoch</code>表示学习中所有训练数据均被使用过一次时的更新次数。比如，对于10000笔训练数据，用大小为100笔数据的<code>mini-batch</code>进行学习时，重复随机梯度下降法100次，所有的训练数据就都被“看过”了A。此时，100次就是一个 <code>epoch</code>。</p>
</blockquote>
<p>通过观察测试数据与训练数据的精确度来判断学习过程中是否存在过拟合，python代码如下（被省略的代码见上一段）。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs cpp"><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 参数配置的代码</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">iters_num = <span class="number"><span class="hljs-number">10000</span></span>  <span class="comment"># 适当设定循环的次数</span></span><br><span class="line">train_size = x_train.shape[<span class="number"><span class="hljs-number">0</span></span>]</span><br><span class="line">batch_size = <span class="number"><span class="hljs-number">100</span></span></span><br><span class="line"><span class="hljs-number">l</span>earning_rate = <span class="number"><span class="hljs-number">0.05</span></span></span><br><span class="line"></span><br><span class="line">train_loss_list = []</span><br><span class="line">train_acc_list = []</span><br><span class="line">test_acc_list = []</span><br><span class="line"></span><br><span class="line">iter_per_epoch = max(train_size / batch_size, <span class="number"><span class="hljs-number">1</span></span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword"><span class="hljs-keyword">for</span></span> i <span class="keyword">in</span> range(iters_num):</span><br><span class="line">    <span class="comment"># </span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># 学习过程的代码</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword"><span class="hljs-keyword">if</span></span> i % iter_per_epoch == <span class="number"><span class="hljs-number">0</span></span>:</span><br><span class="line">        train_acc = network.accuracy(x_train, t_train)</span><br><span class="line">        test_acc = network.accuracy(x_test, t_test)</span><br><span class="line">        train_acc_list.append(train_acc)</span><br><span class="line">        test_acc_list.append(test_acc)</span><br><span class="line">        print(<span class="string"><span class="hljs-string">"train acc, test acc | "</span></span> + str(train_acc) + <span class="string"><span class="hljs-string">", "</span></span> + str(test_acc))</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 绘制图形</span></span><br><span class="line">markers = {<span class="string">train</span>: <span class="string">o</span>, <span class="string">test</span>: <span class="string">s</span>}</span><br><span class="line">x = np.arange(len(train_acc_list))</span><br><span class="line">plt.plot(x, train_acc_list, label=<span class="string">train acc</span>)</span><br><span class="line">plt.plot(x, test_acc_list, label=<span class="string">test acc</span>, linestyle=<span class="string">--</span>)</span><br><span class="line">plt.xlabel(<span class="string"><span class="hljs-string">"epochs"</span></span>)</span><br><span class="line">plt.ylabel(<span class="string"><span class="hljs-string">"accuracy"</span></span>)</span><br><span class="line">plt.ylim(<span class="number"><span class="hljs-number">0</span></span>, <span class="number"><span class="hljs-number">1.0</span></span>)</span><br><span class="line">plt.legend(loc=<span class="string">lower right</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p>输出如下</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs bash"><span class="line">train acc, <span class="hljs-built_in">test</span> acc | 0.11236666666666667, 0.1135</span><br><span class="line">train acc, <span class="hljs-built_in">test</span> acc | 0.51685, 0.5168</span><br><span class="line">train acc, <span class="hljs-built_in">test</span> acc | 0.7925, 0.7995</span><br><span class="line">train acc, <span class="hljs-built_in">test</span> acc | 0.8524166666666667, 0.8574</span><br><span class="line">train acc, <span class="hljs-built_in">test</span> acc | 0.8783, 0.8831</span><br><span class="line">train acc, <span class="hljs-built_in">test</span> acc | 0.8917333333333334, 0.8956</span><br><span class="line">train acc, <span class="hljs-built_in">test</span> acc | 0.8984833333333333, 0.9003</span><br><span class="line">train acc, <span class="hljs-built_in">test</span> acc | 0.9038333333333334, 0.9067</span><br><span class="line">train acc, <span class="hljs-built_in">test</span> acc | 0.9076833333333333, 0.9109</span><br><span class="line">train acc, <span class="hljs-built_in">test</span> acc | 0.9114333333333333, 0.9136</span><br><span class="line">train acc, <span class="hljs-built_in">test</span> acc | 0.9134166666666667, 0.9175</span><br><span class="line">train acc, <span class="hljs-built_in">test</span> acc | 0.9171666666666667, 0.9184</span><br><span class="line">train acc, <span class="hljs-built_in">test</span> acc | 0.9185333333333333, 0.921</span><br><span class="line">train acc, <span class="hljs-built_in">test</span> acc | 0.9209666666666667, 0.9226</span><br><span class="line">train acc, <span class="hljs-built_in">test</span> acc | 0.9226666666666666, 0.924</span><br><span class="line">train acc, <span class="hljs-built_in">test</span> acc | 0.9254833333333333, 0.9274</span><br><span class="line">train acc, <span class="hljs-built_in">test</span> acc | 0.9274, 0.9278</span><br></pre></td></tr></tbody></table></figure>
<p>可以看出，每次测试数据的精确度都很接近训练数据的精确度。</p>
<p>结果用图表示，可以看出这个学习过程没有产生过拟合</p>
<p><img src="/uploads/images/imageup-1558346181842.png" style="max-width:100%;"><br></p>
<h3 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h3>
<p>神经网络的学习过程：首先，为了能顺利进行神经网络的学习，导入了<strong>损失函数</strong>这个指标。以这个损失函数为基准，<strong>找出使它的值达到最小的权重参数</strong>，就是神经网络学习的目标。为了找到尽可能小的损失函数值，引入了<strong>使用函数斜率的梯度法</strong>。</p>
<ul>
<li>机器学习中使用的数据集分为<strong>训练数据</strong>和<strong>测试数据</strong>。</li>
<li>神经网络用训练数据进行学习，<strong>并用测试数据评价学习到的模型的泛化能力</strong>。</li>
<li>神经网络的学习<strong>以损失函数为指标</strong>，更新权重参数，以使损失函数的值减小。</li>
<li>利用某个给定的微小值的差分求导数的过程，称为数值微分。</li>
<li>利用数值微分，可以<strong>计算权重参数的梯度</strong>。</li>
<li>数值微分虽然费时间，但是实现起来很简单。稍微复杂一些的误差反向传播法可以高速地计算梯度。</li>
</ul>
<hr>
<p><strong>注</strong>:本文为<strong>斋藤康毅</strong>的《<strong>深度学习入门：基于Python的理论与实现</strong>》片段摘抄与学习笔记</p>
</div></div><p><br></p>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/21418b73.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>深度学习入门——神经网络学习</title>
                <link>https://me.idealli.com/post/8a7c7277.html</link>
                <guid>https://me.idealli.com/post/8a7c7277.html</guid>
                <pubDate>2019-5-20</pubDate>
                <description>
                这里所说的“学习”是指从训练数据中自动获取最优权重参数的过程。为了使神经网络能进行学习，将导入损失函数这一指标。而学习的目的就是以该损失函数为基准，找出能使它的值达到最小的权重参数。为了找出尽可能小的
                </description>
                <content:encoded>
                <![CDATA[<div><div><div><div><div class="post-body" itemprop="articleBody">
<blockquote>
<p>这里所说的“学习”是指从训练数据中自动获取最优权重参数的过程。为了使神经网络能进行学习，将导入损失函数这一指标。<strong>而学习的目的就是以该损失函数为基准，找出能使它的值达到最小的权重参数。为了找出尽可能小的损失函数的值</strong>，将使用函数倾斜的梯度法</p>
</blockquote>
<p>对于线性可分问题，感知机是可以利用数据自动学习的。 根据“<strong>感知机收敛定理</strong>”，通过有限次数的学习，线性可分问题是可 解的。<strong>但是，非线性可分问题则无法通过（自动）学习来解决</strong>。</p>
<a id="more"></a>
<h3 id="机器学习和深度学习"><a class="header-anchor" href="#机器学习和深度学习">¶</a>机器学习和深度学习</h3>
<p>机器学习先从数据集中提取特征量，再用机器学习技术学习这些特征量模式，这里所说的“<strong>特征量</strong>”是指可以 从输入数据（输入图像）中准确地提取<strong>本质数据</strong>（重要的数据）的转换器。图像的特征量通常表示为向量的形式。在计算机视觉领域，<strong>常用的特征量包括SIFT、SURF和HOG等</strong>。使用这些特征量将图像数据转换为向量，然后对转换后的向量使用机器学习中的SVM、KNN等分类器进行学习。</p>
<p>但是 需要注意的是，<strong>将图像转换为向量时使用的特征量仍是由人设计的</strong>。对于不同的问题，必须使用合适的特征量（必须设计专门的特征量）。比如，为了区分狗的脸部，人们需要考虑与用于识别5的特征量不同的其他特征量。也就是说，<strong>即使使用特征量和机器学习的方法，也需要针对 不同的问题人工考虑合适的特征量。</strong></p>
<p>神经网络直接学习图像本身。在利用特征量和机器学习的方法中，特征量仍是由人工设计的，而在神经网络中，<strong>连图像中包含的重要特征量也都是由机器来学习的。</strong></p>
<p><img src="/uploads/images/imageup-1558346330238.png" style="max-width:100%;"><br></p>
<h3 id="训练数据集和测试数据集"><a class="header-anchor" href="#训练数据集和测试数据集">¶</a>训练数据集和测试数据集</h3>
<p>机器学习中，一般将数据分为训练数据和测试数据两部分来进行学习和 实验等。首先，<strong>使用训练数据进行学习，寻找最优的参数</strong>；然后，使用测试 数据评价训练得到的模型的实际能力。</p>
<p>为什么需要将数据分为训练数据和测试数据呢？</p>
<p>因为机器学习追求的是模型的<strong>泛化能力</strong>。<strong>为了正确评价模型的泛化能力</strong>，就必须划分训练数据和测试数据。**另外，训练数据也可以称为监督数据。 **</p>
<h3 id="什么是泛化能力？"><a class="header-anchor" href="#什么是泛化能力？">¶</a>什么是泛化能力？</h3>
<blockquote>
<p><strong>泛化能力是指处理未被观察过的数据（不包含在训练数据中的数据）的能力。获得泛化能力是机器学习的最终目标。</strong></p>
</blockquote>
<p>比如，在识别手写数字的问题 中，泛化能力可能会被用在自动读取明信片的邮政编码的系统上。此时，手 写数字识别就必须具备较高的识别“某个人”写的字的能力。注意这里不是“特定的某个人写的特定的文字”，而是“<strong>任意一个人写的任意文字</strong>”。<strong>如果系统 只能正确识别已有的训练数据，那有可能是只学习到了训练数据中的个人的 习惯写法。</strong></p>
<h3 id="过拟合"><a class="header-anchor" href="#过拟合">¶</a>过拟合</h3>
<blockquote>
<p><strong>仅仅用一个数据集去学习和评价参数，是无法进行正确评价的。 这样会导致可以顺利地处理某个数据集，但无法处理其他数据集的情况。只对某个数据集过度拟合的状态称为过拟合（over fitting）。避免 过拟合也是机器学习的一个重要课题。</strong></p>
</blockquote>
<h3 id="损失函数"><a class="header-anchor" href="#损失函数">¶</a>损失函数</h3>
<p><strong>例子</strong>：生活中对于幸福感的衡量，一般的人可能会给出诸 如“还可以吧”或者“不是那么幸福”等笼统的回答，如果有人说幸福感为9.8，可能就无法理解了。因为他用一个<strong>数值指标</strong>来 评判自己的幸福程度。</p>
<p>实际上神经网络的学习也在做同样的事情。<strong>神经网络的学习通过某个指标表示现在的状态</strong>。然后，以这个指标为基准，寻找最优权重参数。和刚刚那位以幸福指数为指引寻找“最优人生”的人一样，神经网络以某个指标为线索寻找最优权重参数。神经网络的学习中所用的指标称为<strong>损失函数（lossfunction）</strong>。这个损失函数可以使用任意函数， 但一般用<strong>均方误差</strong>和<strong>交叉熵误差</strong>等。</p>
<h3 id="均方误差"><a class="header-anchor" href="#均方误差">¶</a>均方误差</h3>
<p><img src="/uploads/images/imageup-1558346335930.png" style="max-width:100%;"><br></p>
<p>y数组表示该数字为0~9的可能性，t为监督数据，将正确解标签设为1，其他均设为0。这里，标签“2”为1， 表示正确解是“2”。将正确解标签表示为1，其他标签表示为0的表示方法称one-hot表示</p>
<p>用python计算上述均方误差</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span></span></span></span></span><span class="hljs-function"><span class="hljs-function"><span class="hljs-function"> </span></span></span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title"><span class="hljs-function"><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">mean_squared_error</span></span></span></span></span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(y, t)</span></span></span></span></span></span></span><span class="hljs-function"><span class="hljs-function"><span class="hljs-function">:</span></span></span></span> </span><br><span class="line">    <span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-keyword">return</span></span></span></span> <span class="hljs-number"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number">0.5</span></span></span></span> * np.sum((y-t)**<span class="hljs-number"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number">2</span></span></span></span>)</span><br></pre></td></tr></tbody></table></figure>
<p>下面使用两组测试用例，可以看出第二组的均方误差比较大</p><p><img src="/uploads/images/imageup-1558349927117.png" style="max-width:100%;"><br></p><p><img src="/uploads/images/imageup-1558349931201.png" style="max-width:100%;"><br></p>
<p><img src="/uploads/images/imageup-1558346340680.png" style="max-width:100%;"><br></p>
<h3 id="交叉熵误差"><a class="header-anchor" href="#交叉熵误差">¶</a>交叉熵误差</h3>
<p>交叉熵误差也经常被用来做损失函数，它的方程如下</p>
<p><img src="/uploads/images/imageup-1558349947890.png" style="max-width:100%;"><br></p><p><img src="/uploads/images/imageup-1558349952645.png" style="max-width:100%;"><br></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span></span></span></span></span><span class="hljs-function"><span class="hljs-function"><span class="hljs-function"> </span></span></span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title"><span class="hljs-function"><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">cross_entropy_error</span></span></span></span></span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(y, t)</span></span></span></span></span></span></span><span class="hljs-function"><span class="hljs-function"><span class="hljs-function">:</span></span></span></span></span><br><span class="line">    mini= <span class="hljs-number"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number">1e-7</span></span></span></span></span><br><span class="line">    <span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-keyword">return</span></span></span></span> -np.sum(t * np.log(y + mini))</span><br></pre></td></tr></tbody></table></figure>
<p>这里的 <code>log（）</code>函数里面加了个极小值 <code>mini</code> 是为了避免出现 <code>log(0)</code> 影响后续计算</p>
<p><img src="/uploads/images/imageup-1558349957947.png" style="max-width:100%;"><br></p>
<h3 id="mini-batch-学习"><a class="header-anchor" href="#mini-batch-学习">¶</a>Mini-batch 学习</h3>
<blockquote>
<p>机器学习使用训练数据集进行学习，就是针对训练数据计算损失函数，找出该值尽可能小的参数。而前面的损失函数考虑的都是单个数据，但是实际项目中的训练数据集可能上万或者上千万，这时就要求所有训练数据的损失函数的总和。</p>
</blockquote>
<p>比如交叉熵的方程就要改写为</p>
<p><br></p>
<p>但是，如果以全部数据为对象 求损失函数的和，则计算过程需要花费较长的时间。再者，如果遇到大数据， 数据量会有几百万、几千万之多，这种情况下以全部数据为对象计算损失函 数是不现实的。</p>
<p><strong>解决方法</strong>：从全部数据中选出一批数据（称为mini-batch，<strong>小批量</strong>）然后对每个mini-batch进行学习。这种学习方式称为 m<strong>ini-batch学习</strong></p>
<p>随机抽取n笔数据的方法——使用<code>NumPy</code>的 <code>np.random.choice()</code>函数<br>
使用<code>np.random.choice()</code>可以从指定的数字中随机选择想要的数字。比如， <code>np.random.choice(60000, 10)</code>会从0到59999之间随机选择10个数字</p>
<p><img src="/uploads/images/imageup-1558350099424.png" style="max-width:100%;"><br></p>
<p>那么从训练数据集中随机选取10个数据，可以写为</p>
<p><img src="https://me.idealli.com/uploads/images/imageup-1558350055726.png"><br></p><p>上面可以看出，<code>numpy</code>数组可以使用另一个“下标数组”将其相应位置元素提取出来作为一个新数组<code>x_batch</code> =<code>x_train[batch_mask]</code></p>
<p>使用<code>mini-batch</code>学习计算出来值的并不等于整体的输出值，但是可以作为近似值来作为参考</p>
<p>有点像迭代</p>
<h3 id="mini-batch版交叉熵误差的实现"><a class="header-anchor" href="#mini-batch版交叉熵误差的实现">¶</a>mini-batch版交叉熵误差的实现</h3>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-keyword">import</span></span></span></span> numpy <span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-keyword">as</span></span></span></span> np</span><br><span class="line">def cross_entropy_error(y, t):</span><br><span class="line">    <span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-keyword">if</span></span></span></span> y.ndim == <span class="hljs-number"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number">1</span></span></span></span>:</span><br><span class="line">    t = t.reshape(<span class="hljs-number"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number">1</span></span></span></span>, t.size)</span><br><span class="line">    y = y.reshape(<span class="hljs-number"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number">1</span></span></span></span>, y.size)</span><br><span class="line">    batch_size = y.shape[<span class="hljs-number"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number">0</span></span></span></span>]</span><br><span class="line">    <span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-keyword">return</span></span></span></span> -np.sum(t * np.log(y + <span class="hljs-number"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number">1e-7</span></span></span></span>)) / batch_size</span><br></pre></td></tr></tbody></table></figure>
<p>如果输入维度是一维的话需要改变形状，当输入为<code>mini-batch</code>时，用除于<code>batch</code>的个数进行正规化，计算单个数据的平均交叉熵。</p>
<p>如果监督数据时标签形式（非<code>one-hot</code>表示，而是像“2”“7”这样的 标签）时，交叉熵误差可通过如下代码实现。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="function"><span class="keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span></span></span></span></span></span></span><span class="hljs-function"><span class="hljs-function"><span class="hljs-function"><span class="hljs-function"> </span></span></span></span><span class="title"><span class="hljs-function"><span class="hljs-title"><span class="hljs-function"><span class="hljs-title"><span class="hljs-function"><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">cross_entropy_error</span></span></span></span></span></span></span></span></span><span class="params"><span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(y, t)</span></span></span></span></span></span></span></span></span><span class="hljs-function"><span class="hljs-function"><span class="hljs-function"><span class="hljs-function">:</span></span></span></span></span> </span><br><span class="line">    <span class="keyword"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-keyword">if</span></span></span></span></span> y.ndim == <span class="number"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number">1</span></span></span></span></span>:</span><br><span class="line">         t = t.reshape(<span class="number"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number">1</span></span></span></span></span>, t.size)</span><br><span class="line">         y = y.reshape(<span class="number"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number">1</span></span></span></span></span>, y.size)</span><br><span class="line">     batch_size = y.shape[<span class="number"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number">0</span></span></span></span></span>] </span><br><span class="line">     <span class="keyword"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-keyword">return</span></span></span></span></span> -np.sum(np.log(y[np.arange(batch_size), t] + <span class="number"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number">1e-7</span></span></span></span></span>)) / batch_size</span><br></pre></td></tr></tbody></table></figure>
<p><code>np.arange(batch_size)</code> 会生成一个长度为<code>batch_size</code>的内容为数字0~batch-size的数组，<br>
所以<code>y[ np.arange(batch_size), t ]</code>是数组<code>y[0,t[0]]</code>，<code>y[1,t[1]]</code>，<code>y[2,t[2]]</code>. . .而 y 是个<code>batch_size</code>维数组，<code>y[k,t[k]]</code> 对应着输出层的第k个神经元的正确值标签的概率</p>
<p>比如有输出层的 <code>y[5]</code> = [0.01, 0.9, 0.5, 0.05, 0.05, 0.1, 0.1, 0.03, 0.07, 0.1]<br>
该神经元对应的正确值为2，即<code>t[5]</code> = 2</p>
<p>那么，<code>y[5,2] = 0.5</code>，也就是该正确值的概率为0.5</p>
<h3 id="设定损失函数的意义"><a class="header-anchor" href="#设定损失函数的意义">¶</a>设定损失函数的意义</h3>
<p>在神经网络的学习中，寻找最优参数（权重和偏置）时， 要寻找使损失函数的值尽可能小的参数。为了找到使损失函数的值尽可能小 的地方，需要计算参数的导数（确切地讲是梯度），然后以这个导数为指引， 逐步更新参数的值。</p>
<p>此时，对该权重参数的损失函数求导，如果导数的值为负，通过使该权 重参数向正方向改变，可以减小损失函数的值；反过来，如果导数的值为正， 则通过使该权重参数向负方向改变，可以减小损失函数的值。</p>
<p><strong>在进行神经网络的学习时，不能将识别精度作为指标。因为如果以 识别精度为指标，则参数的导数在绝大多数地方都会变为0</strong>。</p>
<p><strong>例子</strong>：假设某个神经网络正 确识别出了100笔训练数据中的32笔，此时识别精度为32%。如果以识别精 度为指标，即使稍微改变权重参数的值，识别精度也仍将保持在32%，即微小的改动没有让识别精度发生变化。那么这个点的导数将会为0，而导数为0会停止神经网络的学习。</p>
<p>而如果把损失函数作为指标，则当前损 失函数的值可以表示为0.92543 … 这样的值。并且，如果稍微改变一下参数 的值，对应的损失函数也会像0.93432 … 这样发生连续性的变化。便可以使参数往导数相反方向梯度下降</p>
<p>作为激活函数的阶跃函数也有同样的情况。如果使用阶跃函数作为激活函数，神经网络的学习将无法进行。阶跃函数的导数在绝大多数地方（除了0以外的地方）均为0。 也就是说，如果使用了阶跃函数，那么即便将损失函数作为指标，参数的微小变化也会被阶跃函数抹杀，导致损失函数的值不会产生任何变化。而sigmoid函数，不仅函数的输出（竖轴的值）是连续变化的，曲线的斜率（导数）也是连续变化的。也就是说，<strong>sigmoid函数的导数在任何地方都不为0。这对神经网络的学习非常重要。得益于这个斜率不会为0的性质，神经网络的学 习得以正确进行。</strong></p>
<p><img alt="" src="https://note.youdao.com/yws/public/resource/ce3ef7f433291236dfede2064f0b0acd/xmlnote/A9C0AAF73DF74D0AA337B6C923D08369/507"></p>
<hr>
<p><strong>注</strong>:本文为<strong>斋藤康毅</strong>的《<strong>深度学习入门：基于Python的理论与实现</strong>》片段摘抄与学习笔记</p>
</div></div><p><br></p></div><p><br></p></div><p><br></p></div><p><img src="/uploads/images/imageup-1558349897832.png" style="max-width:100%;"><br></p>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/8a7c7277.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>深度学习入门—手写文字识别机</title>
                <link>https://me.idealli.com/post/6afd50bb.html</link>
                <guid>https://me.idealli.com/post/6afd50bb.html</guid>
                <pubDate>2019-5-20</pubDate>
                <description>
                和求解机器学习问题的步骤（分成学习和推理两个阶段进行）一样， 使用神经网络解决问题时，也需要首先使用训练数据（学习数据）进 行权重参数的学习；进行推理时，使用刚才学习到的参数，对输入 数据进行分类。
                </description>
                <content:encoded>
                <![CDATA[<div><div><div class="post-body" itemprop="articleBody">
<blockquote>
<p>和求解机器学习问题的步骤（分成学习和推理两个阶段进行）一样， 使用神经网络解决问题时，也需要首先使用训练数据（学习数据）进 行权重参数的学习；进行推理时，使用刚才学习到的参数，对输入 数据进行分类。</p>
</blockquote>
<h3 id="mnist数据集"><a class="header-anchor" href="#mnist数据集">¶</a>mnist数据集</h3>
<p>MNIST数据集是由0到9的数字图像构成的。训练图像有6万张， 测试图像有1万张，这些图像可以用于学习和推理。MNIST数据集的一般使用方法是，<strong>先用训练图像进行学习，再用学习到的模型度量能在多大程度上对测试图像进行正确的分类。</strong></p>
<p><img src="/uploads/images/imageup-1558349603275.png" style="max-width:100%;"><br></p>
<p>MNIST的图像数据是28像素 × 28像素的灰度图像（1通道），各个像素 的取值在0到255之间。每个图像数据都相应地标有“7”“2”“1”等标签。</p>
<p>下面代码简单地读出数据集</p>
<a id="more"></a>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs shell"><span class="line"><span class="hljs-meta"><span class="hljs-meta">#</span></span><span class="bash"><span class="bash"> coding: utf-8</span></span></span><br><span class="line"><span class="bash"><span class="bash">import sys, os</span></span></span><br><span class="line"><span class="bash"><span class="bash">sys.path.append(os.pardir) </span><span class="hljs-comment"><span class="bash"><span class="hljs-comment"># 为了导入父目录的文件而进行的设定</span></span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment"><span class="bash"><span class="hljs-comment">import numpy as np</span></span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment"><span class="bash"><span class="hljs-comment">from dataset.mnist import load_mnist</span></span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment"><span class="bash"><span class="hljs-comment"># 第一次调用会花费几分钟 ……</span></span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment"><span class="bash"><span class="hljs-comment"># (训练图像 ,训练标签 )，(测试图像，测试标签 )</span></span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment"><span class="bash"><span class="hljs-comment">(x_train, t_train), (x_test, t_test) = load_mnist(flatten=True,</span></span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment"><span class="bash"><span class="hljs-comment">normalize=False)</span></span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment"><span class="bash"><span class="hljs-comment"># 输出各个数据的形状</span></span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment"><span class="bash"><span class="hljs-comment">print(x_train.shape) # (60000, 784)</span></span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment"><span class="bash"><span class="hljs-comment">print(t_train.shape) # (60000,)</span></span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment"><span class="bash"><span class="hljs-comment">print(x_test.shape) # (10000, 784)</span></span></span></span></span><br><span class="line"><span class="bash"><span class="hljs-comment"><span class="bash"><span class="hljs-comment">print(t_test.shape) # (10000,)</span></span></span></span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p><code>load_mnist</code>函数以“(训练图像 ,训练标签 )，(测试图像，测试标签 )”的 形式返回读入的MNIST数据。此外，还可以像<code>load_mnist(normalize=True, flatten=True, one_hot_label=False)</code> 这 样，设 置 3 个 参 数。第 1 个参数 normalize设置是否将输入图像正规化为0.0～1.0的值。</p>
</blockquote>
<p>如果将该参数设置为False，则输入图像的像素会保持原来的0～255。第2个参数flatten设置是否展开输入图像（变成一维数组）。如果将该参数设置为False，则输入图 像为1 × 28 × 28的三维数组；若设置为True，则输入图像会保存为由784个 元素构成的一维数组。<strong>第3个参数one_hot_label设置是否将标签保存为onehot表示（one-hotrepresentation）</strong>。</p>
<hr>
<p><code>normalize</code> : 将图像的像素值正规化为0.0~1.0</p>
<p><code>one_hot_label</code>:<code>one_hot_label</code>为<code>True</code>的情况下，标签作为<code>one-hot</code>数组返回</p>
<p><code>one-hot</code>数组是指<code>[0,0,1,0,0,0,0,0,0,0]</code>这样的数组</p>
<p><code>flatten</code> : 是否将图像展开为一维数组Returns</p>
<hr>
<p>导入数据集完成后，开始实现神经网络地推理处理。可以看出，每个图像有784个像素点，将每个图像作为一个输入点，也就是作为一个输入层地神经元，那么输入层的神经元一共有784个（只讨论一张图片），而输出层的为十个数字，分别表示该图片是0~9的概率，此外该神经网络还有两个中间层（隐藏层）第一个隐藏层有50个神经元，第二个隐藏层有100个神经元。<strong>其实这50和100可以设置成其他值。</strong></p>
<h5 id="下面定义三个函数"><a class="header-anchor" href="#下面定义三个函数">¶</a>下面定义三个函数</h5>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">get_data</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function">:</span></span></span><br><span class="line">    (x_train, t_train), (x_test, t_test) = load_mnist(normalize=<span class="hljs-literal"><span class="hljs-literal">True</span></span>, flatten=<span class="hljs-literal"><span class="hljs-literal">True</span></span>, one_hot_label=<span class="hljs-literal"><span class="hljs-literal">False</span></span>)</span><br><span class="line">    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> x_test, t_test</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">init_network</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function">:</span></span></span><br><span class="line">    <span class="hljs-keyword"><span class="hljs-keyword">with</span></span> open(<span class="hljs-string"><span class="hljs-string">"sample_weight.pkl"</span></span>, &amp;aposrb&amp;apos) <span class="hljs-keyword"><span class="hljs-keyword">as</span></span> f:</span><br><span class="line">    network = pickle.load(f)</span><br><span class="line">    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> network</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">def</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">predict</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(network, x)</span></span></span><span class="hljs-function">:</span></span></span><br><span class="line">    W1, W2, W3 = network[&amp;aposW1&amp;apos], network[&amp;aposW2&amp;apos], network[&amp;aposW3&amp;apos]</span><br><span class="line">    b1, b2, b3 = network[&amp;aposb1&amp;apos], network[&amp;aposb2&amp;apos], network[&amp;aposb3&amp;apos]</span><br><span class="line">    a1 = np.dot(x, W1) + b1</span><br><span class="line">    z1 = sigmoid(a1)</span><br><span class="line">    a2 = np.dot(z1, W2) + b2</span><br><span class="line">    z2 = sigmoid(a2)</span><br><span class="line">    a3 = np.dot(z2, W3) + b3</span><br><span class="line">    y = softmax(a3)</span><br><span class="line">    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> y</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>get_data</code>函数通过<code>load_mnist</code>读取数据集并返回测试数据集。</li>
<li><code>Init_network</code>函数读取<code>pkl</code>文件并将其反序列化，这个文件中以字典变量的形式保存了权重和偏置参数</li>
<li><code>predic</code>函数对输入进行分类</li>
</ul>
<h3 id="正规化-预处理"><a class="header-anchor" href="#正规化-预处理">¶</a>正规化/预处理</h3>
<p><code>load_mnist</code>函数的参数<code>normalize</code>设置成了<code>True</code>。将<code>normalize</code>设置成<code>True</code>后，函数内部会进行转换，将图像的各个像 素值除以255，使得数据的值在0.0～1.0的范围内。<strong>像这样把数据限定到某 个范围内的处理称为正规化</strong>（<code>normalization</code>）。</p>
<p>此外，<strong>对神经网络的输入数据进行某种既定的转换称为预处理</strong>（<code>pre-processing</code>）。这里，作为对输入图像的 一种预处理，我们进行了正规化。</p>
<p><strong>补充：序列化</strong></p>
<p><code>pickle</code>提供了一个简单的持久化功能。可以将对象以文件的形式存放在磁盘上。<code>pickle</code>模块只能在<code>python</code>中使用，<code>python</code>中几乎所有的数据类型（列表，字典，集合，类等）都可以用pickle来序列化，<code>pickle.dump(obj, file[, protocol])</code>序列化对象，并将结果数据流写入到文件对象中。</p>
<p>参数<code>protocol</code>是序列化模式，默认值为0，表示以文本的形式序列化。<code>protocol</code>的值还可以是1或2，表示以二进制的形式序列化。<br>
<code>pickle.load(file)</code></p>
<p>反序列化对象。将文件中的数据解析为一个<code>Python</code>对象。</p>
<hr>
<p><strong>现在利用这三个函数进行神经网络的推演</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line">x, t = get_data()</span><br><span class="line">network = init_network()</span><br><span class="line">accuracy_cnt = <span class="hljs-number"><span class="hljs-number">0</span></span></span><br><span class="line"><span class="hljs-keyword"><span class="hljs-keyword">for</span></span> i <span class="hljs-keyword"><span class="hljs-keyword">in</span></span> range(len(x)):</span><br><span class="line">    y = predict(network, x[i])</span><br><span class="line">    p= np.argmax(y) <span class="hljs-comment"><span class="hljs-comment"># 获取概率最高的元素的索引</span></span></span><br><span class="line"><span class="hljs-comment"><span class="hljs-comment">    if p == t[i]:</span></span></span><br><span class="line"><span class="hljs-comment"><span class="hljs-comment">    accuracy_cnt += 1</span></span></span><br></pre></td></tr></tbody></table></figure>
<p>首先获得MNIST数据集，生成网络。接着，用for语句逐一取出保存 在x中的图像数据，用<code>predict()</code>函数进行分类。<code>predict()</code>函数以<code>NumPy</code>数 组的形式输出各个标签对应的概率。比如输出<code>[0.1, 0.3, 0.2, ..., 0.04]</code>的 数组，该数组表示“0”的概率为0.1，“1”的概率为0.3<br>
用np.argmax(x)函数取出数组中的最大值的索引<br>
比较神经网络所预 测的答案和正确解标签，将回答正确的概率作为识别精度。</p>
<p><strong>输出结果Accuracy:0.9352</strong></p>
<h3 id="批处理"><a class="header-anchor" href="#批处理">¶</a>批处理</h3>
<p>上面的代码中，每次for循环处理处理一张图片的数据，单张图片的神经网络推处理过程如下</p>
<p><img src="/uploads/images/imageup-1558349611591.png" style="max-width:100%;"><br></p>
<p>输入一个由784个元素构成的一维数组，输出有10个元素的一维数组，这只是输入一张图片的处理流程，如果考虑多张图片打包输入，比如用<code>predict（）</code>函数一次性打包处理100张图片，这时可以把x的形状改为100X784，神经网络推理过程如下</p>
<p><img src="/uploads/images/imageup-1558349615695.png" style="max-width:100%;"><br></p>
<p>输入数据的形状为 100 × 784，输出数据的形状为 100 × 10。这表示输入的100张图像的结果被一次性输出了。比如<code>x[0]</code>和<code>y[0]</code>中保存了第0张图像及其推理结果，<code>x[1]</code>和<code>y[1]</code>中保存了第1张图像及 其推理结果。</p>
<p>这种打包式的输入数据称为批（batch）。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs cpp"><span class="line">x, t = get_data()</span><br><span class="line">network = init_network()</span><br><span class="line">batch_size = <span class="hljs-number"><span class="hljs-number">100</span></span> # 批数量</span><br><span class="line">accuracy_cnt = <span class="hljs-number"><span class="hljs-number">0</span></span></span><br><span class="line"><span class="hljs-number"><span class="hljs-number">f</span></span><span class="hljs-keyword"><span class="hljs-keyword">or</span></span> i in range(<span class="hljs-number"><span class="hljs-number">0</span></span>, len(x), batch_size):</span><br><span class="line">    x_batch = x[i:i+batch_size]</span><br><span class="line">    y_batch = predict(network, x_batch)</span><br><span class="line">    p = np.argmax(y_batch, axis=<span class="hljs-number"><span class="hljs-number">1</span></span>)</span><br><span class="line">    accuracy_cnt += np.sum(p == t[i:i+batch_size])</span><br><span class="line"> </span><br><span class="line">print(<span class="hljs-string"><span class="hljs-string">"Accuracy:"</span></span> + str(<span class="hljs-keyword"><span class="hljs-keyword">float</span></span>(accuracy_cnt) / len(x)))</span><br></pre></td></tr></tbody></table></figure>
<p>首先是<code>range()</code>函数。<code>range()</code>函数若 指定为<code>range(start, end)</code>，则会生成一个由<code>start</code>到<code>end-1</code>之间的整数构成的 列表。若像<code>range(start, end, step)</code>这样指定3个整数，则生成的列表中的 下一个元素会增加<code>step</code>指定的值</p>
<h3 id="本章所学的内容"><a class="header-anchor" href="#本章所学的内容">¶</a>本章所学的内容</h3>
<ul>
<li>神经网络中的激活函数使<strong>用平滑变化</strong>的<strong>sigmoid函数或ReLU函数</strong>。</li>
<li>通过巧妙地使用NumPy多维数组，可以高效地实现神经网络。</li>
<li>机器学习的问题大体上可以分为<strong>回归问题</strong>和<strong>分类问题</strong>。</li>
<li>关于输出层的激活函数，回归问题中一般用恒等函数，分类问题中 一般用softmax函数。</li>
<li>分类问题中，<strong>输出层的神经元的数量设置为要分类的类别数</strong>。</li>
<li>输入数据的集合称为批。通过以批为单位进行推理处理，能够实现 高速的运算。</li>
</ul>
<p><strong>神经网络和上一章的感知机</strong>在信号的按层传递这一点上是相同的，但是，向下一个神经元发送信号时， 改变信号的激活函数有很大差异。<strong>神经网络中使用的是平滑变化的sigmoid 函数，而感知机中使用的是信号急剧变化的阶跃函数</strong>。这个差异对于神经网 络的学习非常重要</p>
<hr>
<p><strong>注</strong>:本文为<strong>斋藤康毅</strong>的《<strong>深度学习入门：基于Python的理论与实现</strong>》片段摘抄与学习笔记</p>
</div></div><p><br></p></div><p><br></p>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/6afd50bb.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>深度学习预热——感知机</title>
                <link>https://me.idealli.com/post/9a152e11.html</link>
                <guid>https://me.idealli.com/post/9a152e11.html</guid>
                <pubDate>2019-5-20</pubDate>
                <description>
                感知机是由美国学者Frank Rosenblatt在1957年提出来的。为何我们现在还要学习这一很久以前就有 的算法呢？因为感知机也是作为神经网络（深度学习）的起源的算法。因此， 学习感知机的构造也就
                </description>
                <content:encoded>
                <![CDATA[<div><div class="post-body" itemprop="articleBody">
<p>感知机是由美国学者Frank Rosenblatt在1957年提出来的。为何我们现在还要学习这一很久以前就有 的算法呢？因为感知机也是作为神经网络（深度学习）的起源的算法。因此， 学习感知机的构造也就是学习通向神经网络和深度学习的一种重要思想</p>
<h3 id="什么是感知机"><a class="header-anchor" href="#什么是感知机">¶</a>什么是感知机</h3>
<p>权重感知机接收输入信息，输出一个信号(0或1)。例如<br>
X1,X2是输入信号，y是输出信号，w1，w2是权重，图中的圆圈被称为神经元或者节点。输入信号被送往神经元，会被分别乘以固定的权重（w1x1,w2x2）神经元会计算送过来的信号的总和，只有当这个总和超过了某个界限值，才会输出1。这也称为“神经元被激活”这里将这个界限值称为阙值</p>
<p><img src="/uploads/images/imageup-1558350377996.png" style="max-width:100%;"><br></p>
<p>这便是感知机的原理（有点像逻辑回归），用数学表达式表示就是<br><img src="/uploads/images/imageup-1558350382939.png" style="max-width:100%;"><br></p>
<a id="more"></a>
<p><strong>用感知机来解决简单的的问题</strong></p>
<h3 id="与门电路"><a class="header-anchor" href="#与门电路">¶</a>与门电路</h3>
<p>这里首先以逻辑电路为题 材来思考一下与门（AND gate）。与门是有两个输入和一个输出的门电路。图2-2 这种输入信号和输出信号的对应表称为“真值表”。如图2-2所示，<strong>与门仅在 两个输入均为1时输出1，其他时候则输出0。</strong></p>
<p><img src="/uploads/images/imageup-1558350386739.png" style="max-width:100%;"><br></p>
<p>下面考虑用感知机来表示这个与门。需要做的就是确定能满足图2-2的 真值表的w1、w2、θ的值。那么，设定什么样的值才能制作出满足图2-2的 条件的感知机呢？</p>
<p>比如，当<br>
(w1,w 2, θ) = (0.5, 0.5, 0.7)时，可以满足图2-2的条件。此外，当(w1,w 2,θ) 为(0.5,0.5, 0.8)或者(1.0, 1.0, 1.0)时，同样也满足与门的条件。设定这样的 参数后，仅当x1和x2同时为1时，信号的加权总和才会超过给定的阈值θ</p>
<h3 id="与非门和或门"><a class="header-anchor" href="#与非门和或门">¶</a>与非门和或门</h3>
<p>接着考虑与非门和或门，同样的道理，与非门真值表如下</p>
<p><img src="/uploads/images/imageup-1558350391841.png" style="max-width:100%;"><br></p>
<p>要表示与非门，可以用(w1,w 2, θ) = (−0.5,−0.5,−0.7)这样的组合</p>
<p>哎，或门就不讲了</p>
<p>这里决定感知机参数的并不是计算机，而是我们人。我们看着真值 表这种“训练数据”，人工考虑（想到）了参数的值。而机器学习的课 题就是将这个决定参数值的工作交由计算机自动进行。学习是确定 合适的参数的过程，而人要做的是思考感知机的构造（模型），并把 训练数据交给计算机。</p>
<h3 id="感知机的实现"><a class="header-anchor" href="#感知机的实现">¶</a>感知机的实现</h3>
<p>现在我们用python实现一个与门电路的的函数</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs php"><span class="line"><span class="function"><span class="keyword">def</span> <span class="title"><span class="hljs-keyword">And</span></span><span class="params">(x1, x2)</span>:</span></span><br><span class="line">w1, w2, theta = <span class="number"><span class="hljs-number">0.5</span></span>, <span class="number"><span class="hljs-number">0.5</span></span>, <span class="number"><span class="hljs-number">1</span></span></span><br><span class="line"><span class="keyword"><span class="hljs-keyword">if</span></span> w1*x1 + w2*x2 &gt;= theta:</span><br><span class="line"><span class="keyword"><span class="hljs-keyword">return</span></span> <span class="number"><span class="hljs-number">1</span></span></span><br><span class="line"><span class="keyword"><span class="hljs-keyword">else</span></span>:</span><br><span class="line"><span class="keyword"><span class="hljs-keyword">return</span></span> <span class="number"><span class="hljs-number">0</span></span></span><br><span class="line"><span class="hljs-keyword">print</span>(<span class="hljs-keyword">And</span>(<span class="number"><span class="hljs-number">0</span></span>, <span class="number"><span class="hljs-number">1</span></span>))</span><br><span class="line"><span class="hljs-keyword">print</span>(<span class="hljs-keyword">And</span>(<span class="number"><span class="hljs-number">1</span></span>, <span class="number"><span class="hljs-number">0</span></span>))</span><br><span class="line"><span class="hljs-keyword">print</span>(<span class="hljs-keyword">And</span>(<span class="number"><span class="hljs-number">0</span></span>, <span class="number"><span class="hljs-number">0</span></span>))</span><br><span class="line"><span class="hljs-keyword">print</span>(<span class="hljs-keyword">And</span>(<span class="number"><span class="hljs-number">1</span></span>, <span class="number"><span class="hljs-number">1</span></span>))</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>输出<br>
0<br>
0<br>
0<br>
1</p>
</blockquote>
<h3 id="导入权重和偏置"><a class="header-anchor" href="#导入权重和偏置">¶</a>导入权重和偏置</h3>
<p>将θ换成−b，或者说将θ移到和w1x1+w2x2一起，这样方程就改写为</p>
<p><img src="/uploads/images/imageup-1558350399119.png" style="max-width:100%;"><br></p>
<p>虽然有和之前的方程一个符号不同，但表达的内容是完全相同的。 此处，b称为偏置，w1和w2称为权重。如式方程所示，感知机会计算输入 信号和权重的乘积，然后加上偏置，如果这个值大于0则输出1，否则输出0。 下面，我们使用NumPy，按上方程的方式实现感知机。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs php"><span class="line"><span class="keyword">import</span> numpy <span class="keyword"><span class="hljs-keyword">as</span></span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title"><span class="hljs-keyword">And</span></span><span class="params">(x)</span>:</span></span><br><span class="line">w = np.<span class="hljs-keyword">array</span>([<span class="number"><span class="hljs-number">0.5</span></span>, <span class="number"><span class="hljs-number">0.5</span></span>]) <span class="comment"><span class="hljs-comment">#权重值矩阵</span></span></span><br><span class="line"><span class="hljs-comment">b = </span><span class="number"><span class="hljs-comment">-1</span></span><span class="hljs-comment">                                  </span><span class="comment"><span class="hljs-comment">#偏置</span></span></span><br><span class="line"><span class="hljs-comment">tmp = np.sum(w*x) + b</span></span><br><span class="line"><span class="keyword"><span class="hljs-comment">if</span></span><span class="hljs-comment"> tmp &gt;= </span><span class="number"><span class="hljs-comment">0</span></span><span class="hljs-comment">:</span></span><br><span class="line"><span class="keyword"><span class="hljs-comment">return</span></span><span class="hljs-comment"> </span><span class="number"><span class="hljs-comment">1</span></span></span><br><span class="line"><span class="keyword"><span class="hljs-comment">else</span></span><span class="hljs-comment">:</span></span><br><span class="line"><span class="keyword"><span class="hljs-comment">return</span></span><span class="hljs-comment"> </span><span class="number"><span class="hljs-comment">0</span></span></span><br><span class="line"><span class="hljs-comment">print(And(np.array([</span><span class="number"><span class="hljs-comment">0</span></span><span class="hljs-comment">, </span><span class="number"><span class="hljs-comment">0</span></span><span class="hljs-comment">])))</span></span><br><span class="line"><span class="hljs-comment">print(And(np.array([</span><span class="number"><span class="hljs-comment">1</span></span><span class="hljs-comment">, </span><span class="number"><span class="hljs-comment">0</span></span><span class="hljs-comment">])))</span></span><br><span class="line"><span class="hljs-comment">print(And(np.array([</span><span class="number"><span class="hljs-comment">0</span></span><span class="hljs-comment">, </span><span class="number"><span class="hljs-comment">1</span></span><span class="hljs-comment">])))</span></span><br><span class="line"><span class="hljs-comment">print(And(np.array([</span><span class="number"><span class="hljs-comment">1</span></span><span class="hljs-comment">, </span><span class="number"><span class="hljs-comment">1</span></span><span class="hljs-comment">])))</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="感知机的局限性"><a class="header-anchor" href="#感知机的局限性">¶</a>感知机的局限性</h3>
<p>异或门也被称为逻辑异或电路。如图所示，仅当x1或x2中的一方为 1时，才会输出1（“异或”是拒绝其他的意思）。那么，要用感知机实现这个 异或门的话，应该设定什么样的权重参数呢</p>
<p><img src="/uploads/images/imageup-1558350404549.png" style="max-width:100%;"><br></p>
<p>然而上面介绍的感知机实际上无法实现这个异或门，为什么呢？</p>
<p>假设权重参数（n, w1, w2）= (-0.5, 1, 1 )时，感知机的表示方程如下</p>
<p><img src="/uploads/images/imageup-1558350408484.png" style="max-width:100%;"><br></p>
<p>它表示的感知机会生成由直线−0.5 + x1 + x2 = 0分割开的两个空 间。其中一个空间输出1，另一个空间输出0，如图2-6所示</p>
<p><img src="/uploads/images/imageup-1558350412534.png" style="max-width:100%;"><br></p>
<p>这里便有了支持向量机（svm）的概念<br>
在一个n维空间中找到一个n-1维的超平面，将两种不同属性的点分隔开</p>
<p>上图中想要用一条直线将图2-7中的○和△分开，无论如何都做不到。事实上， 用一条直线是无法将○和△分开的。</p>
<p>但是如果将“直线”这个限制条 件去掉，就可以实现了。比如，我们可以像图2-8那样，作出分开○和△的空间</p>
<p><img src="/uploads/images/imageup-1558350425941.png" style="max-width:100%;"><br></p>
<p>感知机的局限性就在于它只能表示由一条直线分割的空间。上图这样弯 曲的曲线无法用感知机表示。另外，由上图这样的曲线分割而成的空间称为 非线性空间，由直线分割而成的空间称为线性空间。线性、非线性这两个术 语在机器学习领域很常见，可以将其想象成图2-6和图2-8所示的直线和曲线。</p>
<h3 id="多层感知机"><a class="header-anchor" href="#多层感知机">¶</a>多层感知机</h3>
<p>虽然上面说到感知机不能表示异或门，实际上，感知机的绝妙之处在于它可以“叠加层”</p>
<h4 id="通过门电路的组合实现异或门"><a class="header-anchor" href="#通过门电路的组合实现异或门">¶</a>通过门电路的组合实现异或门</h4>
<p>异或门可以通过与门，与非门，或门组合来实现，这样的话我们就可以通过不同的感知机进行组合来达到目标</p>
<p>那么该如何对门电路进行组合呢</p>
<p><img src="/uploads/images/imageup-1558350431849.png" style="max-width:100%;"><br></p>
<p>上面讲局限性讲到的感知机的局限性，严格地讲，应该是“单层感知机无法 表示异或门”或者“单层感知机无法分离非线性空间”。接下来，我 们将看到通过组合感知机（叠加层）就可以实现异或门。</p>
<p><img src="/uploads/images/imageup-1558350436228.png" style="max-width:100%;"><br></p>
<p>观察x1、x2、y，可以发现确实符合异或门的输出</p>
<p><img src="/uploads/images/imageup-1558350441114.png" style="max-width:100%;"><br></p>
<p>现在我们可以使用之前的python代码来实现异或门的感知机</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs php"><span class="line"><span class="function"><span class="keyword">def</span> <span class="title"><span class="hljs-keyword">XOR</span></span><span class="params">(x)</span>:</span></span><br><span class="line">s1 = NAnd(x)</span><br><span class="line">s2 = <span class="hljs-keyword">OR</span>(x)</span><br><span class="line">s = np.<span class="hljs-keyword">array</span>([s1, s2])</span><br><span class="line">y = <span class="hljs-keyword">And</span>(s)</span><br><span class="line"><span class="keyword"><span class="hljs-keyword">return</span></span> y</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">print</span>(<span class="hljs-keyword">XOR</span>(np.<span class="hljs-keyword">array</span>([<span class="number"><span class="hljs-number">0</span></span>, <span class="number"><span class="hljs-number">0</span></span>])))</span><br><span class="line"><span class="hljs-keyword">print</span>(<span class="hljs-keyword">XOR</span>(np.<span class="hljs-keyword">array</span>([<span class="number"><span class="hljs-number">1</span></span>, <span class="number"><span class="hljs-number">0</span></span>])))</span><br><span class="line"><span class="hljs-keyword">print</span>(<span class="hljs-keyword">XOR</span>(np.<span class="hljs-keyword">array</span>([<span class="number"><span class="hljs-number">0</span></span>, <span class="number"><span class="hljs-number">1</span></span>])))</span><br><span class="line"><span class="hljs-keyword">print</span>(<span class="hljs-keyword">XOR</span>(np.<span class="hljs-keyword">array</span>([<span class="number"><span class="hljs-number">1</span></span>, <span class="number"><span class="hljs-number">1</span></span>])))</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>输出<br>
0<br>
1<br>
1<br>
0</p>
</blockquote>
<p>可以看出，异或门时多了一层结构的感知机<br>
实际上，与门、或门是单层感知机，而异或门是2层感知机。叠加了多 层的感知机也称为多层感知机（multi-layered perceptron）。</p>
<p><img src="/uploads/images/imageup-1558350447324.png" style="max-width:100%;"><br></p>
<p>（图2.13）</p>
<p>图2-13中的感知机总共由3层构成，但是因为拥有权重的层实质 上只有2层（第0层和第1层之间，第1层和第2层之间），所以称 为“2层感知机”。不过，有的文献认为图2-13的感知机是由3层 构成的，因而将其称为“3层感知机”</p>
<ul>
<li>第0层的两个神经元接收输入信号，并将信号发送至第1层的神经元。</li>
<li>第1层的神经元将信号发送至第2层的神经元，第2层的神经元输出y</li>
</ul>
<p>这可以解释为“单层感知机 无法表示的东西，通过增加一层就可以解决”。也就是说，通过叠加层（加深 层），感知机能进行更加灵活的表示</p>
<h3 id="更复杂的感知机"><a class="header-anchor" href="#更复杂的感知机">¶</a>更复杂的感知机</h3>
<p>多层感知机可以实现比之前更复杂的电路，比如加法器，二进制转十进制的编码器，某些满足条件就输出1的电路。</p>
<p>其实计算机的内部处理往简单了讲就是通过与非门等基本逻辑电路的组合</p>
<h3 id="本章所学的内容"><a class="header-anchor" href="#本章所学的内容">¶</a>本章所学的内容</h3>
<ol>
<li>感知机是具有输入和输出的算法。给定一个输入后，将输出一个既 定的值。</li>
<li>感知机将权重和偏置设定为参数。</li>
<li>使用感知机可以表示与门和或门等逻辑电路。</li>
<li>异或门无法通过单层感知机来表示。</li>
<li>使用2层感知机可以表示异或门。</li>
<li>单层感知机只能表示线性空间，而多层感知机可以表示非线性空间。</li>
<li>多层感知机（在理论上）可以表示计算机。</li>
</ol>
<hr>
<p><strong>注</strong>:本文为<strong>斋藤康毅</strong>的《<strong>深度学习入门：基于Python的理论与实现</strong>》片段摘抄与学习笔记</p>
</div></div><p><br></p>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/9a152e11.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>深度学习入门——神经网络</title>
                <link>https://me.idealli.com/post/a09e1285.html</link>
                <guid>https://me.idealli.com/post/a09e1285.html</guid>
                <pubDate>2019-5-20</pubDate>
                <description>
                之前介绍的感知机，不足的是——权重的设定工作需要人工进行。
而神经网络，的出现就是为了解决刚才的问题。具体地讲，神经网络的一 个重要性质是它可以自动地从数据中学习到合适的权重参数。
                </description>
                <content:encoded>
                <![CDATA[<div><div class="post-body" itemprop="articleBody">
<blockquote>
<p>之前介绍的感知机，不足的是——权重的设定工作需要人工进行。<br>
而神经网络，的出现就是为了解决刚才的问题。具体地讲，神经网络的一 个重要性质是它可以自动地从数据中学习到合适的权重参数。</p>
</blockquote>
<p>用图来表示神经网络，最左边的被称为<strong>输入层</strong>，中间被称为<strong>中间层（隐藏层</strong>），最右边被称为<strong>输出层</strong></p>
<p><img src="/uploads/images/imageup-1558351485365.png" style="max-width:100%;"><br></p>
<a id="more"></a>
<p><strong>图3.1</strong></p>
<p>图3-1中的网络一共由3层神经元构成，但实质上只有2层神经 元有权重，因此将其称为“2层网络”。有的书也会根据 构成网络的层数，把图3-1的网络称为<strong>3层网络</strong>。</p>
<p>回到感知机的网络结构</p>
<p><img src="/uploads/images/imageup-1558351489609.png" style="max-width:100%;"><br></p>
<p>这个感知机中接收输入信号x1,x2，输出信号为y</p>
<p><img src="/uploads/images/imageup-1558351493803.png" style="max-width:100%;"><br></p>
<p>b是被称为偏置的参数，用于控制神经元被激活的容易程度；而w1和w2 是表示各个信号的权重的参数，用于控制各个信号的重要性</p>
<p>==<strong>引入新函数 h(x)</strong>==</p>
<p><img src="/uploads/images/imageup-1558351497517.png" style="max-width:100%;"><br></p>
<p><img src="/uploads/images/imageup-1558351500887.png" style="max-width:100%;"><br></p>
<p>图3-3中添加了权重为b的输入信号1。<strong>这个感知机将x1、x2、1三个信号作为神经元的输入</strong>，将其和各自的权重相乘后， 传送至下一个神经元。在下一个神经元中，计算这些加权信号的总和。==如果这个总和超过0，则输出1，否则输出0==。另外，由于偏置的输入信号一直是1， 所以为了区别于其他神经元，我们在图中把这个神经元整个涂成灰色。</p>
<p><img src="/uploads/images/imageup-1558351504791.png" style="max-width:100%;"><br></p>
<h3 id="激活函数"><a class="header-anchor" href="#激活函数">¶</a>激活函数</h3>
<p>上面的h(x)会将输入信号的总和转换为输出信号，这种函数一般称为激活函数。<br>
激活函数的作用在于决定如何来激活输入信号的总和</p>
<p>现在继续改写式3.2。将其分为两个阶段</p>
<p><img src="/uploads/images/imageup-1558351508989.png" style="max-width:100%;"><br></p>
<p>先计算输入信号和偏置的总和，然后再用h(x)函数将a转换成输出y</p>
<p><img src="/uploads/images/imageup-1558351513499.png" style="max-width:100%;"><br></p>
<p><strong>图3.4明确激活函数的计算过程</strong><br>
大圈圈表示激活函数的计算过程</p>
<p>神经元用一个○表示。本书中，在可以明确 神经网络的动作的情况下，将在图中明确显示激活函数的计算过程，如图3-5 的右图所示。</p>
<p><img src="/uploads/images/imageup-1558351529566.png" style="max-width:100%;"><br></p>
<p>激活函数是连接感知机和神经网络的 <strong>桥梁</strong></p>
<h3 id="激活函数-v2"><a class="header-anchor" href="#激活函数-v2">¶</a>激活函数</h3>
<p>式（3.3）表示的激活函数以阈值为界，一旦输入超过阈值，就切换输出。 这样的函数称为“阶跃函数”。<br>
因此，可以说感知机中使用了阶跃函数作为 激活函数。也就是说，在激活函数的众多候选函数中，感知机使用了阶跃函数。</p>
<p>如果感知机使用其他函数作为激活函数的话，那么就开启了神经网络</p>
<h3 id="sigmoid函数"><a class="header-anchor" href="#sigmoid函数">¶</a>sigmoid函数</h3>
<p>神经网络中经常使用的一个激活函数就是sigmoid函数</p>
<p><br></p>
<p><img src="/uploads/images/imageup-1558351541152.png" style="max-width: 100%;"></p><p>神经网络中将sigmoid函数作为激活函数，进行信号转换，转换后的信号被传输给下一个神经元。<strong>实际上，感知机和神经网络的区别就在于这个激活函数。其他方面，比如神经元的多层</strong> 连接的构造、信号的传递方法等，基本上和感知机是一样的。</p>
<p><strong>迁跃函数的实现</strong></p>
<p>用python写出简单的迁跃函数</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">step_function</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line"><span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">0</span>:</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-keyword">else</span>:</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br></pre></td></tr></tbody></table></figure>
<p>这个简单的函数参数x只能接受实数，但是不允许数组，现在我们把它改成支持Numpy数组的实现。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">step_function2</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">y = x &gt; <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-keyword">return</span> y.astype(np.int)</span><br><span class="line"> </span><br><span class="line">x = np.array([<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>])</span><br><span class="line">print(step_function2(x))</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>输出<br>
[0 0 1]</p>
</blockquote>
<p>上面的函数中，y = x &gt; 1 将数组x转化为是否大于1的bool数组并赋值给y。<br>
而 y.astype(np.int) 这个语句 <strong>将bool类型的数转化为0或1</strong></p>
<h4 id="画图表示迁跃函数"><a class="header-anchor" href="#画图表示迁跃函数">¶</a>画图表示迁跃函数</h4>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line">import matplotlib.pylab <span class="hljs-keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">step_function2</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">y = x &gt; <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-keyword">return</span> y.astype(np.int)</span><br><span class="line"> </span><br><span class="line">x = np.arange(<span class="hljs-number">-5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0.1</span>)</span><br><span class="line">y = step_function2(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.ylim(<span class="hljs-number">-0.1</span>, <span class="hljs-number">1.1</span>) <span class="hljs-comment">#指定y轴的范围</span></span><br><span class="line"><span class="hljs-comment">plt.show()</span></span><br></pre></td></tr></tbody></table></figure>
<p><img src="/uploads/images/imageup-1558351561430.png" style="max-width:100%;"><br></p>
<h3 id="sigmoid函数的实现"><a class="header-anchor" href="#sigmoid函数的实现">¶</a>sigmoid函数的实现</h3>
<p>依然使用python就可以简单的实现</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sigmoid</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-x))</span><br></pre></td></tr></tbody></table></figure>
<p>这里的参数x可以是实数，也可以是Numpy数组</p>
<p><img src="/uploads/images/imageup-1558351566951.png" style="max-width:100%;"><br></p>
<p>之所以sigmoid函数的实现能支持NumPy数组，就在于NumPy的 广播功能（见Nump库的使用）根据 NumPy 的广播功能，<strong>如果在标量和NumPy数组 之间进行运算，则标量会和NumPy数组的各个元素进行运算。</strong></p>
<p><strong>一个具体的例子</strong></p>
<p><img src="/uploads/images/imageup-1558351571469.png" style="max-width:100%;"><br></p>
<p>标量（例子中是1.0）和 NumPy数组之间进行了数值运 算（+、/等）。结果，标量和NumPy数组的各个元素进行了运算，运算结 果以NumPy数组的形式被输出。刚才的sigmoid函数的实现也是如此，因为np.exp(-x)会生成NumPy数组，所以<strong>1 / (1 + np.exp(-x))的运算将会在 NumPy数组的各个元素间进行</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_sigmoid</span><span class="hljs-params">()</span>:</span></span><br><span class="line">x = np.arange(<span class="hljs-number">-5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0.1</span>)</span><br><span class="line">y = sigmoid(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.ylim(<span class="hljs-number">-0.1</span>, <span class="hljs-number">1.1</span>) <span class="hljs-comment">#指定y轴范围</span></span><br><span class="line"><span class="hljs-comment">plt.show()</span></span><br><span class="line"><span class="hljs-comment"> </span></span><br><span class="line"><span class="hljs-comment">show_sigmoid()</span></span><br></pre></td></tr></tbody></table></figure>
<p><img src="/uploads/images/imageup-1558351576416.png" style="max-width:100%;"><br></p>
<h3 id="sigmoid函数与迁跃函数的比较"><a class="header-anchor" href="#sigmoid函数与迁跃函数的比较">¶</a>sigmoid函数与迁跃函数的比较</h3>
<p>==两者的不同点：==<br>
平滑性不同，sigmoid函数比较平滑，而迁跃函数以0为界，输出发生跳跃。sigmoid函数的平滑性对神经网络的学习具有重要意义<br>
迁跃函数的返回值只有0和1，而sigmoid函数可以返回0和1之间的任意实数。也可以这么说，感知机中神经元之间流动的是0或1的二元信号，而神经网络中流动的是连续的实数信号</p>
<p>==两者的相同点：==<br>
从宏观上看，它们具有相似的形状。实际上，两者的结构均是“输入小时，输出接近0（为 0）； 随着输入增大，输出向1靠近（变成1）”。也就是说，当输入信号为重要信息时， 阶跃函数和sigmoid函数都会输出较大的值；当输入信号为不重要的信息时， 两者都输出较小的值。</p>
<p>还有一个共同点是，不管输入信号有多小，或者有多 大，输出信号的值都在0到1之间。</p>
<p><strong>两者均是非线性函数</strong></p>
<blockquote>
<p>神经网络中的激活函数必须使用非线性函数。也就是说，激活函数不能使用线性函数。</p>
</blockquote>
<p>为什么呢？</p>
<p>因为，==使用线性函数的话，加深神经网络的层数就没有意义了==（此处联想感知机实现异或逻辑的过程）线性函数的问题在于，不管如何加深层数，总是存在与之等效的“无 隐藏层的神经网络”</p>
<h4 id="简单的例子"><a class="header-anchor" href="#简单的例子">¶</a>简单的例子</h4>
<blockquote>
<p>把线性函数h(x) = cx作为激活 函数，把y(x) = h(h(h(x)))的运算对应3层神经网络A。这个运算会进行 y(x) = c×c×c×x的乘法运算，但是同样的处理可以由y(x) = ax（注意， a = c 3）这一次乘法运算（即没有隐藏层的神经网络）来表示。</p>
</blockquote>
<p>使用线性函数时，无法发挥多层网络带来的优势。因此，为了发挥叠加层所带来的优势，<strong>激活函数必须使用非线性函数</strong>。</p>
<h3 id="relu函数"><a class="header-anchor" href="#relu函数">¶</a>ReLU函数</h3>
<p>sigmoid函数很早就开始使用了，而最近则使用ReLU函数（Rectified Linear Unit）</p>
<p>RELU函数在输入大于0时直接输出该值，在输入小于等于0时，输出0，如下所示</p>
<p><img src="/uploads/images/imageup-1558351582286.png" style="max-width:100%;"><br></p>
<p>简单python实现</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">relu</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> np.maximum(<span class="hljs-number">0</span>, x)</span><br></pre></td></tr></tbody></table></figure>
<p><img src="/uploads/images/imageup-1558351587090.png" style="max-width:100%;"><br></p>
<h3 id="3层神经网络的实现"><a class="header-anchor" href="#3层神经网络的实现">¶</a>3层神经网络的实现</h3>
<p>现在以3层神经网络作为对象，实现从输入到输出的（向前）处理。在代码上使用Numpy的多维数组</p>
<p><img src="/uploads/images/imageup-1558351591718.png" style="max-width:100%;"><br></p>
<h3 id="符号确认"><a class="header-anchor" href="#符号确认">¶</a>符号确认</h3>
<p>重点是神经网络的运算可以作为矩阵运算打包进行。因为 神经网络各层的运算是通过矩阵的乘法运算打包进行的（从宏观 视角来考虑）</p>
<p><strong>给符号定义</strong></p>
<p><img src="/uploads/images/imageup-1558351598796.png" style="max-width:100%;"><br></p>
<p><br></p>
<h3 id="各层之间的信号传递实现"><a class="header-anchor" href="#各层之间的信号传递实现">¶</a>各层之间的信号传递实现</h3>
<p>下面是从输入层到第一层的第一个神经元的传递过程，图中增加了表示偏置的神经元”1“。注意前置的右下角索引号只有一个，这是因为偏置神经元只有一个（神经元”1“只有一个）。</p>
<p><img src="/uploads/images/imageup-1558351605752.png" style="max-width:100%;"><br></p>
<p><img src="/uploads/images/imageup-1558351610700.png" style="max-width:100%;"><br></p><p><img src="/uploads/images/imageup-1558351648299.png" style="max-width:100%;"><br></p>
<p>如果使用矩阵乘法运算，则可以将第一层的加权和表示成下面的式子</p>
<p><img src="/uploads/images/imageup-1558351653533.png" style="max-width:100%;"><br></p>
<p><img src="/uploads/images/imageup-1558351657483.png" style="max-width:100%;"><br></p>
<p>下面使用numpy的多维数组来实现上面公式</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs php"><span class="line">X = np.<span class="hljs-keyword">array</span>([<span class="hljs-number">1.0</span>, <span class="hljs-number">0.5</span>]) </span><br><span class="line">W1 = np.<span class="hljs-keyword">array</span>([[<span class="hljs-number">0.1</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.5</span>], [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.6</span>]]) </span><br><span class="line">B1 = np.<span class="hljs-keyword">array</span>([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>])</span><br><span class="line">A1 = np.dot(X, W1) + B1</span><br><span class="line">print(A1)</span><br><span class="line"><span class="hljs-keyword">print</span>(sigmoid(A1))</span><br></pre></td></tr></tbody></table></figure>
<p>这个运算和上一节进行的运算是一样的。W1是2×3的数组，X是元素个 数为2的一维数组。这里，W1和X的对应维度的元素个数也保持了一致。</p>
<p><img src="/uploads/images/imageup-1558351662649.png" style="max-width:100%;"><br></p>
<p>从输入层到第一层的信号传递如上。<br>
接下来我们实现第1层到第2层的信号传递</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs php"><span class="line">W2 = np.<span class="hljs-keyword">array</span>([[<span class="hljs-number">0.1</span>, <span class="hljs-number">0.4</span>], [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>], [<span class="hljs-number">0.3</span>, <span class="hljs-number">0.6</span>]])</span><br><span class="line">B2 = np.<span class="hljs-keyword">array</span>([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>])</span><br><span class="line">A2 = np.dot(Z1, W2) + B2</span><br><span class="line">Z2 = sigmoid(A2)</span><br></pre></td></tr></tbody></table></figure>
<p><img src="/uploads/images/imageup-1558351668204.png" style="max-width:100%;"><br></p>
<p>最后第二层到输出层的传递。原理和之前的基本相同，<strong>不过最后的激活函数和之前的不同。</strong></p>
<p>这里定义输出层的激活函数为“恒等函数”<strong>identity_function()函数</strong>，将输入作为输出原样输出。</p>
<p>输出层所用的激活函数，要根据求解问题的性质决定。<strong>一般地，回 归问题可以使用恒等函数，二元分类问题可以使用sigmoid函数， 多元分类问题可以使用softmax函数。</strong></p>
<p><img src="/uploads/images/imageup-1558351673764.png" style="max-width:100%;"><br></p>
<h3 id="代码整理"><a class="header-anchor" href="#代码整理">¶</a>代码整理</h3>
<p>已完成三层神经网络的介绍，现在整理一下代码</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs php"><span class="line">import numpy <span class="hljs-keyword">as</span> np</span><br><span class="line">import matplotlib.pylab <span class="hljs-keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">class network:</span><br><span class="line">    def __init__(<span class="hljs-keyword">self</span>):</span><br><span class="line">        <span class="hljs-keyword">self</span>.W1 = np.<span class="hljs-keyword">array</span>([[<span class="hljs-number">0.1</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.5</span>], [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.6</span>]])</span><br><span class="line">        <span class="hljs-keyword">self</span>.b1 = np.<span class="hljs-keyword">array</span>([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>])</span><br><span class="line">        <span class="hljs-keyword">self</span>.W2 = np.<span class="hljs-keyword">array</span>([[<span class="hljs-number">0.1</span>, <span class="hljs-number">0.4</span>], [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>], [<span class="hljs-number">0.3</span>, <span class="hljs-number">0.6</span>]])</span><br><span class="line">        <span class="hljs-keyword">self</span>.b2 = np.<span class="hljs-keyword">array</span>([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>])</span><br><span class="line">        <span class="hljs-keyword">self</span>.W3 = np.<span class="hljs-keyword">array</span>([[<span class="hljs-number">0.1</span>, <span class="hljs-number">0.3</span>], [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>]])</span><br><span class="line">        <span class="hljs-keyword">self</span>.b3 = np.<span class="hljs-keyword">array</span>([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>])</span><br><span class="line">        </span><br><span class="line">    def sigmoid(<span class="hljs-keyword">self</span>, x):</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-x))</span><br><span class="line">        </span><br><span class="line">    def indentity_fun(<span class="hljs-keyword">self</span>, x):</span><br><span class="line">        <span class="hljs-keyword">return</span> x</span><br><span class="line">        </span><br><span class="line">    def for_ward(<span class="hljs-keyword">self</span>, x):</span><br><span class="line">        w1, w2, w3 = <span class="hljs-keyword">self</span>.W1, <span class="hljs-keyword">self</span>.W2, <span class="hljs-keyword">self</span>.W3</span><br><span class="line">        b1, b2, b3 = <span class="hljs-keyword">self</span>.b1, <span class="hljs-keyword">self</span>.b2, <span class="hljs-keyword">self</span>.b3</span><br><span class="line">        a1= np.dot(x, w1) + b1</span><br><span class="line">        z1 = <span class="hljs-keyword">self</span>.sigmoid(a1)</span><br><span class="line">        a2 = np.dot(z1, w2) + b2</span><br><span class="line">        z2 = <span class="hljs-keyword">self</span>.sigmoid(a2)</span><br><span class="line">        a3 = np.dot(z2, w3) + b3</span><br><span class="line">        y = <span class="hljs-keyword">self</span>.indentity_fun(a3)</span><br><span class="line">        <span class="hljs-keyword">return</span> y</span><br><span class="line"> </span><br><span class="line">net = network()</span><br><span class="line">x = np.<span class="hljs-keyword">array</span>([<span class="hljs-number">1.0</span>, <span class="hljs-number">0.5</span>])</span><br><span class="line"><span class="hljs-keyword">print</span>(net.for_ward(x))</span><br></pre></td></tr></tbody></table></figure>
<p>这里定义了一个network对象，初始函数init进行权重和偏置的初始化。forword函数封装了将输入信号转化为输出信号的过程</p>
<h3 id="输出层的设计"><a class="header-anchor" href="#输出层的设计">¶</a>输出层的设计</h3>
<p>神经网络可以用分类问题和回归问题上，不过需要根据实际情况改变输出层的激活函数。一般，分类函数用softmax函数，机器学习的问题大致可以分为分类和回归问题</p>
<h3 id="softmax函数"><a class="header-anchor" href="#softmax函数">¶</a>softmax函数</h3>
<p>分类问题中使用的softmax函数的公式如下</p>
<p><img src="/uploads/images/imageup-1558351688950.png" style="max-width:100%;"><br></p>
<p><strong>用神经网络图表示如下</strong></p>
<p><img src="/uploads/images/imageup-1558351693102.png" style="max-width:100%;"><br></p>
<p><strong>这个公式在代码中容易产生溢出问题</strong>，导致计算失败，下面对softmax函数进行改进</p>
<p><img src="/uploads/images/imageup-1558351698221.png" style="max-width:100%;"><br></p>
<p>这里的C’可以是任意值，并且它并不会改变计算结果，所以可以通过这个C值来降低幂级数，从而避免溢出。一般情况下设置为输入信号量的最大值</p>
<p>python代码实现如下</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">soft</span><span class="hljs-params">(a)</span>:</span></span><br><span class="line">    c = np.max(a)</span><br><span class="line">    exp_a = np.exp(a -c)</span><br><span class="line">    sum_exp_a = np.sum(exp_a)</span><br><span class="line">    y = exp_a / sum_exp_a</span><br><span class="line">    <span class="hljs-keyword">return</span> y</span><br></pre></td></tr></tbody></table></figure>
<p>使用softmax函数计算神经网络输出值</p>
<p><img src="/uploads/images/imageup-1558351704216.png" style="max-width:100%;"><br></p>
<p><strong>softmax函数的输出值总是在0和1之间的实数，并且softmax函数的输出值总和为1</strong>，这是他的一个重要性质因此，我们又把softmax函数的输出解释为<strong>概率</strong></p>
<blockquote>
<p>上面的例子可以解释成y[0]的概率是0.018（1.8 %），y[1]的概率 是0.245（24.5 %），y[2]的概率是0.737（73.7 %）。从概率的结果来看，可以 说“因为第2个元素的概率最高，所以答案是第2个类别”。而且，还可以回 68 答“有74 %的概率是第2个类别，有25 %的概率是第1个类别，有1 %的概 率是第0个类别”。也就是说，通过使用softmax函数，我们可以用概率的（统计的）方法处理问题<br>
不过由于指数函数的运算需要一定的计算量，因此输出层的softmax函数在实际情况中一般会被省略</p>
</blockquote>
<h3 id="输出层的神经元数量"><a class="header-anchor" href="#输出层的神经元数量">¶</a>输出层的神经元数量</h3>
<p>输出层的神经元数量根据实际情况而定，对于分类问题，输出层的神经元数量一般是类别的数量。比如，对于某个输入图像，预测是图中的数字0到9中的哪一个问题，那么可以将输出层的神经元数量设为10个，分为对应0~9</p>
<p><img src="/uploads/images/imageup-1558351715630.png" style="max-width:100%;"><br></p>
<hr>
<p><strong>注</strong>:本文为<strong>斋藤康毅</strong>的《<strong>深度学习入门：基于Python的理论与实现</strong>》片段摘抄与学习笔记</p>
</div></div><p><br></p>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/a09e1285.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>深度学习预热——Matplotlib库的简单用法</title>
                <link>https://me.idealli.com/post/e5c17407.html</link>
                <guid>https://me.idealli.com/post/e5c17407.html</guid>
                <pubDate>2019-5-20</pubDate>
                <description>
                可以使用matplotlib的pyplot模块绘制图形。话不多说，我们来看一个 绘制sin函数曲线的例子。
                </description>
                <content:encoded>
                <![CDATA[<div><div><div class="post-body" itemprop="articleBody">
<p>可以使用matplotlib的pyplot模块绘制图形。话不多说，我们来看一个 绘制sin函数曲线的例子。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="keyword"><span class="hljs-keyword"><span class="hljs-keyword">import</span></span></span> numpy <span class="keyword"><span class="hljs-keyword"><span class="hljs-keyword">as</span></span></span> np </span><br><span class="line"><span class="keyword"><span class="hljs-keyword"><span class="hljs-keyword">import</span></span></span> matplotlib.pyplot <span class="keyword"><span class="hljs-keyword"><span class="hljs-keyword">as</span></span></span> plt</span><br><span class="line">x = np.arange(<span class="number"><span class="hljs-number"><span class="hljs-number">0</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">6</span></span></span>, <span class="number"><span class="hljs-number"><span class="hljs-number">0.1</span></span></span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p><br></p><div yne-bulb-block="image"><img src="/uploads/images/imageup-1558344763588.png" style="max-width: 100%;"></div>
<a id="more"></a>
<h3 id="pyplot的功能"><a class="header-anchor" href="#pyplot的功能">¶</a>pyplot的功能</h3>
<p>在刚才的sin函数的图形中，我们尝试追加cos函数的图形，并尝试使用 pyplot的添加标题和x轴标签名等其他功能。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs cpp"><span class="line">x = np.arange(<span class="hljs-number"><span class="hljs-number">0</span></span>, <span class="hljs-number"><span class="hljs-number">6</span></span>, <span class="hljs-number"><span class="hljs-number">0.1</span></span>)</span><br><span class="line">y1 = np.<span class="hljs-built_in"><span class="hljs-built_in">sin</span></span>(x)</span><br><span class="line">y2 = np.<span class="hljs-built_in"><span class="hljs-built_in">cos</span></span>(x)</span><br><span class="line">plt.plot(x, y1, label=<span class="hljs-string"><span class="hljs-string">"sin"</span></span>)</span><br><span class="line">plt.plot(x, y2, label=<span class="hljs-string"><span class="hljs-string">"cos"</span></span>, linestyle = <span class="hljs-string"><span class="hljs-string">"--"</span></span>)</span><br><span class="line"># 设置x，y轴标签</span><br><span class="line">plt.xlabel(<span class="hljs-string"><span class="hljs-string">"x轴"</span></span>)</span><br><span class="line">plt.ylabel(<span class="hljs-string"><span class="hljs-string">"y轴"</span></span>)</span><br><span class="line">plt.title(<span class="hljs-string"><span class="hljs-string">"HHHH"</span></span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h3 id="显示图像"><a class="header-anchor" href="#显示图像">¶</a>显示图像</h3>
<p>pyplot中还提供了用于显示图像的方法imshow()。另外，可以使用 matplotlib.image模块的imread()方法读入图像。下面我们来看一个例子。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre class="hljs python"><span class="line"><span class="hljs-keyword"><span class="hljs-keyword">import</span></span> matplotlib.pyplot <span class="hljs-keyword"><span class="hljs-keyword">as</span></span> plt </span><br><span class="line"><span class="hljs-keyword"><span class="hljs-keyword">from</span></span> matplotlib.image <span class="hljs-keyword"><span class="hljs-keyword">import</span></span> imread</span><br><span class="line">img = imread(&amp;apostest.png&amp;apos) <span class="hljs-comment"><span class="hljs-comment"># 读入图像</span></span></span><br><span class="line"><span class="hljs-comment"><span class="hljs-comment">plt.imshow(img)</span></span></span><br><span class="line"><span class="hljs-comment"><span class="hljs-comment">plt.show()</span></span></span><br></pre></td></tr></tbody></table></figure>
<p><img alt="" src="https://note.youdao.com/yws/public/resource/17c76d97a440d2a5849c9c8b38279d42/xmlnote/OFFICE9EF69CE853574295A2E7F8DAC37E1F80/43"></p>
<hr>
<p><strong>注</strong>:本文为<strong>斋藤康毅</strong>的《<strong>深度学习入门：基于Python的理论与实现</strong>》片段摘抄与学习笔记</p>
</div></div><p><br></p></div><p><br></p>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/e5c17407.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>Flybook-用node.js从零开始搭一个简约而不简单的博客站点</title>
                <link>https://me.idealli.com/post/d3f1788e3</link>
                <guid>https://me.idealli.com/post/d3f1788e3</guid>
                <pubDate>2019-5-19</pubDate>
                <description>
                前言：玩了快一年博客了，一直用的第三方框架，比如WordPress，typecho，hexo等。其中hexo用的最久，期间把nex主题改得乱七八糟。上周看完node的文档后，受前辈柠檬酸的启发，决定自己用node搭一个博客web应用。历时一周，完成初步版本，本博客整体UI风模仿简书。
                </description>
                <content:encoded>
                <![CDATA[<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/10e5395539517dd1a926f9c7f4f0d9d04044a950/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f666c796d7973716c2f666c79626f6f6b2e737667"><img src="https://camo.githubusercontent.com/10e5395539517dd1a926f9c7f4f0d9d04044a950/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f666c796d7973716c2f666c79626f6f6b2e737667" alt="" data-canonical-src="https://img.shields.io/github/issues/flymysql/flybook.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/575e998c47c4c59ced92280aa4e1d04818fc017a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f666c796d7973716c2f666c79626f6f6b2e737667"><img src="https://camo.githubusercontent.com/575e998c47c4c59ced92280aa4e1d04818fc017a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f666c796d7973716c2f666c79626f6f6b2e737667" alt="" data-canonical-src="https://img.shields.io/github/forks/flymysql/flybook.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/8e1ad9c0cc697a54b68634d087ce6f141ac03732/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f666c796d7973716c2f666c79626f6f6b2e737667"><img src="https://camo.githubusercontent.com/8e1ad9c0cc697a54b68634d087ce6f141ac03732/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f666c796d7973716c2f666c79626f6f6b2e737667" alt="" data-canonical-src="https://img.shields.io/github/stars/flymysql/flybook.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/4d4efb90de28b08f4bf6a7f6a1960668e7509694/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f666c796d7973716c2f666c79626f6f6b2e737667"><img src="https://camo.githubusercontent.com/4d4efb90de28b08f4bf6a7f6a1960668e7509694/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f666c796d7973716c2f666c79626f6f6b2e737667" alt="" data-canonical-src="https://img.shields.io/github/license/flymysql/flybook.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/327328e65f3fe8f0334cdb8babeac353d137a489/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c616e67756167652d6e6f64652e6a732d677265656e2e737667"><img src="https://camo.githubusercontent.com/327328e65f3fe8f0334cdb8babeac353d137a489/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c616e67756167652d6e6f64652e6a732d677265656e2e737667" alt="" data-canonical-src="https://img.shields.io/badge/language-node.js-green.svg" style="max-width:100%;"></a></p>


<div><div><div><div><p>前言：玩了快一年博客了，一直用的第三方框架，比如WordPress，typecho，hexo等。其中hexo用的最久，期间把nex主题改得乱七八糟。上周看完node的文档后，受前辈<a href="https://cherryml.com/article/31" target="_blank">柠檬酸</a>的启发，决定自己用node搭一个博客web应用。历时一周，完成初步版本，本博客整体UI风模仿简书。</p>

<ul style="list-style: none;">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 网站骨架</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 首页页面渲染</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 文章详情页渲染</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 归档页面渲染</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 前台登录验证的实现</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 前台编写文章</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 前台修改与删除文章</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 后台文章</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 自定义页面</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> ajax渲染标签</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 各个页面css独立</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 写文章页面图片上传</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> ajax上传文件</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 点赞功能</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 文章阅读数量刷新</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 谷歌广告集成</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 文章搜索功能</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 集成image-view灯箱插件</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 集成highlight代码高亮</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> 单独标签页</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> 关于我</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 博客相册</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 把文章单标签模式换成一篇文章多标签的模式</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> 自定义页面的渲染模板和文章渲染模板分离开</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 更好的文章编辑器</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 各个设备的自适应</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> 添加游客投稿功能</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> 独立的评论系统</li>
</ul>

<h2>站点概览</h2><p><span style="font-weight: bold;">手机上的页面效果</span></p><p><img src="https://me.idealli.com/uploads/images/imageup-1558168801978.png" style="max-width:100%;"><br></p><p><img src="https://me.idealli.com/uploads/images/imageup-1558168816894.png" style="max-width:100%;"></p><p><span style="font-weight: bold;"><br></span></p><p><span style="font-weight: bold;">电脑上的页面效果</span></p><p><img src="https://me.idealli.com/uploads/images/imageup-1558168816900.png" style="max-width: 100%;"></p><p><br></p><p><img src="https://me.idealli.com/uploads/images/imageup-1558168816901.png" style="max-width: 100%;"><br></p><h2>技术栈</h2><ol><li>node</li><li>express库</li><li>pug</li><li>mysql</li><li>服务器端的配置</li></ol><h2>博客骨架</h2><p>网站骨架如下</p><pre class="hljs php"><code>├── app.js<br>├── bin	<span class="hljs-comment"><span class="hljs-comment">// 入口文件</span></span><br><span class="hljs-comment"><span class="hljs-comment">├── config.js	// 站点配置</span></span><br><span class="hljs-comment"><span class="hljs-comment">├── controllers	// 路由控制器</span></span><br><span class="hljs-comment"><span class="hljs-comment">├── package.json</span></span><br><span class="hljs-comment"><span class="hljs-comment">├── public	// 静态文件</span></span><br><span class="hljs-comment"><span class="hljs-comment">│ ├── images</span></span><br><span class="hljs-comment"><span class="hljs-comment">│ ├── javascripts</span></span><br><span class="hljs-comment"><span class="hljs-comment">│ └── stylesheets</span></span><br><span class="hljs-comment"><span class="hljs-comment">├── routes	// 路由</span></span><br><span class="hljs-comment"><span class="hljs-comment">├── server	// 数据库操作</span></span><br><span class="hljs-comment"><span class="hljs-comment">├── sessions	// 登录验证</span></span><br><span class="hljs-comment"><span class="hljs-comment">├── until	// 工具函数</span></span><br><span class="hljs-comment"><span class="hljs-comment">└── views	// 主题</span></span></code></pre><p>其实就是在express初始化的网站骨架下对自己需要的部件进行添加。</p><p><br></p><h2>页面响应</h2><p>首先要确定页面中应显示哪些信息，然后定义适当的 URL 来返回这些资源。随后应创建路由（URL 处理器）和视图（模板）来显示这些页面。</p><p>下图展示了 HTTP 请求/响应处理的主数据流和需要实现的行为。图中除视图（View）和路由（Route）外，还展示了控制器（Controller），它们是实际的请求处理函数，与路由请求代码是分开的。</p><p>模型已经创建，现在要创建的主要是：</p><ul><li>路由：把需要支持的请求（以及请求 URL 中包含的任何信息）转发到适当的控制器函数。</li><li>控制器：从模型中获取请求的数据，创建一个 HTML 页面显示出数据，并将页面返回给用户，以便在浏览器中查看。</li><li>视图（模板）：供控制器用来渲染数据。</li></ul><p><img src="https://me.idealli.com/uploads/images/imageup-1558169043543.png" style="max-width:100%;"><br></p><h2>博客安装</h2><p>项目地址：<a href="https://github.com/flymysql/flybook" target="_blank">Flybook</a></p><h3><span style="font-weight: bold;">安装</span></h3><pre class="hljs php"><code>git <span class="hljs-keyword">clone</span> https:<span class="hljs-comment">//github.com/flymysql/flybook.git</span></code></pre><p>进入项目文件夹文件夹后安装生产环境</p><pre class="hljs sql"><code>npm <span class="hljs-keyword">install</span></code></pre><p>或者使用cnpm安装</p><pre class="hljs sql"><code>cnpm <span class="hljs-keyword">install</span></code></pre><p><br></p><h3>运行</h3><p>使用pm2进程守护</p><pre class="hljs"><code>npm run pmstart</code></pre><p>如果要停止项目</p><pre class="hljs"><code>npm run pmstop</code></pre><p>如果要重启项目</p><pre class="hljs"><code>npm run pmrestart</code></pre><p>启动项目后访问服务器地址的3000端口便可以看到页面</p><p><br></p><h3>更新升级</h3><div>由于博客还在开发阶段，每天都会有大量更新和改动</div><div>所以写了个升级脚步，用于本地更新</div><pre class="hljs sql"><code>npm run <span class="hljs-keyword">update</span></code></pre><div><br></div><div>更新之后可以重启站点</div><pre class="hljs"><code>npm run pmrestart</code></pre><div><br></div><h3>配置域名</h3><p><span style="font-weight: bold;">使用nginx反向代理</span></p><p>安装nginx，安装方法自行百度</p><p>配置nginx配置文件</p><ol><li>配置Nginx，使得访问<code>域名</code>时候转到<code>http://localhost:3000</code>处理请求，配置文件如下，记得把域名改成自己的:</li></ol><div><br></div><div><pre class="hljs bash"><code>server {<br>listen 80;<br>server_name me.idealli.com;<br>location / {<br>    proxy_pass http://localhost:3000;<br>    proxy_http_version 1.1;<br>    proxy_set_header Upgrade <span class="hljs-variable"><span class="hljs-variable">$http_upgrade</span></span>;<br>    proxy_set_header Connection <span class="hljs-string"><span class="hljs-string">"upgrade"</span></span>;<br>    proxy_set_header Host <span class="hljs-variable"><span class="hljs-variable">$host</span></span>;<br>    proxy_cache_bypass <span class="hljs-variable"><span class="hljs-variable">$http_upgrade</span></span>;<br>}<br>error_page 500 502 503 504 /50x.html;<br>        location = /50x.html {<br>        root /usr/share/nginx/html;<br>    }<br>}</code></pre></div><p>配置后重启Nginx，<code>service nginx restart</code>。</p><p>当然，还有个最简单的方法是让应用监听80端口，前提是你的服务器没有其他网站在运行。修改端口在项目的/bin/www文件下</p><p><br></p><h2><span style="font-weight: bold;"></span>主题自定义</h2><p>博客的主题文件放在view文件夹下，通过修改view文件夹下面的pug模板可以轻松地修改博客主题。css文件放在<span style="background-color: rgb(238, 236, 224);">public/stylesheets</span>文件夹下，修改主题时请认准相应模板的css文件（博客页面的css文件是独立的，比如index页面有index.css，而post页面有对应的post.css）</p><h3>自定义服务的的页面渲染</h3><p>当然也可以对自己修改页面的渲染代码，看半天node的文档基本上就会改了。页面渲染的代码在/server/mysql文件夹下，不同的渲染文件对应不同的页面渲染（大部分渲染函数都在post.js文件里）</p><h2>后续计划</h2><p>还有挺多功能没实现，一周的课余时间搭这一个博客站点学到了挺多东西，后面再继续折腾。</p><p><span style="font-weight: bold;">计划</span></p><ol><li>把文章单标签模式换成一篇文章多标签的模式</li><li>自定义页面的渲染模板和文章渲染模板分离开</li><li>更好的文章编辑器</li><li>各个设备的自适应</li><li>添加游客投稿功能</li><li>独立的评论系统</li></ol><p><br></p><p><br></p></div><p><br></p></div><p><br></p></div><p><br></p></div><p><br></p>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/d3f1788e3#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>hexo建站笔记——带图标的标签云</title>
                <link>https://me.idealli.com/post/eccf2c93.html</link>
                <guid>https://me.idealli.com/post/eccf2c93.html</guid>
                <pubDate>2019-5-7</pubDate>
                <description>
                
最近闲着没事看到掘金的网站标签带有icon图标，想着自己也搞一个。想到的实现方法很简单，也有很多种，比如像之前做彩色标签云一样用页面脚本在加载的时候修改标签云dom并且添加相应节点。
不过考虑到这样回影响页面渲染效率，还是应该在hexo引
                </description>
                <content:encoded>
                <![CDATA[<div class="post-body" itemprop="articleBody">
<p>最近闲着没事看到掘金的网站标签带有icon图标，想着自己也搞一个。想到的实现方法很简单，也有很多种，比如像之前做彩色标签云一样用页面脚本在加载的时候修改标签云dom并且添加相应节点。</p>
<p>不过考虑到这样回影响页面渲染效率，还是应该在hexo引擎本地渲染的时候就把标签云的icon节点渲染好。这时候我去看标签云的生成函数，有一个<code>tagcloud</code>函数，应该就是生成标签云的主函数，于是在<code>node_modules</code>文件中找到<code>tagcloud.js</code>文件，进行简单的修改。</p>
<a id="more"></a>
<h2 id="效果"><a class="header-anchor" href="#效果">¶</a>效果</h2>
<p>先展示修改后的效果，这是放在主页的效果</p>
<p><img alt="" src="https://image.idealli.com/blog/2019050701.png"/></p>
<p>这是放在文章评论栏上方的</p>
<p><img alt="" src="https://image.idealli.com/blog/2019050702.png"/></p>
<h2 id="如何实现"><a class="header-anchor" href="#如何实现">¶</a>如何实现</h2>
<h3 id="前期准备"><a class="header-anchor" href="#前期准备">¶</a>前期准备</h3>
<p>一个存储标签图标的文件夹和一堆<strong>与标签名字相同的图标图片</strong>，并且这些图片应该有统一的后缀名，比如统一为jpg格式的图片，或者统一为png格式的图片。（我这里用的是png格式，如果不同请做相应更改）</p>
<p>如果想要方便的话，建议把图标直接都放在主题的<code>images</code>文件夹下。放在其他地方需要做相应改动，后面会提到。</p>
<h3 id="修改tagcloud-js文件"><a class="header-anchor" href="#修改tagcloud-js文件">¶</a>修改tagcloud.js文件</h3>
<p>找到我刚说的<code>tagcloud.js</code>文件，在<code>tagcloudHelper</code>这个函数中定位到<code>tags.forEach</code>这个循环体。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tags.forEach(<span class="function"><span class="params">tag</span> =&gt;</span> {</span><br/><span class="line">  <span class="keyword">const</span> ratio = length ? sizes.indexOf(tag.length) / length : <span class="number">0</span>;</span><br/><span class="line">  <span class="keyword">const</span> size = min + ((max - min) * ratio);</span><br/><span class="line">  <span class="keyword">let</span> style = <span class="string">`font-size: <span class="subst">${<span class="built_in">parseFloat</span>(size.toFixed(<span class="number">2</span>))}</span><span class="subst">${unit}</span>;`</span>;</span><br/><span class="line"></span><br/><span class="line">  <span class="keyword">if</span> (color) {</span><br/><span class="line">    <span class="keyword">const</span> midColor = startColor.mix(endColor, ratio);</span><br/><span class="line">    style += <span class="string">` color: <span class="subst">${midColor.toString()}</span>`</span>;</span><br/><span class="line">  }</span><br/><span class="line">result.push(</span><br/><span class="line">  <span class="string">`&lt;a href="<span class="subst">${self.url_for(tag.path)}</span>" style="<span class="subst">${style}</span>"&gt;<span class="subst">${transform ? transform(tag.name) : tag.name}</span>&lt;/a&gt;`</span></span><br/><span class="line">  );</span><br/><span class="line">});</span><br/></pre></td></tr></table></figure>
<p>找到其中的这个<code>push</code>语句。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">result.push(</span><br/><span class="line">  <span class="string">`&lt;a href="<span class="subst">${self.url_for(tag.path)}</span>" style="<span class="subst">${style}</span>"&gt;<span class="subst">${transform ? transform(tag.name) : tag.name}</span>&lt;/a&gt;`</span></span><br/><span class="line">  );</span><br/></pre></td></tr></table></figure>
<p>修改为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">result.push(</span><br/><span class="line">  <span class="string">`&lt;a href="<span class="subst">${self.url_for(tag.path)}</span>" style="<span class="subst">${style}</span>"&gt;&lt;div class="tag_img" style="background-image:url(/images/<span class="subst">${transform ? transform(tag.name) : tag.name}</span>.png);"&gt;&lt;/div&gt;<span class="subst">${transform ? transform(tag.name) : tag.name}</span>&lt;/a&gt;`</span></span><br/><span class="line">);</span><br/></pre></td></tr></table></figure>
<p><strong>重要的地方</strong></p>
<ol>
<li>
<p>如果你存放图标的位置不在<code>images</code>文件夹或者你存储在别的域名下，将上面修改的语句中，我的文件夹位置<code>images</code>修改为你的存储标签图标的文件夹位置</p>
</li>
<li>
<p>如果图片后缀不为png格式，将上面的png后缀改为你的图片的后缀</p>
</li>
</ol>
<h3 id="修改css文件"><a class="header-anchor" href="#修改css文件">¶</a>修改css文件</h3>
<p>我们的标签云原来的css样式可能会有所不同，显示出来的效果也会不同，这里写一下我自己的css配置，你可以根据个人喜好自行修改.</p>
<p>因为我的主题是基于next修改的，所以可以在**themes
extsourcecss\_custom**文件夹下的<code>custom.styl</code>文件添加相应样式，如果你没有这个文件，可以找一下自己主题的主css文件在哪，并进行修改。</p>
<p><strong>添加样式内容如下</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tag-cloud</span> <span class="selector-tag">a</span>{</span><br/><span class="line">  <span class="attribute">border-radius</span>:<span class="number">4px</span>;</span><br/><span class="line">  <span class="attribute">padding-right</span>:<span class="number">5px</span>;</span><br/><span class="line">  <span class="attribute">padding-left</span>:<span class="number">2px</span>;</span><br/><span class="line">  <span class="attribute">margin-right</span>:<span class="number">3px</span>;</span><br/><span class="line">  <span class="attribute">margin-left</span>:<span class="number">0</span>;</span><br/><span class="line">  <span class="attribute">color</span>:<span class="number">#555</span>;</span><br/><span class="line">  <span class="attribute">margin-top</span>:<span class="number">8px</span>;</span><br/><span class="line">  <span class="attribute">margin-bottom</span>:<span class="number">0</span>;</span><br/><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(245, 247, 241);</span><br/><span class="line">  <span class="attribute">border</span>:none;</span><br/><span class="line">  }</span><br/><span class="line"><span class="selector-class">.tag-cloud</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>{</span><br/><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br/><span class="line">  <span class="attribute">border</span>: none;</span><br/><span class="line">  }</span><br/><span class="line"></span><br/><span class="line"><span class="selector-class">.tag-cloud-tags</span>{<span class="attribute">text-align</span>:left;<span class="attribute">counter-reset</span>:tags}</span><br/><span class="line"></span><br/><span class="line"><span class="selector-class">.tag_img</span>{</span><br/><span class="line"> <span class="attribute">background-size</span>: contain; </span><br/><span class="line"> <span class="attribute">width</span>:<span class="number">24px</span>;<span class="attribute">height</span>:<span class="number">24px</span>;</span><br/><span class="line"> <span class="attribute">margin-right</span>: <span class="number">3px</span>;<span class="attribute">position</span>: relative;</span><br/><span class="line"> <span class="attribute">top</span>: <span class="number">5px</span>;<span class="attribute">background-repeat</span>: no-repeat;</span><br/><span class="line"> <span class="attribute">display</span>: inline-block;</span><br/><span class="line"> <span class="attribute">background-position-x</span>: center;</span><br/><span class="line"> <span class="attribute">background-position-y</span>: center;</span><br/><span class="line">}</span><br/></pre></td></tr></table></figure>
<p>如果样式不合口味，可以自行更改。<br/>
如果图标没有显示出来，请在浏览器页面按F12自行检查</p>
<h2 id="写在后面"><a class="header-anchor" href="#写在后面">¶</a>写在后面</h2>
<p>其实修改很简单，如果按上面步骤没法修改成功，你也可以按照我的思路自己根据实际情况进行修改。</p>
<ol>
<li>准备好各个标签图标（我是直接从掘金网站拷下来的）</li>
<li>在<code>tagcloud.js</code>文件中修改渲染标签的函数，在渲染<code>&lt;a&gt;</code>节点时，在其中添加一个<code>&lt;div&gt;</code>，标签，并且设置背景图片为你的图标。</li>
<li>修改主题css文件，对标签云的css样式做相应调整。</li>
</ol>
<blockquote>
<p>世上无难事，只要肯折腾哈哈。<br/>
感觉自己已经把next主题魔改地越来越偏离原主题了<br/>
什么时候看人多了，整理一下把自己的主题打包发出来</p>
</blockquote>
</div>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/eccf2c93.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>给hexo静态博客添加动态相册功能</title>
                <link>https://me.idealli.com/post/73ad4183.html</link>
                <guid>https://me.idealli.com/post/73ad4183.html</guid>
                <pubDate>2019-5-7</pubDate>
                <description>
                

昨天突发奇想给博客写了个相册页面，使用腾讯云cos作为相册的存储桶，使用api在线获取相册里面的存储桶里的照片并且实时生成相册内容。之前也有看过一些人做的相册页面，但是对于我来说，还是感觉不方便。网上的大多是在本地项目文件夹存放照片，然
                </description>
                <content:encoded>
                <![CDATA[<div class="post-body" itemprop="articleBody">
<p><img alt="兰州小红鸡" src="https://image.idealli.com/blog/18122304.jpg"/></p>
<p>昨天突发奇想给博客写了个相册页面，使用腾讯云cos作为相册的存储桶，使用api在线获取相册里面的存储桶里的照片并且实时生成相册内容。之前也有看过一些人做的相册页面，但是对于我来说，还是感觉不方便。网上的大多是在本地项目文件夹存放照片，然后更改一系列的主题文件来实现相册页面。</p>
<p>比如这位制作的<a href="https://blog.dongleizhang.com/posts/3720dafc/" rel="noopener" target="_blank">Hexo NexT 博客增加瀑布流相册页面</a>，然而他做的过程已经算是比较简洁了，没有改动太多主题配置。但是这种相册，每次添加新照片的时候，还是需要手动在相册页面添加相应的图片链接与代码。</p>
<p>所以我想能不能做一个直接后台上传图片，不用再改动代码的静态博客的相册页面呢，就像一个动态博客一样，或者像qq相册那样，只需要上传照片就可以了。</p>
<a id="more"></a>
<p>答案是可以的，机智的我使用了腾讯云的cos存储桶作为相册后台，调用cos存储桶的xml文件api在线获取图片链接，再使用JavaScript代码动态生成相册内容。</p>
<a class="LinkCard" href="https://me.idealli.com/photos/" target="_blank">
兰州小红鸡的博客相册
</a>
<p><strong>效果如下</strong></p>
<p>前方轻微秀恩爱预警</p>
<p><img alt="" src="https://image.idealli.com/blog/2019050708.png"/></p>
<p><img alt="" src="https://image.idealli.com/blog/2019050706.png"/></p>
<p><img alt="" src="https://image.idealli.com/blog/2019050707.png"/></p>
<p><img alt="" src="https://image.idealli.com/blog/2019050705.png"/></p>
<blockquote>
<p><strong>2019-05-07更新</strong><br/>
之前写的这篇教程没想到有这么多朋友采纳<br/>
不过教程也确实有很多问题<br/>
之前写的比较粗糙，让朋友们遇到各种麻烦<br/>
现在更新一下<br/>
写一下我能想到的各种bug的解决方法</p>
</blockquote>
<p>步骤如下：</p>
<h2 id="创建腾讯云cos存储桶"><a class="header-anchor" href="#创建腾讯云cos存储桶">¶</a>创建腾讯云cos存储桶</h2>
<p>这个比较简单，搜索腾讯云，注册账号登陆，在云产品中选择对象存储，新建一个存储桶。就OK了。</p>
<p><img alt="兰州小红鸡" src="https://image.idealli.com/blog/18122202.jpg"/></p>
<h3 id="跨域访问cors设置"><a class="header-anchor" href="#跨域访问cors设置">¶</a>跨域访问cors设置</h3>
<p>在基础配置中找到cors设置</p>
<p><img alt="兰州小红鸡" src="https://image.idealli.com/blog/18122201.jpg"/></p>
<p>操作选择GET，来源Origin填写你的域名，带http或者https，其他默认不要填，如下图</p>
<p><img alt="兰州小红鸡" src="https://image.idealli.com/blog/18122203.jpg"/></p>
<p><strong>注意</strong>：如果填了域名还是遇到跨域问题，那么就把<code>origin</code>源填为<code>*</code>，比如下面这样（其实刚开始弄的话建议都填成<code>*</code>好了）</p>
<p><img alt="" src="https://image.idealli.com/blog/2019050703.png"/></p>
<h3 id="读写权限"><a class="header-anchor" href="#读写权限">¶</a>读写权限</h3>
<p>一般情况下默认是共有读私有写，policy权限就不要设置了</p>
<p><img alt="" src="https://image.idealli.com/blog/2019050704.png"/></p>
<h3 id="访问域名"><a class="header-anchor" href="#访问域名">¶</a>访问域名</h3>
<p>然后记住这个地方<strong>访问域名</strong>，这里就是我们动态生成相册，获取链接时需要用到的xml链接，下面要用到</p>
<p><img alt="兰州小红鸡" src="https://image.idealli.com/blog/18122204.jpg"/></p>
<p>复制这个访问域名，看能不能在浏览器中打开，如果可以打开并且没有显示error节点，那么就可以继续下面的操作，否则查看上面哪一步出错并进行改正</p>
<h3 id="上传照片"><a class="header-anchor" href="#上传照片">¶</a>上传照片</h3>
<p>上传照片方式有很多（推荐用coscmd命令行写个脚本），不过这里教程中你就直接上腾讯云后台上传就好了，想要其他骚操作等相册做好了再自己百度吧。</p>
<p><strong>重要事项</strong></p>
<ol>
<li>上传照片前，先在存储桶中建立一个文件夹，也就是你的相册名字，当然你也可以新建多个文件夹。</li>
<li>但是有一点需要需要注意的是，<strong>不能直接上传一个文件夹</strong>，那样会出bug，见完文件夹后往里面上传照片，文件夹里面不能再新建文件夹了（除非你自己改造下面的相应代码）</li>
<li>每个文件中需要一张命名为<strong>封面</strong>的图片，它会作为你的该文件夹相册的封面</li>
</ol>
<p>然后就ok了</p>
<h2 id="hexo本地配置"><a class="header-anchor" href="#hexo本地配置">¶</a>hexo本地配置</h2>
<p>在本地项目新建一个相册页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new page photos</span><br/></pre></td></tr></table></figure>
<p class="note">
	19-01-15更新：将照片地展示分不同相册加载
</p>
<p>编辑sourcephotos路径下的<code>index.md</code>文件，写入以下代码</p>
<p class="wran">记得在下面的代码中填写xmllink的值，也就是上面提到的你的存储桶访问域名</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br/><span class="line"><span class="css">	<span class="selector-class">.main-inner</span>{</span></span><br/><span class="line"><span class="undefined">		width: 100%;</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="css">	<span class="selector-class">.main</span> {</span></span><br/><span class="line"><span class="undefined">    padding-bottom: 150px;</span></span><br/><span class="line"><span class="undefined">    margin-top: 0px;</span></span><br/><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#121212</span>;</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="css">	<span class="selector-class">.main-inner</span>{</span></span><br/><span class="line"><span class="undefined">		margin-top: unset;</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="css">	<span class="selector-class">.page-post-detail</span> <span class="selector-class">.post-meta</span>{</span></span><br/><span class="line"><span class="undefined">		display: none;</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="undefined">	body {</span></span><br/><span class="line"><span class="undefined">		background-image: unset;</span></span><br/><span class="line"><span class="undefined">		background-attachment: unset;</span></span><br/><span class="line"><span class="undefined">		background-size: 100%;</span></span><br/><span class="line"><span class="css">		<span class="comment">/*background-position: top left;*/</span></span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="css">	<span class="selector-class">.header</span>{</span></span><br/><span class="line"><span class="css">		<span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(28, 25, 25, 0<span class="selector-class">.6</span>);</span></span><br/><span class="line"><span class="undefined">		border-bottom: unset;</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="css">	<span class="selector-class">.menu</span> <span class="selector-class">.menu-item</span> <span class="selector-tag">a</span>{</span></span><br/><span class="line"><span class="undefined">		    font-weight: 300;</span></span><br/><span class="line"><span class="css">    		<span class="selector-tag">color</span>: <span class="selector-id">#e6eaed</span>;</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="css">	<span class="selector-class">.imgbox</span>{</span></span><br/><span class="line"><span class="undefined">	 width: 100%;</span></span><br/><span class="line"><span class="undefined">	 overflow: hidden;</span></span><br/><span class="line"><span class="undefined">	 height: 250px;</span></span><br/><span class="line"><span class="css">	 <span class="selector-tag">border-right</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#bcbcbc</span>;</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="css">	<span class="selector-class">.box</span>{</span></span><br/><span class="line"><span class="undefined">		visibility: visible;</span></span><br/><span class="line"><span class="undefined">		overflow: auto; </span></span><br/><span class="line"><span class="undefined">		zoom: 1;</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="css">	<span class="selector-class">.box</span> <span class="selector-tag">li</span>{</span></span><br/><span class="line"><span class="undefined">	float: left;</span></span><br/><span class="line"><span class="undefined">    width: 25%;</span></span><br/><span class="line"><span class="undefined">    position: relative;</span></span><br/><span class="line"><span class="undefined">    overflow: hidden;</span></span><br/><span class="line"><span class="undefined">    text-align: center;</span></span><br/><span class="line"><span class="undefined">    list-style: none;</span></span><br/><span class="line"><span class="undefined">    margin: 0;</span></span><br/><span class="line"><span class="css">    <span class="comment">/*display: inline;*/</span></span></span><br/><span class="line"><span class="undefined">    padding: 0;</span></span><br/><span class="line"><span class="undefined">    height: 360px;</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="css">	<span class="selector-class">.box</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>{</span></span><br/><span class="line"><span class="undefined">	display: block;</span></span><br/><span class="line"><span class="undefined">    padding: 4% 7% 10% 7%;</span></span><br/><span class="line"><span class="undefined">    min-height: 80px;</span></span><br/><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br/><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br/><span class="line"><span class="undefined">    font-size: 16px;</span></span><br/><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#121212</span>;</span></span><br/><span class="line"><span class="undefined">    font-weight: 600;</span></span><br/><span class="line"><span class="undefined">    line-height: 26px;</span></span><br/><span class="line"><span class="undefined">    -webkit-box-sizing: border-box;</span></span><br/><span class="line"><span class="undefined">    box-sizing: border-box;</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="css">	<span class="selector-tag">img</span><span class="selector-class">.imgitem</span>{</span></span><br/><span class="line"><span class="undefined">		padding: unset;</span></span><br/><span class="line"><span class="undefined">		padding: unset;</span></span><br/><span class="line"><span class="undefined">		border: unset;</span></span><br/><span class="line"><span class="undefined">		position: relative;</span></span><br/><span class="line"><span class="undefined">		padding: 0px;</span></span><br/><span class="line"><span class="undefined">		height: auto;</span></span><br/><span class="line"><span class="undefined">		width: 100%;</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-id">#posts</span><span class="selector-class">.posts-expand</span> {</span></span><br/><span class="line"><span class="undefined">    border: unset;</span></span><br/><span class="line"><span class="undefined">    padding: unset;</span></span><br/><span class="line"><span class="undefined">    margin-bottom: 10px;</span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="css"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-body</span> <span class="selector-tag">img</span>{</span></span><br/><span class="line"><span class="undefined">	padding: 0px !important;</span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="css"><span class="selector-class">.box</span> <span class="selector-tag">p</span>{</span></span><br/><span class="line"><span class="undefined">	display: block;</span></span><br/><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#121212</span>;</span></span><br/><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br/><span class="line"><span class="undefined">    font-size: 12px;</span></span><br/><span class="line"><span class="undefined">    font-family: SwisMedium;</span></span><br/><span class="line"><span class="undefined">    -webkit-box-sizing: border-box;</span></span><br/><span class="line"><span class="undefined">    box-sizing: border-box;</span></span><br/><span class="line"><span class="undefined">    text-align: center;</span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="css"><span class="selector-class">.box</span> <span class="selector-tag">span</span> <span class="selector-tag">strong</span>{</span></span><br/><span class="line"><span class="css">	<span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.4</span>);</span></span><br/><span class="line"><span class="undefined">	padding: 20px;</span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="css"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-title</span> {</span></span><br/><span class="line"><span class="undefined">	display: none;</span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="css"><span class="selector-class">.title</span>{</span></span><br/><span class="line"><span class="undefined">    display: inline-block;</span></span><br/><span class="line"><span class="undefined">    vertical-align: middle;</span></span><br/><span class="line"><span class="undefined">    background: url(https://image.idealli.com/bg11.jpg);</span></span><br/><span class="line"><span class="undefined">    font: 85px/250px ChaletComprimeMilanSixty;</span></span><br/><span class="line"><span class="undefined">    background-position: left bottom !important;</span></span><br/><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br/><span class="line"><span class="undefined">    background-size: 100% auto !important; </span></span><br/><span class="line"><span class="undefined">	-webkit-background-size: cover; </span></span><br/><span class="line"><span class="undefined">	-moz-background-size: cover;</span></span><br/><span class="line"><span class="undefined">	-o-background-size: cover;</span></span><br/><span class="line"><span class="undefined">    width: 100%;</span></span><br/><span class="line"><span class="undefined">    text-align: center;</span></span><br/><span class="line"><span class="undefined">    border: unset;</span></span><br/><span class="line"><span class="undefined">    height: 700px;</span></span><br/><span class="line"><span class="undefined">    cursor: unset !important;</span></span><br/><span class="line"><span class="undefined">    -webkit-box-sizing: border-box;</span></span><br/><span class="line"><span class="undefined">    box-sizing: border-box;</span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="css"><span class="selector-class">.btn-more-posts</span>{</span></span><br/><span class="line"><span class="undefined">	display: inline-block;</span></span><br/><span class="line"><span class="undefined">    vertical-align: middle;</span></span><br/><span class="line"><span class="undefined">    font: 85px/250px ChaletComprimeMilanSixty;</span></span><br/><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#000</span>;</span></span><br/><span class="line"><span class="undefined">    width: 100%;</span></span><br/><span class="line"><span class="undefined">    text-align: center;</span></span><br/><span class="line"><span class="undefined">    border: unset;</span></span><br/><span class="line"><span class="undefined">    height: 400px;</span></span><br/><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#121212</span>;</span></span><br/><span class="line"><span class="undefined">    -webkit-box-sizing: border-box;</span></span><br/><span class="line"><span class="undefined">    box-sizing: border-box;</span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="css">@<span class="keyword">media</span> (max-width: <span class="number">767px</span>){</span></span><br/><span class="line"><span class="css">	<span class="selector-class">.box</span> <span class="selector-tag">li</span> {</span></span><br/><span class="line"><span class="undefined">    width: 100%;</span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="css"><span class="selector-class">.title</span> {</span></span><br/><span class="line"><span class="undefined">    height: 200px;</span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="css"><span class="selector-class">.box</span> <span class="selector-tag">span</span> {</span></span><br/><span class="line"><span class="undefined">    min-height: 80px;</span></span><br/><span class="line"><span class="undefined">    border-right: unset;</span></span><br/><span class="line"><span class="undefined">    font-size: 17px;</span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="css"><span class="selector-class">.box</span> <span class="selector-tag">p</span>{</span></span><br/><span class="line"><span class="undefined">    border-right: unset;</span></span><br/><span class="line"><span class="undefined">    font-size: 12px;</span></span><br/><span class="line"><span class="undefined">  </span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="css"><span class="selector-class">.posts-expand</span> {</span></span><br/><span class="line"><span class="undefined">    margin: unset;</span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="css">	<span class="selector-tag">div</span><span class="selector-id">#comments</span><span class="selector-class">.comments</span><span class="selector-class">.v</span> {</span></span><br/><span class="line"><span class="undefined">    width: 96%;</span></span><br/><span class="line"><span class="undefined">    padding-top: 50px;</span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="css">@<span class="keyword">media</span> (min-width: <span class="number">1600px</span>){</span></span><br/><span class="line"><span class="css">	<span class="selector-class">.container</span> <span class="selector-class">.main-inner</span>{</span></span><br/><span class="line"><span class="undefined">		width: 100%;</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="css"><span class="selector-class">.footer</span>{</span></span><br/><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#121212</span> !<span class="selector-tag">important</span>;</span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="css"><span class="selector-class">.v</span> * {</span></span><br/><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#f4f4f4</span> !<span class="selector-tag">important</span>;</span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="css"><span class="selector-class">.v</span> <span class="selector-class">.vwrap</span> <span class="selector-class">.vmark</span> <span class="selector-class">.valert</span> <span class="selector-class">.vcode</span> {</span></span><br/><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#00050b</span> !<span class="selector-tag">important</span>;</span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br/><span class="line"></span><br/><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br/><span class="line"></span><br/><span class="line"></span><br/><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params">xmlUrl</span>) </span></span></span><br/><span class="line"><span class="undefined">{</span></span><br/><span class="line"><span class="javascript">	<span class="keyword">try</span> <span class="comment">//Internet Explorer</span></span></span><br/><span class="line"><span class="undefined">	{</span></span><br/><span class="line"><span class="javascript">		xmlDoc=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLDOM"</span>);</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="javascript">	<span class="keyword">catch</span>(e)</span></span><br/><span class="line"><span class="undefined">	{</span></span><br/><span class="line"><span class="javascript">	  <span class="keyword">try</span> <span class="comment">//Firefox, Mozilla, Opera, etc.</span></span></span><br/><span class="line"><span class="undefined">	    {</span></span><br/><span class="line"><span class="javascript">		  xmlDoc=<span class="built_in">document</span>.implementation.createDocument(<span class="string">""</span>,<span class="string">""</span>,<span class="literal">null</span>);</span></span><br/><span class="line"><span class="undefined">	    }</span></span><br/><span class="line"><span class="javascript">	  <span class="keyword">catch</span>(e) {alert(e.message)}</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="undefined">	</span></span><br/><span class="line"><span class="javascript">	<span class="keyword">try</span> </span></span><br/><span class="line"><span class="undefined">	{</span></span><br/><span class="line"><span class="javascript">		  xmlDoc.async=<span class="literal">false</span>;</span></span><br/><span class="line"><span class="undefined">		  xmlDoc.load(xmlUrl);</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="javascript">	<span class="keyword">catch</span>(e) {</span></span><br/><span class="line"><span class="javascript">		<span class="keyword">try</span> <span class="comment">//Google Chrome  </span></span></span><br/><span class="line"><span class="undefined">		  {  </span></span><br/><span class="line"><span class="javascript">			<span class="keyword">var</span> chromeXml = <span class="keyword">new</span> XMLHttpRequest();</span></span><br/><span class="line"><span class="javascript">			chromeXml.open(<span class="string">"GET"</span>, xmlUrl, <span class="literal">false</span>);</span></span><br/><span class="line"><span class="javascript">			chromeXml.send(<span class="literal">null</span>);</span></span><br/><span class="line"><span class="undefined">			xmlDoc = chromeXml.responseXML.documentElement; 				</span></span><br/><span class="line"><span class="javascript">			<span class="comment">//alert(xmlDoc.childNodes[0].nodeName);</span></span></span><br/><span class="line"><span class="javascript">			<span class="comment">//return xmlDoc;    </span></span></span><br/><span class="line"><span class="undefined">		  }  </span></span><br/><span class="line"><span class="javascript">		  <span class="keyword">catch</span>(e)  </span></span><br/><span class="line"><span class="undefined">		  {  </span></span><br/><span class="line"><span class="undefined">			  alert(e.message)  </span></span><br/><span class="line"><span class="undefined">		  }  		  	</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="javascript">	<span class="keyword">return</span> xmlDoc; </span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="javascript"><span class="keyword">var</span> xmllink=<span class="string">"你的访问域名链接"</span></span></span><br/><span class="line"><span class="javascript"><span class="comment">//访问域名链接就是我上面提到的那个访问域名xml链接</span></span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="undefined">xmlDoc=loadXMLDoc(xmllink);</span></span><br/><span class="line"><span class="javascript"><span class="keyword">var</span> urls=xmlDoc.getElementsByTagName(<span class="string">Key</span>);</span></span><br/><span class="line"><span class="javascript"><span class="keyword">var</span> date=xmlDoc.getElementsByTagName(<span class="string">LastModified</span>);</span></span><br/><span class="line"><span class="javascript"><span class="keyword">var</span> wid=<span class="number">250</span>;</span></span><br/><span class="line"><span class="javascript"><span class="keyword">var</span> showNum=<span class="number">12</span>; <span class="comment">//每个相册一次展示多少照片</span></span></span><br/><span class="line"><span class="javascript"><span class="keyword">if</span> ((<span class="built_in">window</span>.innerWidth)&gt;<span class="number">1200</span>) {wid=(<span class="built_in">window</span>.innerWidth*<span class="number">3</span>)/<span class="number">18</span>;}</span></span><br/><span class="line"><span class="javascript"><span class="keyword">var</span> box=<span class="built_in">document</span>.getElementById(<span class="string">box</span>);</span></span><br/><span class="line"><span class="javascript"><span class="keyword">var</span> i=<span class="number">0</span>;</span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="javascript"><span class="keyword">var</span> content=<span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br/><span class="line"><span class="javascript"><span class="keyword">var</span> tmp=<span class="number">0</span>;</span></span><br/><span class="line"><span class="javascript"><span class="keyword">var</span> kkk=<span class="number">-1</span>;</span></span><br/><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>; t &lt; urls.length ; t++) {</span></span><br/><span class="line"><span class="javascript">	<span class="keyword">var</span> bucket=urls[t].innerHTML;</span></span><br/><span class="line"><span class="javascript">	<span class="keyword">var</span> length=bucket.indexOf(<span class="string">/</span>);</span></span><br/><span class="line"><span class="javascript">	<span class="keyword">if</span>(length===bucket.length<span class="number">-1</span>){</span></span><br/><span class="line"><span class="undefined">		kkk++;</span></span><br/><span class="line"><span class="javascript">		content[kkk]=<span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br/><span class="line"><span class="javascript">		content[kkk][<span class="number">0</span>]={<span class="string">url</span>:bucket,<span class="string">date</span>:date[t].innerHTML.substring(<span class="number">0</span>,<span class="number">10</span>)};</span></span><br/><span class="line"><span class="undefined">		tmp=1;</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="javascript">	<span class="keyword">else</span> {</span></span><br/><span class="line"><span class="javascript">		content[kkk][tmp++]={<span class="string">url</span>:bucket.substring(length+<span class="number">1</span>),<span class="string">date</span>:date[t].innerHTML.substring(<span class="number">0</span>,<span class="number">10</span>)};</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; content.length; i++) {</span></span><br/><span class="line"><span class="javascript">	<span class="keyword">var</span> conBox=<span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span></span><br/><span class="line"><span class="javascript">	conBox.id=<span class="string">conBox</span>+i;</span></span><br/><span class="line"><span class="undefined">	box.appendChild(conBox);</span></span><br/><span class="line"><span class="javascript">	<span class="keyword">var</span> item=<span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span></span><br/><span class="line"><span class="javascript">	<span class="keyword">var</span> title=content[i][<span class="number">0</span>].url;</span></span><br/><span class="line"><span class="xml">	item.innerHTML="<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">title</span> <span class="attr">style</span>=<span class="string">background:url(</span>"+<span class="attr">xmllink</span>+/+<span class="attr">title</span>+"封面<span class="attr">.jpg</span>"+");&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">display:inline;</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span> <span class="attr">style</span>=<span class="string">color:#f0f3f6;</span> &gt;</span>"+title.substring(0,title.length-1)+"<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span>";</span></span><br/><span class="line"><span class="undefined">	conBox.appendChild(item);</span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="javascript">	<span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; content[i].length &amp;&amp; j &lt; showNum+<span class="number">1</span>; j++) {</span></span><br/><span class="line"><span class="javascript">		<span class="keyword">var</span> con=content[i][j].url;</span></span><br/><span class="line"><span class="javascript">		<span class="keyword">var</span> item=<span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span></span><br/><span class="line"><span class="xml">		item.innerHTML="<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">imgbox</span> <span class="attr">id</span>=<span class="string">imgbox</span> <span class="attr">style</span>=<span class="string">height:</span>"+<span class="attr">wid</span>+"<span class="attr">px</span>;&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">imgitem</span> <span class="attr">src</span>=<span class="string">"+xmllink+/+title+con+"</span> <span class="attr">alt</span>=<span class="string">"+con+"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>"+con.substring(0,con.length-4)+"<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>上传于"+content[i][j].date+"<span class="tag">&lt;/<span class="name">p</span>&gt;</span>";</span></span><br/><span class="line"><span class="undefined">		conBox.appendChild(item);</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="javascript">	<span class="keyword">if</span>(content[i].length &gt; showNum){</span></span><br/><span class="line"><span class="javascript">		<span class="keyword">var</span> moreItem=<span class="built_in">document</span>.createElement(<span class="string">"button"</span>);</span></span><br/><span class="line"><span class="javascript">		moreItem.className=<span class="string">"btn-more-posts"</span>;</span></span><br/><span class="line"><span class="javascript">		moreItem.id=<span class="string">"more"</span>+i;</span></span><br/><span class="line"><span class="undefined">		moreItem.value=showNum+1;</span></span><br/><span class="line"><span class="javascript">		<span class="keyword">let</span> cur=i;</span></span><br/><span class="line"><span class="javascript">		moreItem.onclick= <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>{</span></span><br/><span class="line"><span class="javascript">			moreClick(<span class="keyword">this</span>,cur,content[cur],content[cur][<span class="number">0</span>].url);</span></span><br/><span class="line"><span class="undefined">		}</span></span><br/><span class="line"><span class="xml">		moreItem.innerHTML="<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">display:inline;</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span> <span class="attr">style</span>=<span class="string">color:#f0f3f6;</span>&gt;</span>加载更多<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>";</span></span><br/><span class="line"><span class="undefined">		conBox.appendChild(moreItem);</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">moreClick</span>(<span class="params">obj,cur,cont,title</span>)</span>{</span></span><br/><span class="line"><span class="javascript">	<span class="keyword">var</span> parent=obj.parentNode;</span></span><br/><span class="line"><span class="undefined">	parent.removeChild(obj);</span></span><br/><span class="line"><span class="javascript">	<span class="keyword">var</span> j=obj.value;</span></span><br/><span class="line"><span class="javascript">	<span class="keyword">var</span> begin=j;</span></span><br/><span class="line"><span class="javascript">	<span class="keyword">for</span> ( ; j &lt; cont.length &amp;&amp; j &lt; <span class="built_in">Number</span>(showNum) + <span class="built_in">Number</span>(begin); j++) {</span></span><br/><span class="line"><span class="javascript">		<span class="built_in">console</span>.log( <span class="built_in">Number</span>(showNum) + <span class="built_in">Number</span>(begin));</span></span><br/><span class="line"><span class="javascript">		<span class="keyword">var</span> con=cont[j].url;</span></span><br/><span class="line"><span class="javascript">		<span class="keyword">var</span> item=<span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span></span><br/><span class="line"><span class="xml">		item.innerHTML="<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">imgbox</span> <span class="attr">id</span>=<span class="string">imgbox</span> <span class="attr">style</span>=<span class="string">height:</span>"+<span class="attr">wid</span>+"<span class="attr">px</span>;&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">imgitem</span> <span class="attr">src</span>=<span class="string">"+xmllink+/+title+con+"</span> <span class="attr">alt</span>=<span class="string">"+con+"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>"+con.substring(0,con.length-4)+"<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>上传于"+cont[j].date+"<span class="tag">&lt;/<span class="name">p</span>&gt;</span>";</span></span><br/><span class="line"><span class="undefined">		parent.appendChild(item);</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="javascript">	<span class="keyword">if</span>(cont.length &gt; j){</span></span><br/><span class="line"><span class="undefined">		obj.value=j;</span></span><br/><span class="line"><span class="undefined">		parent.appendChild(obj);</span></span><br/><span class="line"><span class="undefined">	}</span></span><br/><span class="line"><span class="undefined">}</span></span><br/><span class="line"><span class="undefined"></span></span><br/><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br/></pre></td></tr></table></figure>
<p>然后刷新hexo渲染</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br/><span class="line">$ hexo d -g</span><br/></pre></td></tr></table></figure>
<p>再往cos存储桶里上传照片，就可以了！效果如下<br/>
重要的是以后更新照片都不用改动代码。往腾讯云cos上传照片就好了，而且腾讯云页提供了很多工具可以再本地命令行上传照片，非常方便，感兴趣可以自行百度。</p>
<p><img alt="兰州小红鸡" src="https://image.idealli.com/blog/18122205.jpg"/></p>
<p>嘻嘻女朋友真可爱！</p>
<p><img alt="兰州小红鸡" src="https://image.idealli.com/blog/18122206.jpg"/></p>
<h2 id="自己写界面样式"><a class="header-anchor" href="#自己写界面样式">¶</a>自己写界面样式</h2>
<p><strong>注意</strong></p>
<blockquote>
<p>以上教程是基于我自己的博客主题（next主题Mist样式）做的适配<br/>
所以可能会出现一些样式问题<br/>
强烈建议会前端的朋友自己写样式和逻辑代码，确保不会出错。<br/>
不会前端的朋友也可以学一学css自己改改，挺有趣的<br/>
另外都在搞这个了，应该也都会一点了<br/>
自己写css样式也不麻烦，一个小时就能把相册改造成自己喜欢的风格</p>
</blockquote>
<h3 id="代码核心"><a class="header-anchor" href="#代码核心">¶</a>代码核心</h3>
<p>上面的photo界面的核心代码是获取腾讯云xml文件的那段</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params">xmlUrl</span>) </span></span><br/><span class="line"><span class="function"></span>{</span><br/><span class="line">	<span class="keyword">try</span> <span class="comment">//Internet Explorer</span></span><br/><span class="line">	{</span><br/><span class="line">		xmlDoc=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLDOM"</span>);</span><br/><span class="line">	}</span><br/><span class="line">	<span class="keyword">catch</span>(e)</span><br/><span class="line">	{</span><br/><span class="line">	  <span class="keyword">try</span> <span class="comment">//Firefox, Mozilla, Opera, etc.</span></span><br/><span class="line">	    {</span><br/><span class="line">		  xmlDoc=<span class="built_in">document</span>.implementation.createDocument(<span class="string">""</span>,<span class="string">""</span>,<span class="literal">null</span>);</span><br/><span class="line">	    }</span><br/><span class="line">	  <span class="keyword">catch</span>(e) {alert(e.message)}</span><br/><span class="line">	}</span><br/><span class="line">	</span><br/><span class="line">	<span class="keyword">try</span> </span><br/><span class="line">	{</span><br/><span class="line">		  xmlDoc.async=<span class="literal">false</span>;</span><br/><span class="line">		  xmlDoc.load(xmlUrl);</span><br/><span class="line">	}</span><br/><span class="line">	<span class="keyword">catch</span>(e) {</span><br/><span class="line">		<span class="keyword">try</span> <span class="comment">//Google Chrome  </span></span><br/><span class="line">		  {  </span><br/><span class="line">			<span class="keyword">var</span> chromeXml = <span class="keyword">new</span> XMLHttpRequest();</span><br/><span class="line">			chromeXml.open(<span class="string">"GET"</span>, xmlUrl, <span class="literal">false</span>);</span><br/><span class="line">			chromeXml.send(<span class="literal">null</span>);</span><br/><span class="line">			xmlDoc = chromeXml.responseXML.documentElement; 				</span><br/><span class="line">			<span class="comment">//alert(xmlDoc.childNodes[0].nodeName);</span></span><br/><span class="line">			<span class="comment">//return xmlDoc;    </span></span><br/><span class="line">		  }  </span><br/><span class="line">		  <span class="keyword">catch</span>(e)  </span><br/><span class="line">		  {  </span><br/><span class="line">			  alert(e.message)  </span><br/><span class="line">		  }  		  	</span><br/><span class="line">	}</span><br/><span class="line">	<span class="keyword">return</span> xmlDoc; </span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="keyword">var</span> xmllink=<span class="string">"你的访问域名链接"</span></span><br/><span class="line"><span class="comment">//访问域名链接就是我上面提到的那个访问域名xml链接</span></span><br/><span class="line"></span><br/><span class="line">xmlDoc=loadXMLDoc(xmllink);</span><br/><span class="line"><span class="keyword">var</span> urls=xmlDoc.getElementsByTagName(<span class="string">Key</span>);</span><br/></pre></td></tr></table></figure>
<p><code>urls</code>便是获取了相册的所有链接，之后要做的事情就是用js动态生成img元素<br/>
我的是这样写的，当然你也可以使用别的写法，写适合自己风格的相册样式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> urls=xmlDoc.getElementsByTagName(<span class="string">Key</span>);</span><br/><span class="line"><span class="keyword">var</span> date=xmlDoc.getElementsByTagName(<span class="string">LastModified</span>);</span><br/><span class="line"><span class="keyword">var</span> wid=(<span class="built_in">window</span>.innerWidth*<span class="number">3</span>)/<span class="number">18</span>;</span><br/><span class="line"><span class="keyword">var</span> box=<span class="built_in">document</span>.getElementById(<span class="string">box</span>);</span><br/><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="keyword">for</span> ( ; i &lt; <span class="number">21</span> &amp;&amp; i&lt;urls.length; i++) {</span><br/><span class="line">	<span class="keyword">var</span> bucket=urls[i].innerHTML;</span><br/><span class="line">	<span class="keyword">var</span> length=bucket.indexOf(<span class="string">/</span>);</span><br/><span class="line">	<span class="keyword">if</span>(length===bucket.length<span class="number">-1</span>){</span><br/><span class="line">	<span class="keyword">var</span> item=<span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br/><span class="line">	item.innerHTML=<span class="string">"&lt;button class=btn-more-posts&gt;&lt;span style=display:inline;&gt;&lt;strong style=color:#f0f3f6; &gt;"</span>+bucket.substring(<span class="number">0</span>,length)+<span class="string">"&lt;/strong&gt;&lt;/span&gt;&lt;/button&gt;"</span>;</span><br/><span class="line">	box.appendChild(item);</span><br/><span class="line">	<span class="keyword">continue</span>;</span><br/><span class="line">	}</span><br/><span class="line"></span><br/><span class="line">	<span class="keyword">var</span> item=<span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br/><span class="line">	item.innerHTML=<span class="string">"&lt;div class=imgbox id=imgbox style=height:"</span>+wid+<span class="string">"px;&gt;&lt;img class=imgitem src="</span>+xmllink+<span class="string">/</span>+bucket+<span class="string">" &gt;&lt;/div&gt;&lt;span&gt;"</span>+bucket+<span class="string">"&lt;/span&gt;&lt;p&gt;"</span>+date[i].innerHTML.substring(<span class="number">0</span>,<span class="number">10</span>)+<span class="string">"&lt;/p&gt;"</span>;</span><br/><span class="line">	box.appendChild(item);</span><br/><span class="line"></span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="keyword">var</span> morep=<span class="built_in">document</span>.getElementById(<span class="string">more</span>);</span><br/><span class="line">morep.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br/><span class="line">	<span class="keyword">var</span> temp=i+<span class="number">20</span>;</span><br/><span class="line"></span><br/><span class="line">	<span class="keyword">for</span> ( ;  i &lt; temp &amp;&amp; i&lt;urls.length; i++) {</span><br/><span class="line">	<span class="keyword">var</span> bucket=urls[i].innerHTML;</span><br/><span class="line">	<span class="keyword">var</span> length=bucket.indexOf(<span class="string">/</span>);</span><br/><span class="line">	<span class="keyword">if</span>(length===bucket.length<span class="number">-1</span>){</span><br/><span class="line">	<span class="keyword">var</span> item=<span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br/><span class="line">	item.innerHTML=<span class="string">"&lt;button class=btn-more-posts&gt;&lt;span style=display:inline;&gt;&lt;strong style=color:#f0f3f6; &gt;"</span>+bucket.substring(<span class="number">0</span>,length)+<span class="string">"&lt;/strong&gt;&lt;/span&gt;&lt;/button&gt;"</span>;</span><br/><span class="line">	box.appendChild(item);</span><br/><span class="line">	<span class="keyword">continue</span>;</span><br/><span class="line">	}</span><br/><span class="line">		<span class="keyword">var</span> item=<span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br/><span class="line">		item.innerHTML=<span class="string">"&lt;div class=imgbox id=imgbox style=height:"</span>+wid+<span class="string">"px;&gt;&lt;img class=imgitem src="</span>+xmllink+<span class="string">/</span>+urls[i].innerHTML+<span class="string">" &gt;&lt;/div&gt;&lt;span&gt;"</span>+urls[i].innerHTML+<span class="string">"&lt;/span&gt;&lt;p&gt;"</span>+date[i].innerHTML.substring(<span class="number">0</span>,<span class="number">10</span>)+<span class="string">"&lt;/p&gt;"</span>;</span><br/><span class="line">	box.appendChild(item);</span><br/><span class="line"></span><br/><span class="line">	}</span><br/><span class="line">}</span><br/></pre></td></tr></table></figure>
<p>整个教程还是提供了一个思路，如果遇到问题了，请根据自己的实际情况进行<br/>
我的博客主题：Next主题Mist样式</p>
<p><strong>注意事项</strong></p>
<ol>
<li>上传照片前，先在存储桶中建立一个文件夹，也就是你的相册名字，当然你也可以新建多个文件夹。</li>
<li>但是有一点需要需要注意的是，<strong>不能直接上传一个文件夹</strong>，那样会出bug，见完文件夹后往里面上传照片，文件夹里面不能再新建文件夹了（除非你自己改造下面的相应代码）</li>
<li>每个文件中需要一张命名为<strong>封面</strong>的图片，它会作为你的该文件夹相册的封面</li>
<li>确保存储桶的xml域名能在浏览器上访问</li>
<li>暂时不要设置policy权限啥的，等你相册制作完了，如果怕照片被盗可以添加这些东西</li>
<li>尽量自己修改样式，不然肯定不好看（除非你的主题和我的一样）</li>
<li>css样式直接写在md文件中，不用写在全局里</li>
</ol>
<hr/>
<p class="note">
	下面是一些我的建站笔记汇总，平常做的小手工，希望对大家有帮助
</p>
<a class="LinkCard" href="https://me.idealli.com/post/e8d13fc.html" target="_blank">
hexo博客搭建以及next美化教程
</a>
<a class="LinkCard" href="https://me.idealli.com/post/ed80a662.html" target="_blank">
原生js实现网页图片点击展示效果
</a>
<a class="LinkCard" href="https://me.idealli.com/post/2d5da13e.html" target="_blank">
用回valine评论系统,valine评论框样式美化
</a>
<a class="LinkCard" href="https://me.idealli.com/post/73ad4183.html" target="_blank">
给hexo静态博客添加动态相册功能
</a>
<a class="LinkCard" href="https://me.idealli.com/post/6bf81741.html" target="_blank">
hexo建站笔记之首页文章轮播图
</a>
<a class="LinkCard" href="https://me.idealli.com/post/a714f04b.html" target="_blank">
模仿知乎的链接卡片
</a>
<a class="LinkCard" href="https://me.idealli.com/post/fb598031.html" target="_blank">
将公众号文章爬到hexo博客
</a>
<a class="LinkCard" href="https://me.idealli.com/post/1609338289.html" target="_blank">
使用腾讯云cdn加速博客
</a>
<a class="LinkCard" href="https://me.idealli.com/post/d6caa003.html" target="_blank">
hexo建站笔记之彩色标签云
</a>
<a class="LinkCard" href="https://me.idealli.com/post/eccf2c93.html" target="_blank">
hexo建站笔记之带图标的标签云
</a>
</div>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/73ad4183.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>五一小长假——武汉三日游</title>
                <link>https://me.idealli.com/post/a9670015.html</link>
                <guid>https://me.idealli.com/post/a9670015.html</guid>
                <pubDate>2019-5-5</pubDate>
                <description>
                
这个五一小长假和女朋友一起去了武汉。到处都是人人人人人人人人从从从从众众众众。。。
拍了些照片，放在博客相册里，顺便写个小游记记录一下。

¶飞机or火车？
机票买晚了，4月4号的时候买已经要五六百，舍不得花钱，决定去的时候买机票，回来的
                </description>
                <content:encoded>
                <![CDATA[<div class="post-body" itemprop="articleBody">
<p>这个五一小长假和女朋友一起去了武汉。到处都是人人人人人人人人从从从从众众众众。。。</p>
<p>拍了些照片，放在博客相册里，顺便写个小游记记录一下。</p>
<a id="more"></a>
<h3 id="飞机or火车？"><a class="header-anchor" href="#飞机or火车？">¶</a>飞机or火车？</h3>
<p>机票买晚了，4月4号的时候买已经要五六百，舍不得花钱，决定去的时候买机票，回来的时候买火车票。</p>
<p>其实后来想想，火车票也要380一张，加上当天晚上的住宿也要500+，而机票和酒店一起订有100优惠加起来也就600+，贵个100多，就买了机票。想起一年前一起去南京玩的时候，来回机票1400，这次还是比较省钱了。</p>
<p>等暑期去华为实习五个月就有点小存款了，再也不想过没有经济来源的生活了</p>
<h3 id="漫无目的的第一天"><a class="header-anchor" href="#漫无目的的第一天">¶</a>漫无目的的第一天</h3>
<p>由于之前我没做好攻略，由女朋友大概搜了下要去玩的几个地点，第一天安排的是武汉大学和光谷广场。</p>
<p>第一天早上醒来，两个人一起赖床赖到11点出门，去旁边的小吃街吃了串串。<strong>这家串串真的不错，好吃</strong>，然而我忘了叫什么名字。</p>
<p>?武汉大学</p>
<p>先是坐车去武汉大学，当时看地图有两个选择，地铁或者公交，我看地铁还要换乘，就决定坐公交。</p>
<p>之后的一个多小时我就在懊悔中度过，堵车。。。也太堵了，40分钟的路程走了1.5小时全程我都站着，中间由找到一个座位让女朋友坐着</p>
<p>到了武汉大学，从一个后门下车，走了几步，腿好酸，然后可能没到大学里面什么好看的地方，也可能是我们大学都看腻了，可能国内大学都差不多，当时的感觉就是“好无聊”。于是逛了十几分钟又出门找车准备去下个地方。</p>
<p>?光谷</p>
<p>我也不知道是不是我们去错地方了，还是这个地方本来就不好玩，又是感觉好无聊。</p>
<p>在地铁站的周黑鸭买了30块钱鸭脖子，10块钱鸭爪，10块钱鱿鱼，30块钱螃蟹腿，回酒店吃东西去，中途又买了半个西瓜。</p>
<p>好像第一天啥都没逛成，只有吃了。</p>
<h3 id="暴走的第二天"><a class="header-anchor" href="#暴走的第二天">¶</a>暴走的第二天</h3>
<p>吸取第一天的经验，我们第二天去各个小吃街。依然是赖床赖到11点出门，在粮道街吃了臭豆腐，炸排骨</p>
<p>?粮道街</p>
<p><img alt="" src="https://photos.idealli.com/%E6%AD%A6%E6%B1%89%E4%B8%89%E6%97%A5%E6%B8%B8/%E9%95%BF%E6%B2%99%E8%87%AD%E8%B1%86%E8%85%90.JPG"/></p>
<p><img alt="" src="https://photos.idealli.com/%E6%AD%A6%E6%B1%89%E4%B8%89%E6%97%A5%E6%B8%B8/%E5%90%83%E8%87%AD%E8%B1%86%E8%85%90%E7%9A%84%E9%93%B7%E8%90%8D.JPG"/></p>
<p>然后走着走着就到吃午饭的点了，走进一家湘菜馆，那个菜的量真的好足，感觉和东北菜有的一拼。</p>
<p>?户部巷</p>
<p>吃完饭又坐车去了户部巷，在那里呆了十几分钟就走了，人超级多，一条小巷子又太窄，被堵得水泄不通。</p>
<p>买了碗冰粉就溜了。</p>
<p>?昙华林</p>
<p>下午四点多又坐车去昙华林，然后又逛了个旁边不知名的大学，在他们操场坐着休息了一会儿。</p>
<p>又是一顿小吃美食</p>
<p>?长江大桥</p>
<p>人又超级多，排了半天队坐上电梯上了桥（其实也可以绕路直接上桥），不过长江两岸的夜景确实不错，也算是对得起排那么长的队伍了。</p>
<p><img alt="" src="https://photos.idealli.com/%E6%AD%A6%E6%B1%89%E4%B8%89%E6%97%A5%E6%B8%B8/%E9%95%BF%E6%B1%9F%E5%A4%9C%E6%99%AF.JPG"/></p>
<p><img alt="" src="https://photos.idealli.com/%E6%AD%A6%E6%B1%89%E4%B8%89%E6%97%A5%E6%B8%B8/%E5%B0%81%E9%9D%A2.jpg"/></p>
<p><img alt="" src="https://photos.idealli.com/%E6%AD%A6%E6%B1%89%E4%B8%89%E6%97%A5%E6%B8%B8/%E5%98%BB%E5%98%BB%E5%98%BB.JPG"/></p>
<h3 id="休闲第三天"><a class="header-anchor" href="#休闲第三天">¶</a>休闲第三天</h3>
<p>第三天就不知道该去哪里玩了，坐了一站地铁去了江汉路，感觉人多且没什么好玩的，又带着女朋友坐坐渡江船，因为她之前没坐过船。渡江的船和我回家的船相比还是小了点（我家在海岛上），但是长江的渡江船开的很稳，江面没什么风浪。甲板上人太多，没法想象中抱着女朋友倚靠在栏杆上吹风。。。</p>
<p>坐完船又去了毛泽东故居，逛到下午五点多去附近影院看《复仇者联盟4》</p>
<p>看完电影出来去了也是买夜宵准备回酒店吃。</p>
<blockquote>
<p>北京片皮鸭<br/>
西安凉面<br/>
烧烤摊的烤肉<br/>
啤酒<br/>
西瓜<br/>
…</p>
</blockquote>
<p>真是惬意哈哈哈</p>
<p>然后就回酒店看综艺节目吃夜宵喝啤酒</p>
<p><img alt="" src="https://photos.idealli.com/%E6%AD%A6%E6%B1%89%E4%B8%89%E6%97%A5%E6%B8%B8/%E5%A4%9C%E5%AE%B5party2.JPG"/></p>
<p><img alt="" src="https://photos.idealli.com/%E6%AD%A6%E6%B1%89%E4%B8%89%E6%97%A5%E6%B8%B8/%E5%8C%85%E7%89%87%E7%9A%AE%E9%B8%AD.JPG"/></p>
<h3 id="感受"><a class="header-anchor" href="#感受">¶</a>感受</h3>
<p>三天小长假很快乐，吃的很多，有可爱的小女友一起玩耍，一起恰夜宵，吃周黑鸭</p>
<p>希望我可以早点经济独立，有越来越多的钱，可以想吃什么吃什么想买什么买什么，想去哪里玩去哪里玩，想给女朋友什么就给什么。</p>
<p>加油！！！</p>
</div>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/a9670015.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>disqus评论系统被墙后设置代理实现墙内访问</title>
                <link>https://me.idealli.com/post/c7139a41.html</link>
                <guid>https://me.idealli.com/post/c7139a41.html</guid>
                <pubDate>2019-4-29</pubDate>
                <description>
                
缘起：前天把博客的评论搬到disqus后，电脑端一直访问正常，但是手机端一直显示不出评论，我以为是什么其他的原因，后来仔细一想，是我电脑端一直有开代理，可以访问外网，所以没问题。。。哎把这事给忘了，看来disqus是被墙的死死的了。网站找
                </description>
                <content:encoded>
                <![CDATA[<div class="post-body" itemprop="articleBody">
<p>缘起：前天把博客的评论搬到disqus后，电脑端一直访问正常，但是手机端一直显示不出评论，我以为是什么其他的原因，后来仔细一想，是我电脑端一直有开代理，可以访问外网，所以没问题。。。哎把这事给忘了，看来disqus是被墙的死死的了。网站找了一圈看有没有办法。</p>
<p>还好有大佬造好了轮子：<a href="https://github.com/fooleap/disqus-php-api" rel="noopener" target="_blank">disqusapi</a><br/>
不过总感觉大佬的教程还有一些网上其他的教程讲的不是很详细，踩了些坑后决定再写篇教程</p>
<a id="more"></a>
<p>首先最开始要说的是，这个代理的设置需要你有一台境外vps，如果你没有，或则不想花点小钱的话就不用看了，可以使用valine评论系统代替，我觉得也挺不错的。</p>
<p>如果还没有境外服务器，想买一台的话，推荐vultr厂商的服务器，因为他们最近在搞活动，新用户充值10美元送50美元，开一台低配服务器大概可以用一年。当然你有了服务器不只是可以做这个代理了，也可以做日常科学上网用，参考我这篇文章<a href="https://me.idealli.com/post/651cfd47.html">快速搭建ssr服务端</a></p>
<p><a href="https://www.vultr.com/?ref=7772625-4F" rel="noopener" target="_blank">vultr官网注册</a></p>
<p>如果你有境外服务器并且已经有网站搭在上面，可以跳过到源码下载那一步</p>
<h2 id="disqus-php-api后端的配置"><a class="header-anchor" href="#disqus-php-api后端的配置">¶</a>disqus-php-api后端的配置</h2>
<p>买好服务器后，便可以开始搭建disqus-php-api代理了</p>
<p>环境要求</p>
<ul>
<li>系统环境：CentOS 7</li>
<li>安装环境：lnmp，git</li>
</ul>
<p>这里推荐使用宝塔Linux界面，因为期间会安装其他的软件，用宝塔操作比较简单。</p>
<p>宝塔安装命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh</span><br/></pre></td></tr></table></figure>
<p>安装期间遇到问题可以看官网 <a href="https://www.bt.cn/download/linux.html" rel="noopener" target="_blank">宝塔安装教程</a></p>
<p>安装完之后，浏览器打开面板</p>
<p>第一次打开会让你选择安装哪个web环境，选择<code>lnmp</code>就好了。</p>
<h2 id="建立api的站点"><a class="header-anchor" href="#建立api的站点">¶</a>建立api的站点</h2>
<p>环境安装好之后，建立新的站点，点击左边栏的网站-&gt;添加站点</p>
<p><img alt="" src="https://image.idealli.com/blog/2019042901.png"/></p>
<p>将你的api域名解析到这里，我不知不用域名直接用ip行不行，没试过</p>
<h3 id="下载源码"><a class="header-anchor" href="#下载源码">¶</a>下载源码</h3>
<p>然后进入服务器终端，在新建的站点目录下下载大佬的源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd  /www/wwwroot/你的域名</span><br/><span class="line">git clone https://github.com/fooleap/disqus-php-api disqus</span><br/><span class="line">cd disqus</span><br/></pre></td></tr></table></figure>
<p>disqus目录下有个<code>api</code>目录，进入api目录修改里面的<code>config.php</code>文件，你可以在宝塔面板上操作，也可以在终端使用vim修改，都行。在宝塔面板上修改的话，点击网站目录即可进入。</p>
<p><img alt="" src="https://image.idealli.com/blog/2019042902.png"/></p>
<p>具体怎么修改，文件里面会有注释说明。这里简洁说一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改api目录下的config.php：</span></span><br/><span class="line">define(<span class="string">DISQUS_PUBKEY</span>, <span class="string">E8Uh5l5fHZ6gD8U3KycjAIAk46f68Zw7C6eW8WSjZvCLXebZ7p0r1yrYDrLilk2F</span>);</span><br/><span class="line">define(<span class="string">DISQUS_USERNAME</span>, <span class="string">your-username</span>);</span><br/><span class="line">define(<span class="string">DISQUS_EMAIL</span>, <span class="string">your-email@qq.com</span>);</span><br/><span class="line">define(<span class="string">DISQUS_PASSWORD</span>, <span class="string">your-disqus-password</span>);</span><br/><span class="line">define(<span class="string">DISQUS_WEBSITE</span>, <span class="string">your-website</span>);</span><br/><span class="line">define(<span class="string">DISQUS_SHORTNAME</span>, <span class="string">your-disqus-shortname</span>);</span><br/><span class="line">define(<span class="string">DISQUS_APPROVED</span>, <span class="keyword">true</span>);</span><br/></pre></td></tr></table></figure>
<ul>
<li>DISQUS_PUBKEY：Disqus公钥，无需修改。</li>
<li>DISQUS_USERNAME：Disqus注册用户名</li>
<li>DISQUS_EMAIL：Disqus注册邮箱</li>
<li>DISQUS_PASSWORD：Disqus密码</li>
<li>DISQUS_WEBSITE：网站域名（这里的域名是Hexo站点的域名，切记）,如：<a href="https://fiveplus.github.io" rel="noopener" target="_blank">https://fiveplus.github.io</a></li>
<li>DISQUS_SHORTNAME：网站在 Disqus 对应的 Shortname</li>
<li>DISQUS_APPROVED：评论是否免审核，true 即跳过评论预审核，false 则按后台设置。</li>
</ul>
<h3 id="disqus上的配置"><a class="header-anchor" href="#disqus上的配置">¶</a>disqus上的配置</h3>
<p>必须在 <a href="https://disqus.com/api/applications/" rel="noopener" target="_blank">Disqus API</a> 申请注册一个 applications，取得相关的公钥（API Key）、私钥（API Secret），并填写于后端的配置文件 config.php 中。</p>
<p>applications 设置方面，回调链接请填写 login.php 文件的绝对地址，主要的设置如下图，可根据自己情况填写。</p>
<p>Disqus API 相关设置</p>
<p><img alt="" src="https://camo.githubusercontent.com/dc93e7e8bdaa10947cc99599f33727fb52434726/68747470733a2f2f75706c6f6164732e64697371757363646e2e636f6d2f696d616765732f303133616130353930643364303931343038633036643364343262396532666131356436373331663663316532636666356338343935666532336232316538302e706e67"/></p>
<h3 id="跨域问题"><a class="header-anchor" href="#跨域问题">¶</a>跨域问题</h3>
<p>如果你的Hexo是使用GitHub部署的或者其他地方，和上面的disqus-php-api并不是放在一个域名下，那么会出现跨域问题。</p>
<p>将api文件夹下的init.php中设置Access-Control-Allow-Origin部分：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">(localhost|127.0.0.1|</span>.DISQUS_WEBSITE.<span class="string">)</span>, $origin)){</span><br/><span class="line">    header(<span class="string">Access-Control-Allow-Origin: </span>.$origin);</span><br/><span class="line">}</span><br/></pre></td></tr></table></figure>
<p>删除Access-Control-Allow-Origin的代码，替换以下的代码：</p>
<p>(其中，变量 allow_origin 是你要允许可以调用你后端的域名网址，也可以设置为*允许所有)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$allow_origin = <span class="keyword">array</span>(</span><br/><span class="line">    <span class="string">你的博客域名</span></span><br/><span class="line">);</span><br/><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">(localhost|</span>.$ipRegex.<span class="string">|</span>.domain(DISQUS_WEBSITE).<span class="string">)</span>, $origin, $allow_origin)){</span><br/><span class="line">    header(<span class="string">Access-Control-Allow-Origin: </span>.$origin);</span><br/><span class="line">}</span><br/></pre></td></tr></table></figure>
<p>如果上面的还是不行，那就设置为全域名访问</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">Access-Control-Allow-Origin: *</span>);</span><br/></pre></td></tr></table></figure>
<h3 id="没有权限的问题"><a class="header-anchor" href="#没有权限的问题">¶</a>没有权限的问题</h3>
<p>现在你在用域名全连接(<a href="http://xn--eqrt2g/disqus/api/login.php" rel="noopener" target="_blank">http://域名/disqus/api/login.php</a>)浏览器访问api文件夹里面的<code>login.php</code>试试，或许会遇到没有权限的问题</p>
<p>这是因为网站的文件夹对外界没有开放写的权限，可以在Linux终端下用命令给disqus文件夹加个<code>777权限</code>，也可以在宝塔面板操作。</p>
<p><img alt="" src="https://image.idealli.com/blog/2019042902.png"/></p>
<p>以上就是后端的操作了，可能还会踩到且坑，不过我遇到的就这些了，对了，还有https和http协议不同的话也会出问题，你的api域名使用的协议应该和博客域名相同，不然可能会有跨域问题。</p>
<h2 id="博客前端设置"><a class="header-anchor" href="#博客前端设置">¶</a>博客前端设置</h2>
<p>在主题配置文件_config.yml中添加disqus-php-api参数：<br/>
随便找个空地写入以下配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Disqus APi</span></span><br/><span class="line">disqusapi:</span><br/><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br/><span class="line">  forum: <span class="string">your-forum</span></span><br/><span class="line">  site: <span class="string">your-site</span></span><br/><span class="line">  api: <span class="string">https://yoursite.com/disqus/api</span></span><br/><span class="line">  mode: 2</span><br/><span class="line">  badge: <span class="string">博主</span></span><br/><span class="line">  timeout: 3000</span><br/></pre></td></tr></table></figure>
<ul>
<li>forum: Disqus的shortname</li>
<li>site: 网站域名（Hexo博客域名）//可以设置为空</li>
<li>api: PHP代码部署地址的api路径</li>
<li>mode:
<ol>
<li>检测能否访问 Disqus，若能则加载 Disqus 原生评论框，超时则加载简易评论框。</li>
<li>仅加载简易评论框。</li>
<li>同时加载两种评论框，先显示简易评论框，Disqus 加载完成则切换至 Disqus 评论框。</li>
</ol>
</li>
<li>badge: 管理员昵称</li>
<li>timeout: 当mode为1时的超时时间</li>
</ul>
<h3 id="添加disqus-api模块"><a class="header-anchor" href="#添加disqus-api模块">¶</a>添加disqus-api模块</h3>
<p>我的hexo主题是基于next进行修改的，所以如果你使用别的主题话，可能操作会有不同。</p>
<p>进入博客目录/themes/你的主题/layout/_third-party/comments/，新建文件disqusapi.swig，内容如下：<br/>
<strong>记得更换第一行你的api域名</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">{% if theme.disqusapi.enable %}</span><br/><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"你的api域名/disqus/dist/iDisqus.min.css"</span> /&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"你的api域名/disqus/dist/iDisqus.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br/><span class="line"><span class="javascript">        <span class="keyword">var</span> emojiList = [{</span></span><br/><span class="line"><span class="javascript">            code:<span class="string">smile</span>,</span></span><br/><span class="line"><span class="javascript">            title:<span class="string">笑脸</span>,</span></span><br/><span class="line"><span class="javascript">            unicode:<span class="string">1f604</span></span></span><br/><span class="line"><span class="undefined">        },{</span></span><br/><span class="line"><span class="javascript">            code:<span class="string">mask</span>,</span></span><br/><span class="line"><span class="javascript">            title:<span class="string">生病</span>,</span></span><br/><span class="line"><span class="javascript">            unicode:<span class="string">1f637</span></span></span><br/><span class="line"><span class="undefined">        },{</span></span><br/><span class="line"><span class="javascript">            code:<span class="string">joy</span>,</span></span><br/><span class="line"><span class="javascript">            title:<span class="string">破涕为笑</span>,</span></span><br/><span class="line"><span class="javascript">            unicode:<span class="string">1f602</span></span></span><br/><span class="line"><span class="undefined">        },{</span></span><br/><span class="line"><span class="javascript">            code:<span class="string">stuck_out_tongue_closed_eyes</span>,</span></span><br/><span class="line"><span class="javascript">            title:<span class="string">吐舌</span>,</span></span><br/><span class="line"><span class="javascript">            unicode:<span class="string">1f61d</span></span></span><br/><span class="line"><span class="undefined">        },{</span></span><br/><span class="line"><span class="javascript">            code:<span class="string">flushed</span>,</span></span><br/><span class="line"><span class="javascript">            title:<span class="string">脸红</span>,</span></span><br/><span class="line"><span class="javascript">            unicode:<span class="string">1f633</span></span></span><br/><span class="line"><span class="undefined">        },{</span></span><br/><span class="line"><span class="javascript">            code:<span class="string">scream</span>,</span></span><br/><span class="line"><span class="javascript">            title:<span class="string">恐惧</span>,</span></span><br/><span class="line"><span class="javascript">            unicode:<span class="string">1f631</span></span></span><br/><span class="line"><span class="undefined">        },{</span></span><br/><span class="line"><span class="javascript">            code:<span class="string">pensive</span>,</span></span><br/><span class="line"><span class="javascript">            title:<span class="string">失望</span>,</span></span><br/><span class="line"><span class="javascript">            unicode:<span class="string">1f614</span></span></span><br/><span class="line"><span class="undefined">        },{</span></span><br/><span class="line"><span class="javascript">            code:<span class="string">unamused</span>,</span></span><br/><span class="line"><span class="javascript">            title:<span class="string">无语</span>,</span></span><br/><span class="line"><span class="javascript">            unicode:<span class="string">1f612</span></span></span><br/><span class="line"><span class="undefined">        },{</span></span><br/><span class="line"><span class="javascript">            code:<span class="string">grin</span>,</span></span><br/><span class="line"><span class="javascript">            title:<span class="string">露齿笑</span>,</span></span><br/><span class="line"><span class="javascript">            unicode:<span class="string">1f601</span></span></span><br/><span class="line"><span class="undefined">        },{</span></span><br/><span class="line"><span class="javascript">            code:<span class="string">heart_eyes</span>,</span></span><br/><span class="line"><span class="javascript">            title:<span class="string">色</span>,</span></span><br/><span class="line"><span class="javascript">            unicode:<span class="string">1f60d</span></span></span><br/><span class="line"><span class="undefined">        },{</span></span><br/><span class="line"><span class="javascript">            code:<span class="string">sweat</span>,</span></span><br/><span class="line"><span class="javascript">            title:<span class="string">汗</span>,</span></span><br/><span class="line"><span class="javascript">            unicode:<span class="string">1f613</span></span></span><br/><span class="line"><span class="undefined">        },{</span></span><br/><span class="line"><span class="javascript">            code:<span class="string">smirk</span>,</span></span><br/><span class="line"><span class="javascript">            title:<span class="string">得意</span>,</span></span><br/><span class="line"><span class="javascript">            unicode:<span class="string">1f60f</span></span></span><br/><span class="line"><span class="undefined">        }];</span></span><br/><span class="line"><span class="javascript">        <span class="keyword">var</span> disq = <span class="keyword">new</span> iDisqus(<span class="string">comments</span>, {</span></span><br/><span class="line"><span class="javascript">            forum: <span class="string">{{ theme.disqusapi.forum }}</span>,</span></span><br/><span class="line"><span class="javascript">            site: <span class="string">{{ theme.disqusapi.site }}</span>,</span></span><br/><span class="line"><span class="javascript">            api: <span class="string">{{ theme.disqusapi.api }}</span>,</span></span><br/><span class="line"><span class="undefined">            mode: {{ theme.disqusapi.mode }},</span></span><br/><span class="line"><span class="javascript">            badge: <span class="string">{{ theme.disqusapi.badge }}</span>,</span></span><br/><span class="line"><span class="undefined">            timeout: {{ theme.disqusapi.timeout }},</span></span><br/><span class="line"><span class="javascript">            init: <span class="literal">true</span>,</span></span><br/><span class="line"><span class="undefined">            emoji_list: emojiList</span></span><br/><span class="line"><span class="undefined">        });</span></span><br/><span class="line"><span class="undefined">        disq.count();</span></span><br/><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br/><span class="line">{% endif %}</span><br/></pre></td></tr></table></figure>
<p>然后在同个目录下的<code>index.swig</code>文件中写入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">{% include &amp;aposdisqusapi.swig&amp;apos %}</span><br/></pre></td></tr></table></figure>
<p>然后重新<code>hexo clean</code>清理之前缓存再<code>hexo d -g</code>生成新的博客文件就好了。</p>
<p>如果你的主题文件系统和我的不一样，你也可以参考原作者<a href="https://github.com/fooleap/disqus-php-api" rel="noopener" target="_blank">fooleap</a>来根据自己的情况进行修改。</p>
<h2 id="写在最后"><a class="header-anchor" href="#写在最后">¶</a>写在最后</h2>
<blockquote>
<p>具体的过程大概就是这样，中间可能会有些纰漏，因为踩了些坑，所以中午花了两个小时才搞完。</p>
</blockquote>
<p><strong>参考文章</strong></p>
<ul>
<li><a href="https://github.com/fooleap/disqus-php-api" rel="noopener" target="_blank">作者的项目地址</a></li>
<li><a href="https://fiveplus.github.io/Hexo%E7%9A%84Disqus%E8%AF%84%E8%AE%BA%E8%A2%AB%E5%A2%99%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html" rel="noopener" target="_blank">Hexo的Disqus评论被墙的解决方案</a></li>
<li><a href="http://leiminnet.cn/blog/index.php/archives/107/" rel="noopener" target="_blank"> 实现Disqus 墙内访问</a></li>
</ul>
</div>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/c7139a41.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>将任意第三方评论导入Disqus系统</title>
                <link>https://me.idealli.com/post/9b521ff7.html</link>
                <guid>https://me.idealli.com/post/9b521ff7.html</guid>
                <pubDate>2019-4-28</pubDate>
                <description>
                
喜欢折腾的我又换了评论系统，虽然之前的valine一直用的很舒服，奈何人都是善变的，何况一个喜欢折腾的人。这次换的是disqus评论系统，我垂涎已久的一个评论系统，终于可以换上了。
不过有个问题就是之前valine的评论怎么搬过来？先不自
                </description>
                <content:encoded>
                <![CDATA[<div class="post-body" itemprop="articleBody">
<p>喜欢折腾的我又换了评论系统，虽然之前的valine一直用的很舒服，奈何人都是善变的，何况一个喜欢折腾的人。这次换的是disqus评论系统，我垂涎已久的一个评论系统，终于可以换上了。</p>
<p>不过有个问题就是之前valine的评论怎么搬过来？先不自己造轮子的原则，我在网上搜了一遍，没有，全是“多说换到disqus的轮子”，完全没有valine换到disqus的，而且还有一批从disqus转到vlaie的，看来valine还是很香的。奈何我还是要跑，disqus更想哈哈。</p>
<a id="more"></a>
<p>然后就是自己琢磨怎么换，disuqs有个导入评论的页面<a href="https://import.disqus.com/" rel="noopener" target="_blank">https://import.disqus.com/</a>，可以从这个入口导入评论，但是支持的格式是<code>wordpress</code>的<code>xml</code>文件格式，它的文件格式如下，所以我要写一个程序把valine导出的评论转为下面的格式</p>
<h3 id="wordpress的xml格式长什么样"><a class="header-anchor" href="#wordpress的xml格式长什么样">¶</a>wordpress的xml格式长什么样</h3>
<p>下面各个标签的内容有点前端基础的朋友看下应该就知道里面应该填什么内容。一个<code>item</code>表示一篇文章，一篇文章里面有多个评论，也就是一个<code>item</code>里面可以有多个<code>&lt;wp:comment&gt;</code>标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="gb2312"?&gt;</span><br/><span class="line"><span class="tag">&lt;<span class="name">rss</span> <span class="attr">version</span>=<span class="string">"2.0"</span></span></span><br/><span class="line"><span class="tag">  <span class="attr">xmlns:content</span>=<span class="string">"http://purl.org/rss/1.0/modules/content/"</span></span></span><br/><span class="line"><span class="tag">  <span class="attr">xmlns:dsq</span>=<span class="string">"http://www.disqus.com/"</span></span></span><br/><span class="line"><span class="tag">  <span class="attr">xmlns:dc</span>=<span class="string">"http://purl.org/dc/elements/1.1/"</span></span></span><br/><span class="line"><span class="tag">  <span class="attr">xmlns:wp</span>=<span class="string">"http://wordpress.org/export/1.0/"</span></span></span><br/><span class="line"><span class="tag">&gt;</span></span><br/><span class="line"><span class="tag">&lt;<span class="name">channel</span>&gt;</span></span><br/><span class="line"></span><br/><span class="line"><span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>文章标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;<span class="name">link</span>&gt;</span>https://me.idealli.com/post/46f19c88.html<span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;<span class="name">content:encoded</span>&gt;</span>&lt;![CDATA[</span><br/><span class="line">	文章内容</span><br/><span class="line">]]&gt;<span class="tag">&lt;/<span class="name">content:encoded</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;<span class="name">wp:post_date_gmt</span>&gt;</span>2018-09-20 09:13:44<span class="tag">&lt;/<span class="name">wp:post_date_gmt</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;<span class="name">wp:comment_status</span>&gt;</span>open<span class="tag">&lt;/<span class="name">wp:comment_status</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;<span class="name">wp:comment</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">wp:comment_id</span>&gt;</span>1<span class="tag">&lt;/<span class="name">wp:comment_id</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">wp:comment_author</span>&gt;</span>Anonymous<span class="tag">&lt;/<span class="name">wp:comment_author</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">wp:comment_author_email</span>&gt;</span>237199971@qq.com<span class="tag">&lt;/<span class="name">wp:comment_author_email</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">wp:comment_author_url</span>&gt;</span>https://image.idealli.com/blog/vultr_gg.jpg<span class="tag">&lt;/<span class="name">wp:comment_author_url</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">wp:comment_author_IP</span>&gt;</span>93.48.67.119<span class="tag">&lt;/<span class="name">wp:comment_author_IP</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">wp:comment_date_gmt</span>&gt;</span>2019-04-24 11:30:19<span class="tag">&lt;/<span class="name">wp:comment_date_gmt</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">wp:comment_content</span>&gt;</span>&lt;![CDATA[评论内容]]&gt;<span class="tag">&lt;/<span class="name">wp:comment_content</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">wp:comment_approved</span>&gt;</span>1<span class="tag">&lt;/<span class="name">wp:comment_approved</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">wp:comment_parent</span>&gt;</span>0<span class="tag">&lt;/<span class="name">wp:comment_parent</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;/<span class="name">wp:comment</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;/<span class="name">rss</span>&gt;</span></span><br/></pre></td></tr></table></figure>
<h3 id="存放评论的txt格式"><a class="header-anchor" href="#存放评论的txt格式">¶</a>存放评论的txt格式</h3>
<p>那么格式有了，就是写脚本了。我先从valine后台将评论都复制到一个txt文件里了，由于后面脚本读取文本内容的先后顺序因素，这个txt文本的排版有点要求，格式如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">评论者昵称</span><br/><span class="line">评论内容</span><br/><span class="line">文章链接</span><br/><span class="line">评论时间</span><br/><span class="line"></span><br/><span class="line">Anonymous</span><br/><span class="line">&lt;p&gt;夜间模式不支持这功能，&lt;/p&gt;</span><br/><span class="line">/post/46f19c88.html</span><br/><span class="line">2019-04-24 11:30:19</span><br/><span class="line"></span><br/><span class="line">跨境电商之家 ADONCN.COM</span><br/><span class="line">&lt;p&gt;感谢分享！&lt;/p&gt;</span><br/><span class="line">/post/651cfd47.html</span><br/><span class="line">2019-04-24 07:51:22</span><br/><span class="line"></span><br/><span class="line">Anonymous</span><br/><span class="line">&lt;hr&gt; &lt;p&gt;md语法也可以&lt;del&gt;好方便&lt;/del&gt;&lt;/p&gt;</span><br/><span class="line">/post/2d5da13e.html</span><br/><span class="line">2019-04-21 13:22:52</span><br/></pre></td></tr></table></figure>
<p>这是从valine里面复制出来的一些有用信息，但是与上面xml格式要求的内容还缺了点东西，所以脚本中还会用到爬虫来爬取文章标题与内容等。</p>
<p>所以数据也有了，要求的输出格式也有了，就差一个脚本了，一个简单的输入输出问题，输入一个txt文本，输出一个wordpress版本的xml文件</p>
<h3 id="tip"><a class="header-anchor" href="#tip">¶</a>tip</h3>
<p>当然，这个脚本你不能直接拿去用了，如果你也想用的话，需要做几件事</p>
<ol>
<li>将要导入的评论写入上面我说的哪个格式的txt文本中</li>
<li>将下面代码爬虫部分的域名改为自己的域名</li>
<li>确保txt文本中的文章链接是uri格式，即不带全域名，否则你应该在下面脚本中去到域名</li>
<li>注意文本的编码格式，我这里用的是gb2312，你根据自己情况而定</li>
<li>导出xml文件后，先在浏览器中打开，如果可以打开的话，就可以导入了，<a href="%5Bhttps://import.disqus.com/%5D(https://import.disqus.com/)">导入</a></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br/><span class="line"><span class="keyword">import</span> requests</span><br/><span class="line"></span><br/><span class="line">r = open(<span class="string">"comment.txt"</span>, <span class="string">"r"</span>)</span><br/><span class="line">lines = r.readlines()</span><br/><span class="line">arr = []</span><br/><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> lines:</span><br/><span class="line">    <span class="keyword">if</span> l != <span class="string">"
"</span>:</span><br/><span class="line">        arr.append(l.replace(<span class="string">"
"</span>,<span class="string">""</span>))</span><br/><span class="line">tmp = <span class="number">4</span></span><br/><span class="line">tt, rel = [], []</span><br/><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> arr:</span><br/><span class="line">    <span class="keyword">if</span>(tmp &gt; <span class="number">0</span>):</span><br/><span class="line">        tt.append(a)</span><br/><span class="line">        tmp -= <span class="number">1</span></span><br/><span class="line">    <span class="keyword">else</span>:</span><br/><span class="line">        rel.append(tt)</span><br/><span class="line">        tt = []</span><br/><span class="line">        tt.append(a)</span><br/><span class="line">        tmp = <span class="number">3</span></span><br/><span class="line"></span><br/><span class="line">con = {}</span><br/><span class="line">i = <span class="number">0</span></span><br/><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> rel:</span><br/><span class="line">    <span class="keyword">if</span> r[<span class="number">2</span>] <span class="keyword">in</span> con:</span><br/><span class="line">        <span class="keyword">pass</span></span><br/><span class="line">    <span class="keyword">else</span>:</span><br/><span class="line">        con[r[<span class="number">2</span>]] = {}</span><br/><span class="line">        con[r[<span class="number">2</span>]][<span class="string">item</span>] = []</span><br/><span class="line">    item = []</span><br/><span class="line">    item.append(r[<span class="number">0</span>])</span><br/><span class="line">    item.append(r[<span class="number">1</span>])</span><br/><span class="line">    item.append(r[<span class="number">3</span>])</span><br/><span class="line">    con[r[<span class="number">2</span>]][<span class="string">item</span>].append(item)</span><br/><span class="line">    // 爬虫部分</span><br/><span class="line">    req = requests.get(url = <span class="string">"http://me.idealli.com"</span> + r[<span class="number">2</span>])</span><br/><span class="line">    html = req.text</span><br/><span class="line">    div_bf = BeautifulSoup(html,<span class="string">"html.parser"</span>)</span><br/><span class="line">    title = <span class="string">""</span></span><br/><span class="line">    <span class="keyword">try</span>:</span><br/><span class="line">        title = div_bf.h2.string</span><br/><span class="line">    <span class="keyword">except</span>:</span><br/><span class="line">        title = <span class="string">"一篇水文"</span></span><br/><span class="line">    body = <span class="string">""</span></span><br/><span class="line">    <span class="keyword">try</span>:</span><br/><span class="line">        body = div_bf.p.string</span><br/><span class="line">        <span class="keyword">if</span> body == <span class="keyword">None</span>:</span><br/><span class="line">            body = title</span><br/><span class="line">    <span class="keyword">except</span>:</span><br/><span class="line">        body = <span class="string">"一篇水文"</span></span><br/><span class="line">    con[r[<span class="number">2</span>]][<span class="string">title</span>] = str(title)</span><br/><span class="line">    con[r[<span class="number">2</span>]][<span class="string">body</span>] = body</span><br/><span class="line">    con[r[<span class="number">2</span>]][<span class="string">link</span>] = r[<span class="number">2</span>]</span><br/><span class="line">    print(<span class="string">正在收集评论</span> + str(i))</span><br/><span class="line">    i += <span class="number">1</span></span><br/><span class="line"></span><br/><span class="line">i = <span class="number">0</span></span><br/><span class="line">xml = open(<span class="string">disqus.xml</span>, <span class="string">"w"</span>)</span><br/><span class="line">begin = <span class="string">"""&lt;?xml version="1.0" encoding="gb2312"?&gt;</span></span><br/><span class="line"><span class="string">&lt;rss version="2.0"</span></span><br/><span class="line"><span class="string">  xmlns:content="http://purl.org/rss/1.0/modules/content/"</span></span><br/><span class="line"><span class="string">  xmlns:dsq="http://www.disqus.com/"</span></span><br/><span class="line"><span class="string">  xmlns:dc="http://purl.org/dc/elements/1.1/"</span></span><br/><span class="line"><span class="string">  xmlns:wp="http://wordpress.org/export/1.0/"</span></span><br/><span class="line"><span class="string">&gt;</span></span><br/><span class="line"><span class="string">&lt;channel&gt;</span></span><br/><span class="line"><span class="string">"""</span></span><br/><span class="line">xml.writelines(begin + <span class="string">"
"</span>)</span><br/><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> con.keys():</span><br/><span class="line">    c = con[k]</span><br/><span class="line">    item = c[<span class="string">item</span>]</span><br/><span class="line">    xml.writelines(<span class="string">&lt;item&gt;
</span>)</span><br/><span class="line">    xml.writelines(<span class="string">&lt;title&gt;</span> + str(c[<span class="string">title</span>]) + <span class="string">&lt;/title&gt;
</span>)</span><br/><span class="line">    xml.writelines(<span class="string">&lt;link&gt;https://me.idealli.com</span> + c[<span class="string">link</span>] + <span class="string">&lt;/link&gt;
</span>)</span><br/><span class="line">    xml.write(<span class="string">&lt;content:encoded&gt;&lt;![CDATA[</span> + str(c[<span class="string">body</span>]) + <span class="string">]]&gt;&lt;/content:encoded&gt;
</span>)</span><br/><span class="line">    xml.writelines(<span class="string">&lt;wp:post_date_gmt&gt;2018-09-20 09:13:44&lt;/wp:post_date_gmt&gt;
</span>)</span><br/><span class="line">    xml.writelines(<span class="string">&lt;wp:comment_status&gt;open&lt;/wp:comment_status&gt;
</span>)</span><br/><span class="line">    comid = <span class="number">1</span></span><br/><span class="line">    <span class="keyword">for</span> com <span class="keyword">in</span> item:</span><br/><span class="line">        xml.writelines(<span class="string">&lt;wp:comment&gt;
</span>)</span><br/><span class="line">        xml.writelines(<span class="string">    &lt;wp:comment_id&gt;</span> + str(comid) + <span class="string">&lt;/wp:comment_id&gt;
</span>)</span><br/><span class="line">        xml.writelines(<span class="string">    &lt;wp:comment_author&gt;</span> + com[<span class="number">0</span>] + <span class="string">&lt;/wp:comment_author&gt;
</span>)</span><br/><span class="line">        xml.writelines(<span class="string">    &lt;wp:comment_author_email&gt;23719997</span> + str(comid) + <span class="string">@qq.com&lt;/wp:comment_author_email&gt;
</span>)</span><br/><span class="line">        xml.writelines(<span class="string">    &lt;wp:comment_author_url&gt;https://image.idealli.com/blog/vultr_gg.jpg&lt;/wp:comment_author_url&gt;
</span>)</span><br/><span class="line">        xml.writelines(<span class="string">    &lt;wp:comment_author_IP&gt;93.48.67.119&lt;/wp:comment_author_IP&gt;
</span>)</span><br/><span class="line">        xml.writelines(<span class="string">    &lt;wp:comment_date_gmt&gt;</span> + com[<span class="number">2</span>] + <span class="string">&lt;/wp:comment_date_gmt&gt;
</span>)</span><br/><span class="line">        xml.writelines(<span class="string">    &lt;wp:comment_content&gt;&lt;![CDATA[</span> + com[<span class="number">1</span>] + <span class="string">]]&gt;&lt;/wp:comment_content&gt;
</span>)</span><br/><span class="line">        xml.writelines(<span class="string">    &lt;wp:comment_approved&gt;1&lt;/wp:comment_approved&gt;
</span>)</span><br/><span class="line">        xml.writelines(<span class="string">    &lt;wp:comment_parent&gt;0&lt;/wp:comment_parent&gt;
</span>)</span><br/><span class="line">        xml.writelines(<span class="string">&lt;/wp:comment&gt;
</span>)</span><br/><span class="line">        comid += <span class="number">1</span></span><br/><span class="line">        i += <span class="number">1</span></span><br/><span class="line">        print(<span class="string">正在写入评论</span> + str(i))</span><br/><span class="line">    </span><br/><span class="line">    xml.writelines(<span class="string">&lt;/item&gt;

</span>)</span><br/><span class="line">    </span><br/><span class="line">xml.writelines(<span class="string">&lt;/channel&gt;
&lt;/rss&gt;</span>)</span><br/></pre></td></tr></table></figure>
<p>代码大概就是这样，将txt文本内容读出后，循环将评论加入文章字典中，以文章链接作为字典的<code>key</code>，判断文章是否出现过，如果出现过就加入到文章里，没出现过就生成新的key，爬虫部分简单爬取了文章标题和内容，建议会的朋友根据自己博客页面代码改下爬虫，因为我不能确保你的博客标题和内容<code>tag</code>名字和我的一样</p>
<p>源码就是提供了一个思路，不建议直接用，虽然我自己用的好好的，但是写的比较懒，没有很强的容错率，因为环境不同可能会出很多bug，所以你可以读取源码和我的几点提示后，自己将其进行更改。</p>
<p>按道理说只要通过简单地更改我的源码，你可以将所有平台的评论导入disqus评论系统。</p>
</div>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/9b521ff7.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>LeetCode趣题分享 | 一个除法函数</title>
                <link>https://me.idealli.com/post/5eb20022.html</link>
                <guid>https://me.idealli.com/post/5eb20022.html</guid>
                <pubDate>2019-4-26</pubDate>
                <description>
                
今天刷Leetcode遇到一个题目挺有趣，虽然思路有了，然而处理整型数溢出处理好久。也可以看出自己在这方面的薄弱。原题地址
题目内容如下，咋一看很简单。
给定两个整数，被除数 a 和除数 b。
将两数相除，要求不使用乘法、除法和 mod 
                </description>
                <content:encoded>
                <![CDATA[<div class="post-body" itemprop="articleBody">
<p>今天刷Leetcode遇到一个题目挺有趣，虽然思路有了，然而处理整型数溢出处理好久。也可以看出自己在这方面的薄弱。<a href="https://leetcode-cn.com/problems/divide-two-integers/" rel="noopener" target="_blank">原题地址</a></p>
<p>题目内容如下，咋一看很简单。</p>
<p>给定两个整数，被除数 a 和除数 b。<br/>
将两数相除，要求不使用乘法、除法和 mod 运算符。<br/>
返回被除数 a 除以除数 b 得到的商。</p>
<p><strong>示例 1</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: a = 10, b = 3</span><br/><span class="line">输出: 3</span><br/></pre></td></tr></table></figure>
<p><strong>示例 2</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: a = 7, b = -3</span><br/><span class="line">输出: -2</span><br/></pre></td></tr></table></figure>
<p><strong>说明</strong>:<br/>
被除数和除数均为 32 位有符号整数。<br/>
除数不为 0。<br/>
假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−2^31,  2^31 − 1]。<br/>
本题中，如果除法结果溢出，则返回 2^31 − 1。</p>
<a id="more"></a>
<h3 id="除法的思想"><a class="header-anchor" href="#除法的思想">¶</a>除法的思想</h3>
<p>题目中已经规定算法不能用乘除和取模等运算。</p>
<p>那么如果我们从除法的定义，也就是<strong>一个被除数能够被一个除数连续除多少次</strong>。<br/>
从这个角度看，算法就很好写了，一个循环一直减被除数，直到被除数小于除数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">divid</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> x)</span></span>{</span><br/><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br/><span class="line">    <span class="keyword">while</span>(y &gt; x){</span><br/><span class="line">        y -= x;</span><br/><span class="line">        tmp++;</span><br/><span class="line">    }</span><br/><span class="line">    <span class="keyword">return</span> tmp;</span><br/><span class="line">    <span class="comment">/*</span></span><br/><span class="line"><span class="comment">    这里还要考虑符号问题，溢出问题等。我只是简单写个思路</span></span><br/><span class="line"><span class="comment">    */</span></span><br/><span class="line">}</span><br/></pre></td></tr></table></figure>
<p>这里还要考虑符号问题，溢出问题等。我只是简单写个思路。<br/>
然而，如果是999999999/2；那么循环要循环999999999/2次，很明显不能用这种方法。</p>
<p>那么还有什么思路可以不用循环这么多次呢？</p>
<p>这里就想到了数值的左移和右移。</p>
<h3 id="移位运算"><a class="header-anchor" href="#移位运算">¶</a>移位运算</h3>
<p>c++中的移位运算，比如左移</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> k = <span class="number">2</span>;</span><br/><span class="line">k = k&lt;&lt;<span class="number">3</span>; <span class="comment">//k被左移3位，k=8</span></span><br/></pre></td></tr></table></figure>
<p>这里的移位是在二进制上进行，将k的二进制数左移3位。</p>
<p><strong>10 -&gt; 10000</strong></p>
<p>也就是说某个数左移n位，就等于该数乘于2^n。</p>
<p>这样我们就可以使用位移来得到一个<strong>最大接近被除数的数</strong>。</p>
<p>比如被除数 y = 210，除数 x = 3，初始化结果result = 0</p>
<ol>
<li>将x移位得到一个最大接近y但不超过y的数</li>
</ol>
<p><strong>x&lt;&lt;6 = x * 64 = 172</strong></p>
<ol start="2">
<li>然后我们将得到的移位数加到结果里，并且被除数减去这个乘数</li>
</ol>
<p><strong>result += 1&lt;&lt;6</strong><br/>
<strong>y -= x&lt;&lt;6</strong></p>
<p>重复1，2步直到 y &lt; x;</p>
<h3 id="算法实现"><a class="header-anchor" href="#算法实现">¶</a>算法实现</h3>
<blockquote>
<p>执行用时 : 16 ms, 在Divide Two Integers的C<ins>提交中击败了73.04% 的用户<br/>
内存消耗 : 8.2 MB, 在Divide Two Integers的C</ins>提交中击败了76.92% 的用户</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br/><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>{</span></span><br/><span class="line"><span class="keyword">public</span>:</span><br/><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">left</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> &amp;d,<span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span></span>{</span><br/><span class="line">        <span class="keyword">int</span> lef = x, i = <span class="number">0</span>;</span><br/><span class="line">        <span class="keyword">for</span> (; i&lt; <span class="number">31</span> &amp;&amp; lef&lt;&lt;i &lt;= d; i++);</span><br/><span class="line">        <span class="keyword">if</span>(i != <span class="number">0</span>) {</span><br/><span class="line">            d -= lef&lt;&lt;(i<span class="number">-1</span>);</span><br/><span class="line">            <span class="keyword">return</span> <span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>);</span><br/><span class="line">        }</span><br/><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">    }</span><br/><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>{</span><br/><span class="line">        <span class="keyword">if</span> (dividend == <span class="number">0</span>) {</span><br/><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">        }</span><br/><span class="line">        <span class="keyword">if</span> (dividend == INT_MIN &amp;&amp; divisor == <span class="number">-1</span>) {</span><br/><span class="line">            <span class="keyword">return</span> INT_MAX;</span><br/><span class="line">        }</span><br/><span class="line">        <span class="keyword">if</span> (divisor == INT_MIN &amp;&amp; dividend == INT_MIN) {</span><br/><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br/><span class="line">        }</span><br/><span class="line">        <span class="keyword">if</span> (divisor == INT_MIN) {</span><br/><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">        }</span><br/><span class="line">        <span class="keyword">bool</span> sign = (dividend^divisor) &lt; <span class="number">0</span>;</span><br/><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> dd = dividend == INT_MIN ? <span class="number">0x80000000</span> : <span class="built_in">abs</span>(dividend);</span><br/><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> dr = <span class="built_in">abs</span>(divisor);</span><br/><span class="line">        <span class="keyword">if</span>(dr == <span class="number">1</span>) <span class="keyword">return</span> sign ? -dd : dd;</span><br/><span class="line">        <span class="keyword">int</span> tmp = left(dd, dr), result = tmp;</span><br/><span class="line">        <span class="keyword">while</span>(tmp){</span><br/><span class="line">            tmp = left(dd, dr);</span><br/><span class="line">            result += tmp;</span><br/><span class="line">        }</span><br/><span class="line">        <span class="keyword">return</span> sign ? -result : result;</span><br/><span class="line">    }</span><br/><span class="line">};</span><br/><span class="line"></span><br/><span class="line"><span class="comment">/*</span></span><br/><span class="line"><span class="comment">执行用时 : 16 ms, 在Divide Two Integers的C++提交中击败了73.04% 的用户</span></span><br/><span class="line"><span class="comment">内存消耗 : 8.2 MB, 在Divide Two Integers的C++提交中击败了76.92% 的用户</span></span><br/><span class="line"><span class="comment">*/</span></span><br/></pre></td></tr></table></figure>
<p>思路还是很简单的，但是其中有很多要考虑到的细节，非常烦人，很多意想不到的细节导致出错（主要是溢出），调bug调了1个多小时。</p>
<p>下面顺便写一下另一个比较有趣的</p>
<h3 id="翻转k子链表"><a class="header-anchor" href="#翻转k子链表">¶</a>翻转k子链表</h3>
<p>给出一个链表，每 k 个节点一组进行翻转，并返回翻转后的链表。<br/>
k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么将最后剩余节点保持原有顺序。</p>
<p>示例 :<br/>
给定这个链表：1-&gt;2-&gt;3-&gt;4-&gt;5<br/>
当 k = 2 时，应当返回: 2-&gt;1-&gt;4-&gt;3-&gt;5<br/>
当 k = 3 时，应当返回: 3-&gt;2-&gt;1-&gt;4-&gt;5</p>
<p>这里用到以空间换时间的想法，用一个辅助向量存储链表节点，当所有子链都翻转后，在重新连接指针。</p>
<blockquote>
<p>执行用时 : 32 ms, 在Reverse Nodes in k-Group的C<ins>提交中击败了96.23% 的用户<br/>
内存消耗 : 10.1 MB, 在Reverse Nodes in k-Group的C</ins>提交中击败了53.04% 的用户</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Definition for singly-linked list.</span></span><br/><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br/><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> {</span></span><br/><span class="line">    <span class="keyword">int</span> val;</span><br/><span class="line">    ListNode *next;</span><br/><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">NULL</span>) {}</span><br/><span class="line"> };</span><br/><span class="line"> </span><br/><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br/><span class="line"><span class="keyword">public</span>:</span><br/><span class="line">    <span class="function">ListNode* <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>{</span><br/><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br/><span class="line">        <span class="built_in">vector</span>&lt;ListNode*&gt; arr;</span><br/><span class="line">        <span class="keyword">while</span>(head != <span class="literal">NULL</span>){</span><br/><span class="line">            arr.push_back(head);</span><br/><span class="line">            head = head-&gt;next;</span><br/><span class="line">        }</span><br/><span class="line">        <span class="keyword">if</span>(arr.size() &lt; k)</span><br/><span class="line">            <span class="keyword">return</span> arr.front();</span><br/><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= arr.size()-k; i += k)</span><br/><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k/<span class="number">2</span>; j++)</span><br/><span class="line">                swap(arr[i+j], arr[i+k-j<span class="number">-1</span>]);</span><br/><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; arr.size()<span class="number">-1</span>; i++){</span><br/><span class="line">            arr[i]-&gt;next = arr[i+<span class="number">1</span>];</span><br/><span class="line">        }</span><br/><span class="line">        arr.back()-&gt;next = <span class="literal">NULL</span>;</span><br/><span class="line">        <span class="keyword">return</span> arr.front();</span><br/><span class="line">    }</span><br/><span class="line">}</span><br/></pre></td></tr></table></figure>
</div>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/5eb20022.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>Leetcode刷题第一周汇总</title>
                <link>https://me.idealli.com/post/7cec70c9.html</link>
                <guid>https://me.idealli.com/post/7cec70c9.html</guid>
                <pubDate>2019-4-20</pubDate>
                <description>
                
这两天刷了十几道Leetcode的算法题，还是做算法有趣，现在对这周做的源码进行汇总。
算法都比较笨，大佬们见笑了

¶Definition for singly-linked list.
# Definition for singly-
                </description>
                <content:encoded>
                <![CDATA[<div class="post-body" itemprop="articleBody">
<p>这两天刷了十几道Leetcode的算法题，还是做算法有趣，现在对这周做的源码进行汇总。<br/>
算法都比较笨，大佬们见笑了</p>
<a id="more"></a>
<h3 id="definition-for-singly-linked-list"><a class="header-anchor" href="#definition-for-singly-linked-list">¶</a>Definition for singly-linked list.</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br/><span class="line"><span class="comment"># 给出两个 非空 的链表用来表示两个非负的整数。</span></span><br/><span class="line"><span class="comment">#  其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</span></span><br/><span class="line"><span class="comment"># 如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</span></span><br/><span class="line"><span class="comment"># 您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</span></span><br/><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br/><span class="line">        self.val = x</span><br/><span class="line">        self.next = <span class="keyword">None</span></span><br/><span class="line"></span><br/><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br/><span class="line">        tmp = <span class="number">0</span></span><br/><span class="line">        s1 = l1</span><br/><span class="line">        s2 = l2</span><br/><span class="line">        s3 = ListNode(<span class="number">0</span>)</span><br/><span class="line">        ss = s3</span><br/><span class="line">        <span class="keyword">while</span> s1 != <span class="keyword">None</span> <span class="keyword">and</span> s2 != <span class="keyword">None</span>:</span><br/><span class="line">            n = int((s1.val + s2.val + tmp) % <span class="number">10</span>)</span><br/><span class="line">            tmp = int((s1.val + s2.val + tmp - n) / <span class="number">10</span>)</span><br/><span class="line">            node = ListNode(n)</span><br/><span class="line">            ss.next = node</span><br/><span class="line">            ss = node</span><br/><span class="line">            s1 = s1.next</span><br/><span class="line">            s2 = s2.next</span><br/><span class="line">        s = <span class="keyword">None</span></span><br/><span class="line">        <span class="keyword">if</span> s1 !=<span class="keyword">None</span>:</span><br/><span class="line">            s = s1</span><br/><span class="line">        <span class="keyword">if</span> s2 != <span class="keyword">None</span>:</span><br/><span class="line">            s = s2</span><br/><span class="line">        <span class="keyword">while</span> s != <span class="keyword">None</span>:</span><br/><span class="line">            n = int((s.val + tmp) % <span class="number">10</span>)</span><br/><span class="line">            tmp = int((s.val + tmp - n) / <span class="number">10</span>)</span><br/><span class="line">            node = ListNode(n)</span><br/><span class="line">            ss.next = node</span><br/><span class="line">            ss = node</span><br/><span class="line">            s = s.next</span><br/><span class="line">        <span class="keyword">if</span> tmp &gt;= <span class="number">1</span>:</span><br/><span class="line">            node = ListNode(tmp)</span><br/><span class="line">            ss.next = node</span><br/><span class="line">            ss = node</span><br/><span class="line">        <span class="keyword">return</span> s3.next</span><br/></pre></td></tr></table></figure>
<h3 id="two-sum"><a class="header-anchor" href="#two-sum">¶</a>two sum</h3>
<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br/>
你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>
<p>示例:</p>
<p>给定 nums = [2, 7, 11, 15], target = 9<br/>
因为 nums[0] + nums[1] = 2 + 7 = 9<br/>
所以返回 [0, 1]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target: int)</span>:</span></span><br/><span class="line">        lens = len(nums)</span><br/><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(lens):</span><br/><span class="line">            <span class="keyword">if</span> target-nums[i] <span class="keyword">in</span> nums[i+<span class="number">1</span>:]:</span><br/><span class="line">                <span class="keyword">return</span> [i,nums[i+<span class="number">1</span>:].index(target-nums[i])+i+<span class="number">1</span>]</span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum2</span><span class="params">(self, nums, target: int)</span>:</span></span><br/><span class="line">        maps = {}</span><br/><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br/><span class="line">            maps[i] = <span class="number">1</span></span><br/><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> nums:</span><br/><span class="line">            <span class="keyword">if</span> target-j <span class="keyword">in</span> maps:</span><br/><span class="line">                f = nums.index(j)</span><br/><span class="line">                <span class="keyword">if</span> target-j <span class="keyword">in</span> nums[f+<span class="number">1</span>:]:</span><br/><span class="line">                    l = nums[f+<span class="number">1</span>:].index(target-j) + f + <span class="number">1</span></span><br/><span class="line">                    <span class="keyword">return</span> [f, l]</span><br/></pre></td></tr></table></figure>
<h3 id="最短回文串"><a class="header-anchor" href="#最短回文串">¶</a>最短回文串</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给定一个字符串 s，你可以通过在字符串前面添加字符将其转换为回文串。</span></span><br/><span class="line"><span class="comment"># 找到并返回可以用这种方式转换的最短回文串。</span></span><br/><span class="line"><span class="comment"># 示例 1:</span></span><br/><span class="line"><span class="comment"># 输入: "aacecaaa"</span></span><br/><span class="line"><span class="comment"># 输出: "aaacecaaa"</span></span><br/><span class="line"><span class="comment"># 示例 2:</span></span><br/><span class="line"><span class="comment"># 输入: "abcd"</span></span><br/><span class="line"><span class="comment"># 输出: "dcbabcd"</span></span><br/><span class="line"></span><br/><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shortestPalindrome</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br/><span class="line">        <span class="keyword">if</span> s == <span class="string">""</span>:</span><br/><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br/><span class="line">        le = len(s)</span><br/><span class="line">        rs = s[::<span class="number">-1</span>]</span><br/><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(le):</span><br/><span class="line">            <span class="keyword">if</span> s[:le-i] == rs[i:]:</span><br/><span class="line">                <span class="keyword">break</span></span><br/><span class="line">        <span class="keyword">return</span> rs[:i] + s</span><br/></pre></td></tr></table></figure>
<h3 id="最大面积"><a class="header-anchor" href="#最大面积">¶</a>最大面积</h3>
<p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。<br/>
在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。<br/>
找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>
<p>说明：你不能倾斜容器，且 n 的值至少为 2。</p>
<p><img alt="" src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg"/></p>
<blockquote>
<p>执行用时 : 80 ms, 在Container With Most Water的Python3提交中击败了80.05% 的用户<br/>
内存消耗 : 14.4 MB, 在Container With Most Water的Python3提交中击败了65.81% 的用户</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br/><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, height)</span> -&gt; int:</span></span><br/><span class="line">        h = <span class="number">0</span></span><br/><span class="line">        maxa = <span class="number">0</span></span><br/><span class="line">        le = len(height)</span><br/><span class="line">        hh = height[::<span class="number">-1</span>]</span><br/><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(le):</span><br/><span class="line">            <span class="keyword">if</span> height[i] &gt; h:</span><br/><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(le - i):</span><br/><span class="line">                    <span class="keyword">if</span> hh[j] &gt;= height[i]:</span><br/><span class="line">                        <span class="keyword">if</span> (le - j - i - <span class="number">1</span>) * height[i] &gt; maxa:</span><br/><span class="line">                            maxa = (le - j - i - <span class="number">1</span>) * height[i]</span><br/><span class="line">                        <span class="keyword">break</span></span><br/><span class="line">                    <span class="keyword">elif</span> (le - j - i <span class="number">-1</span>) * hh[j] &gt; maxa:</span><br/><span class="line">                        maxa = (le - j - i - <span class="number">1</span>) * hh[j]</span><br/><span class="line">                h = height[i]</span><br/><span class="line">        <span class="keyword">return</span> maxa</span><br/></pre></td></tr></table></figure>
<h3 id="正则表达式匹配"><a class="header-anchor" href="#正则表达式匹配">¶</a>正则表达式匹配</h3>
<p>给定一个字符串 (s) 和一个字符模式 §。实现支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</p>
<p>‘.’ 匹配任意单个字符。<br/>
’*’ 匹配零个或多个前面的元素。<br/>
匹配应该覆盖整个字符串 (s) ，而不是部分字符串。</p>
<p>说明:</p>
<p>s 可能为空，且只包含从 a-z 的小写字母。<br/>
p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。</p>
<blockquote>
<p>执行用时 : 76 ms, 在Regular Expression Matching的Python3提交中击败了93.59% 的用户<br/>
内存消耗 : 13.2 MB, 在Regular Expression Matching的Python3提交中击败了58.15% 的用户</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br/><span class="line">        self.arr = []</span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s: str, p: str)</span> -&gt; bool:</span></span><br/><span class="line">        self.arr = [[<span class="number">-1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(p)+<span class="number">1</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> range(len(s)+<span class="number">1</span>)]</span><br/><span class="line">        <span class="keyword">return</span> self.match(s, p ,<span class="number">0</span> , <span class="number">0</span>)</span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">match</span><span class="params">(self, s: str, p: str, i: int, j: int)</span> -&gt; bool:</span></span><br/><span class="line">        <span class="keyword">if</span> self.arr[i][j] != <span class="number">-1</span>:</span><br/><span class="line">            <span class="keyword">return</span> self.arr[i][j]</span><br/><span class="line">        pp ,ss = p[j:], s[i:]</span><br/><span class="line">        lp, ls = len(pp), len(ss)</span><br/><span class="line">        <span class="keyword">if</span> lp &lt;= <span class="number">0</span>:</span><br/><span class="line">            <span class="keyword">return</span> ls &lt;= <span class="number">0</span></span><br/><span class="line">        <span class="keyword">if</span> ls &lt;= <span class="number">0</span>:</span><br/><span class="line">            <span class="keyword">try</span>:</span><br/><span class="line">                self.arr[i][j] = lp &lt;= <span class="number">0</span> <span class="keyword">or</span> pp[<span class="number">1</span>] == <span class="string">*</span> <span class="keyword">and</span> lp &gt;= <span class="number">2</span> <span class="keyword">and</span> self.match(s, p, i , j+<span class="number">2</span>)</span><br/><span class="line">                <span class="keyword">return</span> self.arr[i][j]</span><br/><span class="line">            <span class="keyword">except</span>:</span><br/><span class="line">                self.arr[i][j] = <span class="keyword">False</span></span><br/><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br/><span class="line">        match = (ls &gt; <span class="number">0</span> <span class="keyword">and</span> ss[<span class="number">0</span>] == pp[<span class="number">0</span>]) <span class="keyword">or</span> pp[<span class="number">0</span>] == <span class="string">.</span></span><br/><span class="line">        <span class="keyword">if</span> lp &gt; <span class="number">1</span> <span class="keyword">and</span> pp[<span class="number">1</span>] == <span class="string">*</span>:</span><br/><span class="line">            self.arr[i][j] = self.match(s, p, i, j+<span class="number">2</span>) <span class="keyword">or</span> (match <span class="keyword">and</span> self.match(s, p, i+<span class="number">1</span>, j))</span><br/><span class="line">            <span class="keyword">return</span> self.arr[i][j]</span><br/><span class="line">        <span class="keyword">else</span>:</span><br/><span class="line">            <span class="keyword">if</span> match:</span><br/><span class="line">                self.arr[i][j] = self.match(s, p, i+<span class="number">1</span>, j+<span class="number">1</span>)</span><br/><span class="line">                <span class="keyword">return</span> self.arr[i][j]</span><br/><span class="line">            self.arr[i][j] = <span class="keyword">False</span></span><br/><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br/></pre></td></tr></table></figure>
<h3 id="回文数"><a class="header-anchor" href="#回文数">¶</a>回文数</h3>
<p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<p>示例 1:</p>
<p>输入: 121<br/>
输出: true<br/>
示例 2:</p>
<p>输入: -121<br/>
输出: false<br/>
解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。<br/>
示例 3:</p>
<p>输入: 10<br/>
输出: false<br/>
解释: 从右向左读, 为 01 。因此它不是一个回文数。</p>
<p>emmmmm一行代码解决，没想到效率还不错</p>
<blockquote>
<p>执行用时 : 104 ms, 在Palindrome Number的Python3提交中击败了99.58% 的用户<br/>
内存消耗 : 13.2 MB, 在Palindrome Number的Python3提交中击败了82.83% 的用户</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x: int)</span> -&gt; bool:</span></span><br/><span class="line">        <span class="keyword">return</span> str(x)[::<span class="number">-1</span>] == str(x)</span><br/></pre></td></tr></table></figure>
<h3 id="字符提取数字"><a class="header-anchor" href="#字符提取数字">¶</a>字符提取数字</h3>
<p>请你来实现一个 atoi 函数，使其能将字符串转换成整数。<br/>
首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。<br/>
当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。<br/>
该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。<br/>
注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。<br/>
在任何情况下，若函数不能进行有效的转换时，请返回 0。</p>
<p>说明：<br/>
假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，qing返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p>
<p>示例 1:<br/>
输入: "   -42"<br/>
输出: -42<br/>
解释: 第一个非空白字符为 ‘-’, 它是一个负号。<br/>
我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</p>
<p>示例 3:<br/>
输入: "4193 with words"<br/>
输出: 4193<br/>
解释: 转换截止于数字 ‘3’ ，因为它的下一个字符不为数字。</p>
<p>示例 4:<br/>
输入: "words and 987"<br/>
输出: 0<br/>
解释: 第一个非空字符是 ‘w’, 但它不是数字或正、负号。<br/>
因此无法执行有效的转换。</p>
<p>示例 5:<br/>
输入: "-91283472332"<br/>
输出: -2147483648<br/>
解释: 数字 “-91283472332” 超过 32 位有符号整数范围。<br/>
因此返回 INT_MIN (−231) 。</p>
<blockquote>
<p>执行用时 : 64 ms, 在String to Integer (atoi)的Python3提交中击败了88.66% 的用户<br/>
内存消耗 : 13.1 MB, 在String to Integer (atoi)的Python3提交中击败了94.70% 的用户</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br/><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br/><span class="line">        <span class="keyword">try</span>:</span><br/><span class="line">            s = s.split()[<span class="number">0</span>]</span><br/><span class="line">            t = <span class="string">""</span></span><br/><span class="line">            <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">-</span>:</span><br/><span class="line">                t = <span class="string">-</span></span><br/><span class="line">                s = s[<span class="number">1</span>:]</span><br/><span class="line">            <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">+</span> <span class="keyword">and</span> t == <span class="string">""</span>:</span><br/><span class="line">                s = s[<span class="number">1</span>:]</span><br/><span class="line">            out = <span class="number">0</span></span><br/><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br/><span class="line">                <span class="keyword">try</span>:</span><br/><span class="line">                    out = int(t+s[:i+<span class="number">1</span>])</span><br/><span class="line">                <span class="keyword">except</span>:</span><br/><span class="line">                    <span class="keyword">break</span></span><br/><span class="line"></span><br/><span class="line">            <span class="keyword">if</span> out &lt; <span class="number">-2147483648</span>:</span><br/><span class="line">                out = <span class="number">-2147483648</span></span><br/><span class="line">            <span class="keyword">elif</span>  out &gt; <span class="number">2147483647</span>:</span><br/><span class="line">                out = <span class="number">2147483647</span></span><br/><span class="line">            <span class="keyword">return</span> out</span><br/><span class="line">        <span class="keyword">except</span>:</span><br/><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br/></pre></td></tr></table></figure>
<h3 id="反转数"><a class="header-anchor" href="#反转数">¶</a>反转数</h3>
<p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>
<p>示例 1:<br/>
输入: 123<br/>
输出: 321</p>
<p>示例 2:<br/>
输入: -123<br/>
输出: -321</p>
<p>示例 3:<br/>
输入: 120<br/>
输出: 21</p>
<p>注意:<br/>
假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。<br/>
请根据这个假设，如果反转后整数溢出那么就返回 0。</p>
<blockquote>
<p>执行用时 : 56 ms, 在Reverse Integer的Python3提交中击败了98.64% 的用户<br/>
内存消耗 : 13.3 MB, 在Reverse Integer的Python3提交中击败了48.60% 的用户</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br/><span class="line">        s = str(x)</span><br/><span class="line">        flag = <span class="string">""</span></span><br/><span class="line">        <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">-</span>:</span><br/><span class="line">            flag = s[<span class="number">0</span>]</span><br/><span class="line">            s = s[<span class="number">1</span>:]</span><br/><span class="line">        ls = int(flag + s[::<span class="number">-1</span>])</span><br/><span class="line">        <span class="keyword">if</span> ls &lt; <span class="number">-2147483648</span> <span class="keyword">or</span> ls &gt;<span class="number">2147483647</span>:</span><br/><span class="line">            ls = <span class="number">0</span></span><br/><span class="line">        <span class="keyword">return</span> ls</span><br/></pre></td></tr></table></figure>
<h3 id="z字形排列"><a class="header-anchor" href="#z字形排列">¶</a>Z字形排列</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</span></span><br/><span class="line"></span><br/><span class="line"><span class="comment"># 比如输入字符串为 "LEETCODEISHIRING" 行数为 3 时，排列如下：</span></span><br/><span class="line"></span><br/><span class="line"><span class="comment"># L   C   I   R</span></span><br/><span class="line"><span class="comment"># E T O E S I I G</span></span><br/><span class="line"><span class="comment"># E   D   H   N</span></span><br/><span class="line"><span class="comment"># 之后，你的输出需要从左往右逐行读取，产生出一个新的字符串</span></span><br/><span class="line"><span class="comment"># 比如："LCIRETOESIIGEDHN"。</span></span><br/><span class="line"></span><br/><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(self, s: str, numRows: int)</span> -&gt; str:</span></span><br/><span class="line">        <span class="keyword">if</span> numRows == <span class="number">1</span>:</span><br/><span class="line">            <span class="keyword">return</span> s</span><br/><span class="line">        rel = <span class="string">""</span></span><br/><span class="line">        step = numRows * <span class="number">2</span> - <span class="number">2</span></span><br/><span class="line">        le = len(s)</span><br/><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(numRows):</span><br/><span class="line">            f = i</span><br/><span class="line">            <span class="keyword">while</span> f &lt; le:</span><br/><span class="line">                rel += s[f]</span><br/><span class="line">                f += step</span><br/><span class="line">                mid = f-i*<span class="number">2</span></span><br/><span class="line">                <span class="keyword">if</span> i != numRows - <span class="number">1</span> <span class="keyword">and</span> i != <span class="number">0</span> <span class="keyword">and</span> mid &lt; le:</span><br/><span class="line">                    rel += s[mid]</span><br/><span class="line">        <span class="keyword">return</span> rel</span><br/></pre></td></tr></table></figure>
</div>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/7cec70c9.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>安装LNMP环境并搭建wordpress博客</title>
                <link>https://me.idealli.com/post/57c368d4.html</link>
                <guid>https://me.idealli.com/post/57c368d4.html</guid>
                <pubDate>2019-4-18</pubDate>
                <description>
                
¶购买云服务器
想要搭建动态博客，还是得先买个云服务器，如果想不花钱搭博客的话，推荐使用hexo+GitHub搭建静态博客，见我的另一篇文章最全面的hexo博客搭建教程。如果是搭建动态博客的话，请继续阅读。
已经有服务器的朋友跳过这一段继
                </description>
                <content:encoded>
                <![CDATA[<div class="post-body" itemprop="articleBody">
<h3 id="购买云服务器"><a class="header-anchor" href="#购买云服务器">¶</a>购买云服务器</h3>
<p>想要搭建动态博客，还是得先买个云服务器，如果想不花钱搭博客的话，推荐使用hexo+GitHub搭建静态博客，见我的另一篇文章<a href="https://me.idealli.com/post/e8d13fc.html">最全面的hexo博客搭建教程</a>。如果是搭建动态博客的话，请继续阅读。</p>
<p>已经有服务器的朋友跳过这一段继续阅读</p>
<p>服务器厂商有两个选择</p>
<ol>
<li>国内云服务器产商</li>
<li>国外云服务器厂商</li>
</ol>
<p>国内的好处，阿里云和腾讯云的学生机都挺便宜的，申请门槛也很低，网站因为在国内，所以速度也还不错。但是国内服务器厂商有个麻烦的地方就是，域名备案巨麻烦，有过三次域名备案的过来人我的经验之谈。</p>
<p>18年的时候域名备案还是很方便的，那时候5天就下来了，也不用真人拍照啥的。后来19年备案的时候，就很麻烦了，需要用备案所在省的手机号码申请，需要购买厂商的背景幕布进行拍照。。。</p>
<a id="more"></a>
<p>所以不想折腾的话，建议选择国外服务器厂商，搬瓦工或者vultr的服务器，不过听说搬瓦工最近没有低配了，走高端路线了。不太清除，我是一直用的vultr，也建议用vultr，可以支付宝支付或微信支付。</p>
<p>重要的是，vultr最近一直有活动，新客户注册冲10美元送50美元，而这60美元够你用一年半的服务器了<br/>
相当于60人民币用了一年半的服务器，比国内的学生机还划算。</p>
<h4 id="如何注册"><a class="header-anchor" href="#如何注册">¶</a>如何注册</h4>
<p><strong>点击进入官网</strong>vultr注册地址：<strong><a href="https://www.vultr.com/?ref=7772625-4F" rel="noopener" target="_blank">www.vultr.com</a></strong>（全球15个服务器位置可选，KVM框架。推荐：美国西海岸等靠近大陆的服务器，不推荐日本服务器，因为近段时间日本服务器开不出好IP.）</p>
<p>虽然是英文界面，但是现在的浏览器都有网页翻译功能，鼠标点击右键，选择网页翻译即可翻译成中文。</p>
<a class="LinkCard" href="https://www.vultr.com/?ref=7772625-4F" target="_blank">
vultr官网
</a>
<p>注册并邮件激活账号，充值后即可购买服务器。充值方式是微信支付或支付宝(2017年8月30日Vutrl支持支付宝付款了，最低充值10美元即67左右人民币）2019新出了新用户送50美元优惠券！！！充10美元可以用一年多！</p>
<ol>
<li>2.5美元/月的服务器配置信息：单核 512M内存 20G SSD硬盘 带宽峰值100M 500G流量/月 (<strong>仅ipv6</strong>)</li>
<li>3.5美元/月的服务器配置信息：单核 512M内存 20G SSD硬盘 带宽峰值100M 500G流量/月 (<strong>推荐</strong>)</li>
<li>5美元/月的服务器配置信息： 单核 1G内存 25G SSD硬盘 带宽峰值100M 1000G流量/月</li>
<li>10美元/月的服务器配置信息： 单核 2G内存 40G SSD硬盘 带宽峰值100M 2000G流量/月</li>
<li>20美元/月的服务器配置信息： 2cpu 4G内存 60G SSD硬盘 带宽峰值100M 3000G流量/月</li>
<li>40美元/月的服务器配置信息： 4cpu 8G内存 100G SSD硬盘 带宽峰值100M 4000G流量/月</li>
</ol>
<p><strong>注意</strong>：vultr官方进行了调整，2.5美元套餐只提供ipv6，如果你用不了ipv6，那么你可以买3.5美元的套餐。</p>
<blockquote>
<p>vultr实际上是折算成小时来计费的，比如服务器是5美元1个月，那么每小时收费为5/30/24=0.0069美元 会自动从账号中扣费，只要保证账号有钱即可。如果你部署的服务器实测后速度不理想，你可以把它删掉（destroy），重新换个地区的服务器来部署，方便且实用。因为新的服务器就是新的ip，所以当ip被墙时这个方法很有用。当ip被墙时，为了保证新开的服务器ip和原先的ip不一样，先开新服务器，开好后再删除旧服务器即可。</p>
</blockquote>
<p>计费从你开通服务器开始算的，不管你有没有使用，即使服务器处于关机状态仍然会计费，如果你没有开通服务器就不算。比如你今天早上开通了服务器，但你有事情，晚上才部署，那么这段时间是会计费的。同理，如果你早上删掉服务器，第二天才开通新的服务器，那么这段时间是不会计费的。在账号的Billing选项里可以看到账户余额。</p>
<h3 id="设置账户支付方式"><a class="header-anchor" href="#设置账户支付方式">¶</a>设置账户支付方式</h3>
<p>支付宝最低可以先充值10美元</p>
<p><img alt="兰州小红鸡" src="https://image.idealli.com/blog/18123010.jpg"/></p>
<h3 id="创建服务器"><a class="header-anchor" href="#创建服务器">¶</a>创建服务器</h3>
<p>看需求选地区，日本节点的延迟会短一点</p>
<p><img alt="兰州小红鸡" src="https://image.idealli.com/blog/18123011.jpg"/></p>
<p><img alt="兰州小红鸡" src="https://image.idealli.com/blog/18123004.jpg"/></p>
<p><img alt="兰州小红鸡" src="https://image.idealli.com/blog/18123005.jpg"/></p>
<p><img alt="兰州小红鸡" src="https://image.idealli.com/blog/18123006.jpg"/></p>
<p>购买vps服务器时，服务器地址优先选择：美国西海岸等靠近大陆的服务器，不推荐日本服务器，因为近段时间日本服务器开不出好IP。系统推荐选择CentOS 6.X64位的系统</p>
<p>完成购买后，找到系统的<strong>密码</strong>记下来，部署服务器时<strong>需要用到</strong>。如图：</p>
<p><img alt="兰州小红鸡" src="https://image.idealli.com/blog/18102601.png"/></p>
<p>因为vultr实际上是折算成小时来计费的，所以如果你部署的服务器实测后不理想，你可以把它删掉，重新换个地区的服务器来部署，很方便。</p>
<p>删除服务器步骤如下</p>
<p><img alt="兰州小红鸡" src="https://image.idealli.com/blog/18123104.PNG"/></p>
<p>确认删除就好啦，有时候一台服务器用着不爽的时候，就可以删掉，再开一台。</p>
<p><img alt="兰州小红鸡" src="https://image.idealli.com/blog/18123105.png"/></p>
<h2 id="第二步：部署vps服务器"><a class="header-anchor" href="#第二步：部署vps服务器">¶</a>第二步：部署VPS服务器</h2>
<p>购买服务器后，需要部署一下。链接到你的服务器，可以使用linux下直接ssh链接，windows下可以在vultr官网有个view consle可以直接连到服务器，或者可以下载<a href="https://gitforwindows.org/" rel="noopener" target="_blank">git bash</a>或者其他带有ssh的命令行工具</p>
<p>ssh连接服务器的简单命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh root@你的ip地址</span><br/></pre></td></tr></table></figure>
<p>连接国外ip即服务器时，软件会先后提醒你输入用户名和密码，用户名linux系统默认都是root，密码是购买服务器后的centos系统的密码。</p>
<p>就是上面说的这个</p>
<p><img alt="兰州小红鸡" src="https://image.idealli.com/blog/18102601.png"/></p>
<p><strong>vultr服务器默认的密码很长，大家登陆一次之后可以进行改密，Linux下更改密码命令如下</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo passwd root</span><br/></pre></td></tr></table></figure>
<h3 id="下载安装lnmp"><a class="header-anchor" href="#下载安装lnmp">¶</a>下载安装LNMP</h3>
<p><a href="https://lnmp.org/" rel="noopener" target="_blank">LNMP官网</a></p>
<p>由于编译安装LNMP需要一定的时间，为避免远程登陆中因网络中断或误关闭PuTTY窗口导致任务丢失，我们先创建screen会话。（这里是centos7）</p>
<p>登录后运行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">screen-Slnmp</span><br/></pre></td></tr></table></figure>
<p>screen命令的用处是用来创建一个新的窗口，这样可以避免终端窗口ssh连接关闭或者其他网络原因导致连接退出后正在运行的进程也被杀死。</p>
<p>如果提示<code>screen: command not found</code>命令不存在，可以执行安装命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install screen</span><br/></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install screen</span><br/></pre></td></tr></table></figure>
<p>如果在安装LNMP过程中出现异常中断，在重新登陆VPS后，执行恢复会话命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">screen -r lnmp</span><br/></pre></td></tr></table></figure>
<h3 id="lnmp安装命令："><a class="header-anchor" href="#lnmp安装命令：">¶</a>LNMP安装命令：</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -c http://soft.vpser.net/lnmp/lnmp1.4.tar.gz &amp;&amp; tar zxf lnmp1.4.tar.gz &amp;&amp; cd lnmp1.4 &amp;&amp; ./install.sh lnmp</span><br/></pre></td></tr></table></figure>
<p>运行上述LNMP安装命令后，会出现如下提示：</p>
<p><img alt="" src="http://note.youdao.com/yws/public/resource/b9b29c2f1ddb8b6b21842d69a351e994/xmlnote/81232F4E13F942C5BA576654A49B3740/968"/></p>
<p>按需选择数据库软件版本，这里选择默认2，回车。</p>
<p><img alt="" src="http://note.youdao.com/yws/public/resource/b9b29c2f1ddb8b6b21842d69a351e994/xmlnote/469560E0223743CB81AB0813B83D1D1A/979"/></p>
<p>提示需要设置MySQL的root密码（不输入直接回车将会设置为root），请务必牢记此密码，在下面给网站添加数据库时会用到。输入后回车进入下一步，出现提示：</p>
<p><img alt="" src="http://note.youdao.com/yws/public/resource/b9b29c2f1ddb8b6b21842d69a351e994/xmlnote/A925551CBC2E4A998C77E299B8FE3E07/975"/></p>
<p>询问是否需要启用MySQL InnoDB引擎，InnoDB引擎默认为开启，一般建议开启，直接回车或输入 y ，如果确定确实不需要该引擎可以输入 n，回车完成。这里选择开启，输入y后回车进入下一步。</p>
<p><img alt="" src="http://note.youdao.com/yws/public/resource/b9b29c2f1ddb8b6b21842d69a351e994/xmlnote/3FC3D155E7CE419FBD3238F1E3B85096/972"/></p>
<p>自行选择PHP的版本，这里选默认4，回车进入下一步，选择是否安装内存优化：</p>
<p><img alt="" src="http://note.youdao.com/yws/public/resource/b9b29c2f1ddb8b6b21842d69a351e994/xmlnote/CA44E73157C044758383BC712D108856/980"/></p>
<p>可以选择不安装、Jemalloc或TCmalloc，输入对应序号回车，直接回车为默认为不安装。这里选择默认不安装输入1，回车：</p>
<p><img alt="" src="http://note.youdao.com/yws/public/resource/b9b29c2f1ddb8b6b21842d69a351e994/xmlnote/6AB7FCF7CE21474DBC5849BD1F0AC704/981"/></p>
<p>出现绿色字样 ”Press any key to install…or Press Ctrl+c to cancel” ，再次确认选择无误后，回车开始安装。</p>
<p>安装时间可能会几十分钟到几个小时不等，主要是机器的配置网速等原因会造成影响，大概半小时。</p>
<p>安装完成界面如下：</p>
<p><img alt="" src="http://note.youdao.com/yws/public/resource/b9b29c2f1ddb8b6b21842d69a351e994/xmlnote/30D9A085C35342F6B4C35AC1CA03DF23/964"/></p>
<p>并且Nginx, MySQL, PHP都是running,3306和80端口都存在，并且提示安装时间和”Install lnmp V1.4 completed! enjoy it”的话，说明安装成功。</p>
<p>此时LNMP环境已经在我们的VPS安装完成了。输入VPS的IP访问，你可以看到以下界面:</p>
<p><img alt="" src="http://note.youdao.com/yws/public/resource/b9b29c2f1ddb8b6b21842d69a351e994/xmlnote/73EE6CE4FD0042BDB4D0E5E3576AA532/966"/></p>
<p>安装成功界面是IP访问时的默认界面，建议删除或重命名：</p>
<p>删除：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm-rf index.html</span><br/></pre></td></tr></table></figure>
<h3 id="添加网站-虚拟主机"><a class="header-anchor" href="#添加网站-虚拟主机">¶</a>添加网站（虚拟主机）</h3>
<p>上面的步骤已经完成LNMP环境的安装，现在要创建虚拟主机添加网站，详细可查看<a href="https://lnmp.org/faq/lnmp-vhost-add-howto.html" rel="noopener" target="_blank">LNMP官方说明</a>。</p>
<h4 id="添加域名："><a class="header-anchor" href="#添加域名：">¶</a>添加域名：</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lnmp vhost add</span><br/></pre></td></tr></table></figure>
<p>回车后提示输入域名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">idealli.com（自己的域名）</span><br/></pre></td></tr></table></figure>
<p>回车后提示是否添加更多域名，没有打算在一个博客绑多个域名就不用了。</p>
<p>回车后提示需要设置网站目录，采用默认的<code>/home/wwwroot/</code>域名即可，直接回车。</p>
<p>提示是否启用伪静态，伪静态可以使URL更加简洁也利于SEO，启用输入y后回车，提示启用的程序，输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wordpress</span><br/></pre></td></tr></table></figure>
<p>回车即可。</p>
<p>提示是否启用日志，启用输入y，不启用输入n回车。这里是不启用日志的。</p>
<p>接着提示数据库名和数据库用户名是否保持一致。输入y后回车，然后输入MySQL的root密码（不会显示，在安装LNMP环境过程中你设置好的），回车。</p>
<p>提示输入数据库名，自行设置，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db_sc</span><br/></pre></td></tr></table></figure>
<p>回车后设置数据库密码，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">like_you</span><br/></pre></td></tr></table></figure>
<p>设置好后回车，提示是否添加SSL，如果你有SSL证书输入y回车添加，没有就输入n回车。这里暂时不设置。</p>
<p>最后如下图所示：</p>
<p><img alt="" src="http://note.youdao.com/yws/public/resource/b9b29c2f1ddb8b6b21842d69a351e994/xmlnote/5AE31D16FB604C048E0E38ECF978F6E1/963"/></p>
<p>出现”Press any key to start create virtul host”后，回车确认，开始创建虚拟主机。</p>
<p>添加成功会提示添加的域名、目录、伪静态、日志、数据库、FTP等相关信息，如下图：</p>
<p><img alt="" src="http://note.youdao.com/yws/public/resource/b9b29c2f1ddb8b6b21842d69a351e994/xmlnote/D84CE44F3C4049EE88EC16A6053D33B9/970"/></p>
<h3 id="安装wordpress博客程序"><a class="header-anchor" href="#安装wordpress博客程序">¶</a>安装WordPress博客程序</h3>
<p>比较有名的开源博客程序有WordPress和Typecho。WordPress是一个以PHP和MySQL为平台的个人博客软件，也是一款内容管理系统。WordPress有着许多漂亮的主题和众多强大插件</p>
<h4 id="下载wordpress"><a class="header-anchor" href="#下载wordpress">¶</a>下载WordPress</h4>
<p>登陆VPS，进入添加的域名目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd/home/wwwroot/域名</span><br/></pre></td></tr></table></figure>
<p>回车进入，然后浏览器前往WordPress中文站获取最新的中文版程序包：<a href="https://cn.wordpress.org/txt-download/" rel="noopener" target="_blank">下载页</a></p>
<p><img alt="" src="http://note.youdao.com/yws/public/resource/b9b29c2f1ddb8b6b21842d69a351e994/xmlnote/19212EF07299431B9A34FB64AE5A1DF5/967"/></p>
<p>在wget后空格右键贴入地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://cn.wordpress.org/wordpress-4.9.1-zh_CN.tar.gz</span><br/></pre></td></tr></table></figure>
<p>回车开始下载，下载完成后，执行解压命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar-xzvf wordpress-4.9.1-zh_CN.tar.gz</span><br/></pre></td></tr></table></figure>
<p>回车，等待解压完成后，将解压得到的wordpress文件夹内全部文件移动到当前域名目录下（注意后面还有一个点.）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv wordpress/* .</span><br/></pre></td></tr></table></figure>
<p>回车。现在可以选择删除掉空文件夹wordpress和安装包。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm-rf wordpress</span><br/></pre></td></tr></table></figure>
<p>和</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm-rf wordpress-4.9.1-zh_CN.tar.gz</span><br/></pre></td></tr></table></figure>
<p>修改网站根目录的用户和用户组：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown-Rwww:www/home/wwwroot/域名</span><br/></pre></td></tr></table></figure>
<p>由于LNMP一键安装包禁用了scandir函数，这会导致在WordPress后台看不到安装的主题，所以在这里我们手动取消禁用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed-i&amp;aposs/,scandir//g&amp;apos/usr/local/php/etc/php.ini</span><br/></pre></td></tr></table></figure>
<p>回车，然后重启一下LNMP生效：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lnmp restart</span><br/></pre></td></tr></table></figure>
<p>连接数据库安装网站</p>
<p>最后一步。浏览器地址栏输入你的域名，提示连接数据库：</p>
<p><img alt="" src="http://note.youdao.com/yws/public/resource/b9b29c2f1ddb8b6b21842d69a351e994/xmlnote/381E034558144FE4ACDE85B5DA10333F/965"/></p>
</div>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/57c368d4.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>桃李春风一杯酒，江湖夜雨十年灯</title>
                <link>https://me.idealli.com/post/d46a767e.html</link>
                <guid>https://me.idealli.com/post/d46a767e.html</guid>
                <pubDate>2019-4-15</pubDate>
                <description>
                

最终我还是选择放弃考研了。感到无比的轻松。
01
准备考研的大学生好多，我也是其中之一，准备了大半年，数学快复习完了，专业课也复习一半了。一切都进行地井然有序，如果我没有放弃考研的话，6月份之前应该就可以把数学和专业课第一轮复习完。后面
                </description>
                <content:encoded>
                <![CDATA[<div class="post-body" itemprop="articleBody">
<p><img alt="" src="https://me.idealli.com/images/2019042801.png"/></p>
<p>最终我还是选择放弃考研了。感到无比的轻松。</p>
<p>01</p>
<p>准备考研的大学生好多，我也是其中之一，准备了大半年，数学快复习完了，专业课也复习一半了。一切都进行地井然有序，如果我没有放弃考研的话，6月份之前应该就可以把数学和专业课第一轮复习完。后面六个月足够我把所有都复习一遍。</p>
<p>02</p>
<p>然而这一切都戛然而止，我还是选择了放弃。在朋友眼里这显得有点突然。</p>
<p>我今年22岁了，依然是个经济不独立的理科生，三年的研究生时间，是个很大的时间代价，尤其对于一个一无所有且想在30岁之前有所作为的年轻人。</p>
<p>所以为了能对得起这个时间成本，我定了个很高的目标学校。</p>
<p>很长一段时间都不敢和人说这个目标，毕竟我也不像什么学霸，大家大都是平庸之辈，都要把梦想藏得好好的，怎么能拿出来让人笑话呢。</p>
<p>03</p>
<p>三月，各大互联网公司开始春招，本来我一直视而不见不想去碰，不想自己考研的节奏被打乱，然而三月初一个腾讯的面试电话打过来乱了我的思绪。那是我大二随手投的简历，没想到大三这时候被捞了起来。心就开始乱了，但还是很坚定要考研的，想着就当刷一刷面试经验。</p>
<p>三轮面试过后，无缘腾讯，说实话很失落。</p>
<p>继续复习考研，想要找回节奏，三月中旬华为来学校招聘实习生。我再次投了，这次倒不是为了实习，只是想做证明一下自己还是有点能力的。</p>
<p>四月收到华为offer，再次陷入沉思。没收到offer很失落，收到offer又很纠结，或许要考研的人就不应该去面试，断了后路才能背水一战。然而我没那个勇气自断后路，在纠结中继续复习。后面又投了支付宝的面试。</p>
<p>其实内心还是很想早点去工作的。</p>
<p>04</p>
<p>过年的时候在家里和老爸还有一个叔叔喝茶，那个叔叔谈到我以后在哪里工作结婚买房的问题，我爸苦笑着，一脸歉意的和我说，这些都得靠你自己了</p>
<p>我鼻子一酸，说没事我本来就是要靠我自己的。</p>
<p>鼻子酸的原因是我不想看到爸爸那个无能为力又内疚的表情，他们付出已经够多了，我也没想再得到什么，只是不想让他们对自己不能帮到我什么而感到内疚。这个担子本就应该由我来承担。</p>
<p>只是考研的话，意味着又是三年没有收入来源的时间。爸爸说没事你读研吧，家里情况过一两年就好了，盖房子的欠款也快还清了，你放心大胆地去读，读到博士也没关系。</p>
<p>读完研我就26了，如果30岁之前结婚，4年时间我该如何给未来的人和家庭充分的物质生活。厦门岛外80平地房子两百多万，深圳上海北京就不用说了，为了机遇我也想去北上广工作，可是无力感袭来。会怀疑自己到底能不能在城市站住脚。</p>
<p>教育真的是建立在物质上的，物质优越的人会有更大概率获得优质教育，而这又很大概率让他们成为优秀的人，周而复始，差距越来越大。</p>
<p>05</p>
<p>某一个微风徐徐的下午我去澡堂洗澡，黄昏时分，路上行人缓缓，满是春天的味道。我在澡堂的喷头下淋雨，没有声音，然后就哽咽了，自己也不知道自己为何控制不住，不知从何而来的情绪袭来，突然就泣不成声，没有任何缘由。</p>
<p>压抑太久了，自己也不知道自己有压力，只是机械地重复每一天，复习，学习，提升自己，很充实也很快乐，以后的事情不去想就是了。可能哪天在一个安静地无人地地方空闲下来，莫名的悲凉立刻就涌上来了，抵挡不住。</p>
<p>考研压力真的很大，不像高考，成绩是看得见的，可以很清除地知道自己是什么水平，在什么层次上。而考研就像黑屋子里洗衣服，不知道洗干净了没，也不知道哪个地方没洗干净，只有等到开灯了你才能知道结果。</p>
<p>这时候华为的offer对我来说就像一种救赎，在黑夜里赶路的人不知道终点有多远，也不知道自己走的路是否正确，只有一个虚无缥缈的终点信念支撑着，或许哪个终点根本就不存在，这时有人对你说，跟他走吧，他能带你去另一个终点，你也不用在迷茫了。多么诱人，心一下就乱了，给平庸的我一丝希望。</p>
<p>考研考不上怎么办，我想我是绝对不可能二战的，那就工作吧，只是这一年的复习时间，什么项目也没做，很难找到大厂的职位，这也是时间代价。其实考虑的因素有很多，我也不知道这个决定是正确还是错误的。也永远无法知道，两条路你只能知道其中一条路的终点是什么。</p>
<p>06</p>
<p>想起过年的时候堂哥问我毕业后要去创业吗，我苦笑着，拿什么创业。虽然现在我仍然一无所有，但我不能30岁的时候也一无所有吧。</p>
<p>创业成功或许能让我一次飞跃上一个阶级，但是我也无法承受创业失败的风险。有人说，能有什么风险？不就从头再来吗？对，是从头再来，说的是很洒脱。而那几年的时间是多大的成本我想没有一个普通家庭的年轻人能够承受的。毕业就去创业在我看来更像一场赌博。</p>
<p>这辈子最讨厌的就是赌博。</p>
<p>当然不是说创业者坏话，还是很敬佩那些年轻的创业者，但是毕竟一将功成万骨枯。</p>
<p>07</p>
<p>或许这应该是大部分90后的真实现状吧。又一次站在人生的十字路口，到了扛起责任的年纪，到了该为自己未来负责的时候了。我们都是第一次面对这样的压力，面对魔幻的房价，面对零零碎碎的生活，面对两难的选择。</p>
<p>此时你回想起十一二三岁那年推着自行车走在放学回家的小路上，田边黄狗刨地，树上鸟儿轻吟，揣着一兜的弹珠像个威风八面的小将军。</p>
<p>仿佛看到少年嬉皮笑脸地站在面前，心疼地对你说，要努力生活哦！</p>
<p>鲜衣怒马的少年郎，一晃十年时间已过，坐在图书馆自习室靠着窗台，生活依然像回忆一样安静，或许也只是最后的安静吧。</p>
<p>十年前小学毕业那天，班主任说，十年后我们在这里聚一次。</p>
<p>那天我和发小走在回家路上，路上竟然很是安静，没什么人，也没什么特别的事，脑袋中想着十年那可是好遥远的事情呢。</p>
<p>这么遥远的事情尽然就在眼前了，仿佛午后四五点午睡醒对着昏暗的房间，昏昏沉沉时间就没了。</p>
<p>初二的时候一位物理老师问我的理想是什么，我说我想成为很厉害的人，那种所有人都能记住我名字的。然而现在看来，这个理想还有点虚无缥缈，我连大学老师都没几个知道我的名字，平庸地像所有平庸的人。</p>
<p>其实我一直是个自谕不凡的人，即使未来可能连大城市的房子都买不起，但我还是抱有幻想，你说这江湖，下一个十年会不会出现我的名字？</p>
</div>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/d46a767e.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>深度学习预热——Numpy库的简单使用</title>
                <link>https://me.idealli.com/post/7d96d4e6.html</link>
                <guid>https://me.idealli.com/post/7d96d4e6.html</guid>
                <pubDate>2019-4-9</pubDate>
                <description>
                

Python等动态类型语言一般比C和C等静态类型语言运算速度慢。实际上，如果是运算量大的处理对象，用C/C写程序更好。为此，当Python中追求性能时，人们会用C/C来实现处理的内容。Python则承担“中间人”的角色，负责调用那些用C
                </description>
                <content:encoded>
                <![CDATA[<div class="post-body" itemprop="articleBody">
<blockquote>
<p>Python等动态类型语言一般比C和C<ins>等静态类型语言运算速度慢。实际上，如果是运算量大的处理对象，用C/C</ins>写程序更好。为此，当Python中追求性能时，人们会用C/C<ins>来实现处理的内容。Python则承担“中间人”的角色，负责调用那些用C/ C</ins>写的程序。NumPy中，主要的处理也都是通过C或C++实现的。 因此，我们可以在不损失性能的情况下，使用Python便利的语法</p>
</blockquote>
<h3 id="numpy-的算术运算"><a class="header-anchor" href="#numpy-的算术运算">¶</a>NumPy 的算术运算</h3>
<p>下面是NumPy数组的算术运算的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; x = np.array([1.0, 2.0, 3.0])</span><br/><span class="line">&gt;&gt;&gt; y = np.array([2.0, 4.0, 6.0])</span><br/><span class="line">&gt;&gt;&gt; x + y  # 对应元素的加法</span><br/><span class="line"> array([ 3.,  6., 9.]) </span><br/><span class="line">&gt;&gt;&gt; x - y</span><br/><span class="line"> array([ -1.,  -2., -3.]) </span><br/><span class="line">&gt;&gt;&gt; x * y  # element-wise product</span><br/><span class="line"> array([  2.,   8.,  18.]) </span><br/><span class="line">&gt;&gt;&gt; x / y</span><br/><span class="line"> array([ 0.5,  0.5,  0.5])</span><br/></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="numpy的n维数组"><a class="header-anchor" href="#numpy的n维数组">¶</a>NumPy的N维数组</h3>
<p>NumPy不仅可以生成一维数组（排成一列的数组），也可以生成多维数组。 比如，可以生成如下的二维数组（矩阵）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; A = np.array([[1, 2], [3, 4]]) </span><br/><span class="line">&gt;&gt;&gt; print(A)</span><br/><span class="line"> [[1 2] [3 4]] </span><br/><span class="line">&gt;&gt;&gt; A.shape </span><br/><span class="line">(2, 2) </span><br/><span class="line">&gt;&gt;&gt; A.dtype </span><br/><span class="line">dtype(&amp;aposint64&amp;apos)</span><br/></pre></td></tr></table></figure>
<p>这里生成了一个2×2的矩阵A。另外，矩阵A的形状可以通过shape查看， 矩阵元素的数据类型可以通过dtype查看。下面，我们来看一下矩阵的算术运算。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; B = np.array([[3, 0],[0, 6]]) </span><br/><span class="line">&gt;&gt;&gt; A + B </span><br/><span class="line">array([[ 4,  2],</span><br/><span class="line">       [ 3, 10]]) </span><br/><span class="line">&gt;&gt;&gt; A * B </span><br/><span class="line">array([[ 3,  0], </span><br/><span class="line">      [ 0, 24]])</span><br/><span class="line">``` </span><br/><span class="line"> </span><br/><span class="line">NumPy数组（np.array）可以生成N维数组，即可以生成一维数组、 二维数组、三维数组等任意维数的数组。数学上将一维数组称为向量， 将二维数组称为矩阵。另外，可以将一般化之后的向量或矩阵等统 称为张量（tensor）。本书基本上将二维数组称为“矩阵”，将三维数 组及三维以上的数组称为“张量”或“多维数组”</span><br/><span class="line"> </span><br/><span class="line"> </span><br/><span class="line">### 广播</span><br/><span class="line"></span><br/><span class="line">NumPy中，形状不同的数组之间也可以进行运算。之前的例子中，在 2×2的矩阵A和标量10之间进行了乘法运算。在这个过程中，如图1-1所示， 标量10被扩展成了2×2的形状，然后再与矩阵A进行乘法运算。这个巧妙 的功能称为广播（broadcast）。</span><br/><span class="line"></span><br/><span class="line">![image](https://note.youdao.com/yws/public/resource/10e4aca0d4cfd4a641afb8cae71b9f22/xmlnote/OFFICE8FC134D336E347B8BD38AE99EDEBD202/28)</span><br/><span class="line"></span><br/><span class="line">![image](https://note.youdao.com/yws/public/resource/10e4aca0d4cfd4a641afb8cae71b9f22/xmlnote/OFFICE495F0A5511BF49D0A070CC44014055EA/30)</span><br/><span class="line"></span><br/><span class="line">![](https://note.youdao.com/yws/public/resource/10e4aca0d4cfd4a641afb8cae71b9f22/xmlnote/OFFICE8C0E9A58138448198976AF6FE0F2AB9D/31)</span><br/><span class="line"> </span><br/><span class="line">我们通过下面这个运算再来看一个广播的例子。</span><br/></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<blockquote>
<p>A = np.array([[1, 2], [3, 4]])<br/>
B = np.array([10, 20])<br/>
A * B<br/>
array([[ 10, 40],<br/>
[ 30, 80]])</p>
</blockquote>
</blockquote>
</blockquote>
<pre><code>
在这个运算中，如图1-2所示，一维数组B被“巧妙地”变成了和二位数 组A相同的形状，然后再以对应元素的方式进行运算。 综上，因为NumPy有广播功能，所以不同形状的数组之间也可以顺利 地进行运算。

![image](https://note.youdao.com/yws/public/resource/10e4aca0d4cfd4a641afb8cae71b9f22/xmlnote/OFFICE66577B46D6E042E5A03DCF05A0C4CAAC/29)
 
运用这个标记法，可以获取满足一定条件的元素。例如，要从X中抽出 大于15的元素，可以写成如下形式。
 

对NumPy数组使用不等号运算符等（上例中是X &gt; 15） ,结果会得到一个 布尔型的数组。上例中就是使用这个布尔型数组取出了数组的各个元素（取 出True对应的元素）。
 
 
### 多维数组的运算
 
</code></pre>
<blockquote>
<blockquote>
<blockquote>
<p>A = np.array([[1,2], [3,4]])<br/>
A.shape<br/>
(2, 2)</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>B = np.array([[5,6], [7,8]])<br/>
B.shape<br/>
(2, 2)</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>np.dot(A, B)<br/>
array([[19, 22],<br/>
[43, 50]])</p>
</blockquote>
</blockquote>
</blockquote>
<pre><code>这里，A和B都是2×2的矩阵，它们的乘积可以通过NumPy的 np.dot()函数计算（乘积也称为点积）。np.dot()接收两个NumPy数组作为参 数，并返回数组的乘积。这里要注意的是，np.dot(A, B)和np.dot(B, A)的 值可能不一样。
 
2×3的矩阵和3×2 的矩阵的乘积 可按如下形式用Python来实现。

![](https://note.youdao.com/yws/public/resource/10e4aca0d4cfd4a641afb8cae71b9f22/xmlnote/OFFICEA29B6568F4D445C7B1042BCA3C5A4696/32)
 
### 神经网络的内积
 
使用NumPy矩阵来实现神经网络。以图3-14中的简 单神经网络为对象。这个神经网络省略了偏置和激活函数，只有权重
![](https://note.youdao.com/yws/public/resource/10e4aca0d4cfd4a641afb8cae71b9f22/xmlnote/OFFICE443FC9256943447986747741E153314E/33)
 
实现该神经网络时，要注意X、W、Y的形状，特别是X和W的对应 维度的元素个数是否一致，这一点很重要
 
![](https://note.youdao.com/yws/public/resource/10e4aca0d4cfd4a641afb8cae71b9f22/xmlnote/OFFICEB77E7C3ACEDC4574A231DFF21AA51463/34)

使用np.dot（多维数组的点积），可以一次性计算出Y 的结果。 这意味着，即便Y 的元素个数为100或1000，也可以通过一次运算就计算出 结果！如果不使用np.dot，就必须单独计算Y 的每一个元素（或者说必须使 用for语句），非常麻烦
 
 
---

 
**注**:本文为**斋藤康毅**的《**深度学习入门：基于Python的理论与实现**》片段摘抄与学习笔记</code></pre>
</div>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/7d96d4e6.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>华为勇敢星实习生面试经历，已拿offer</title>
                <link>https://me.idealli.com/post/b09b1c0c.html</link>
                <guid>https://me.idealli.com/post/b09b1c0c.html</guid>
                <pubDate>2019-4-8</pubDate>
                <description>
                
两个礼拜前，华为来学校招实习生（勇敢星实习）我也随便跟着投一投。很快便收到了性格测试的链接，这玩意正常填写就好了，但是不知道为什么很多同学的性格测试都不行，现场被要求重做。
礼拜二面试，早上九点多去了现场，路上很多人拿着简历回去了（直接回
                </description>
                <content:encoded>
                <![CDATA[<div class="post-body" itemprop="articleBody">
<p>两个礼拜前，华为来学校招实习生（勇敢星实习）我也随便跟着投一投。很快便收到了性格测试的链接，这玩意正常填写就好了，但是不知道为什么很多同学的性格测试都不行，现场被要求重做。</p>
<p>礼拜二面试，早上九点多去了现场，路上很多人拿着简历回去了（直接回去的基本一面没过）<br/>
发现现场还有两三个同学，感觉轻松挺多，登记了下在旁边等待，人不多，十来分钟就到我了。</p>
<p>不得不说，华为的面试难度相比BAT互联网大厂要小很多，基本没问什么技术问题，大多聊项目啥的。相比上次腾讯的全程技术问题简直轻松多了。后来看网上说，华为去985学校收人很松的，基本都能过（瞬间没什么拿offer的骄傲了）</p>
<a id="more"></a>
<h3 id="一面"><a class="header-anchor" href="#一面">¶</a>一面</h3>
<p>一面是一个中年男人，全程都在看自己的电脑，偶尔抬头看下我，问了项目，问了技术栈，由于没问什么技术问题我读忘了他问了啥了，大概二十多分钟后让我在旁边休息区等着，同样在旁边等待的还有七八个人（一面没过的直接回去了）</p>
<h3 id="综合面试"><a class="header-anchor" href="#综合面试">¶</a>综合面试</h3>
<p>过了十来分钟一个小姐姐过来说让我去二面那排队，过去排队，前面还有两三个人。<br/>
综合面试一共两个面试官，有个年轻男人很健谈，每个面试者都聊了好久，其实我挺想被安排和他聊，还是喜欢这种热情nice有话题的面试官小哥哥。后来也如我所愿，被安排到那个小哥哥那里面了，真的很能聊。</p>
<p>期间和我这个菜鸡说了算法岗位的一些业界情况，然后看了简历让我说个爬虫项目，我说了个掘金动态加载页面的爬虫，然后也没其他的技术问题。</p>
<p>聊了些生活问题，比如平常有什么爱好，看什么动漫，喜欢跑步吗，聊一聊感情史<br/>
然后我又说了女朋友异地，小哥哥说工作后还是在一个地方好。</p>
<p>聊了聊其他的，然后说了实习生的薪资和待遇，面试就结束了</p>
<h3 id="机试"><a class="header-anchor" href="#机试">¶</a>机试</h3>
<p>当天下午就收到华为的机试（原先应该是先机试在面试的，但是华为提前来学校了，就跳过机试）所以明白今天的面试应该是过了，不过机试还是要做的，满分600网上说机试100分就可以面试了，我考了400，不过感觉还是没做好，华为机试题也算是比较简单了。</p>
<p>等了两天，官网状态变为<strong>面试完成录用排序中</strong>，算是进入资源池了，看网上说要等很久才能收到offer，结果过了两天就收到offer了，可能机试成绩稍微靠前点排序比较靠前吧。</p>
<p>后面问了同班几个同学，只有我过了，隔壁班也只有一个过了，基地班两个有机试，不知道过了没。</p>
<h3 id="最后总结"><a class="header-anchor" href="#最后总结">¶</a>最后总结</h3>
<p>在985学校的计算机专业尽可以大胆地投华为这些大厂的实习，毕竟还是有点学历加成，而且光脚不怕穿鞋的。<br/>
当然，还是要有专业能力的，学历只是敲门砖，只是让hr多看你的简历一眼，要是你资质平平，面试的时候照样过滤掉。</p>
<p>几点建议：</p>
<ol>
<li>
<p>写简历的时候尽量把项目经历写的详细点，突出几个难点</p>
</li>
<li>
<p>要有一两个比较侧重的技能，比如c++比较熟</p>
</li>
<li>
<p>简历写好后要做好面试官指着简历内容问的准备，对自己简历写的内容要了然于心</p>
</li>
</ol>
<p>还是很感谢华为给的面试机会与实习机会，相对轻松，不过后来看网上说华为岗位随机安排有点退缩了，另外实习地点为西安，个人还是想去北上广深。</p>
<p>目前华为还没联系我具体的实习签约，所以还不是很了解，了解了在做安排。<br/>
继续准备后天支付宝的面试，加油，还是很希望能收到支付宝的offer，挺向往支付宝的工作环境哈哈<br/>
（一点都没有要考研的样子！！！）</p>
</div>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/b09b1c0c.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>机器学习常见算法模型练习——线性回归</title>
                <link>https://me.idealli.com/post/13b460a8.html</link>
                <guid>https://me.idealli.com/post/13b460a8.html</guid>
                <pubDate>2019-3-24</pubDate>
                <description>
                
¶什么是线性回归
最简单的线性回归就是直接利用一条直线拟合二维平面上的一系列点，目的是利用这条直线概括所有训练集中样本的散布规律或趋势，最终用于新样本点的预测。二维平面上直线方程的一般形式为y=ax+b，使用训练集中的数据以某种方式训练该
                </description>
                <content:encoded>
                <![CDATA[<div class="post-body" itemprop="articleBody">
<h2 id="什么是线性回归"><a class="header-anchor" href="#什么是线性回归">¶</a>什么是线性回归</h2>
<p>最简单的线性回归就是直接利用一条直线拟合二维平面上的一系列点，目的是利用这条直线概括所有训练集中样本的散布规律或趋势，最终用于新样本点的预测。二维平面上直线方程的一般形式为y=ax+b，使用训练集中的数据以某种方式训练该模型后，就可以确定方程中的两个参数a,b的最优值。后面如果观察到了新的样本xi，就可以带入上面学习到的公式计算y的值了。</p>
<p>在三维空间中，需要学习的是确定一个二维平面的参数；</p>
<p>以此类推，在n维空间中，需要学习的是确定一个n−1维的超平面的参数.</p>
<p>之所以称该方法为线性模型，是因为该模型是由所有特征的线性组合构成的，基本形式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">y^=hθ(x)=θ0+θ1x1+θ2x2+⋯+θnxn⋯ (1−1)</span><br/></pre></td></tr></table></figure>
<ol>
<li>y^表示线性回归模型的预测值（相对于真实观察值）;</li>
<li>n表示特征的数量;</li>
<li>xi表示第i个特征的观察值;</li>
<li>θj表示第j个参数的值.</li>
<li>如果模型包括n个特征，那么就会包括n+1个参数，还包括常数项（还是被称为截距）。</li>
</ol>
<a id="more"></a>
<p>式子(1-1)使用向量化形式可以表示为hθ=θT⋅x, 在多样本的情况下通常表示为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hθ(x)=X⋅θ⋯ (1−2)</span><br/></pre></td></tr></table></figure>
<ul>
<li>X是m⋅(n+1)的矩阵，其中m表示样本的数量;</li>
<li>θ是包含所有参数的列向量，长度为n+1.<br/>
式子(1-2)表示所有样本值的矩阵与对应参数向量的乘积，属于矩阵乘法((Matrix multiplication)。</li>
</ul>
<h2 id="线性回归的代价函数"><a class="header-anchor" href="#线性回归的代价函数">¶</a>线性回归的代价函数</h2>
<p>假设现在有了训练数据和模型，那么要怎么开始训练呢？这时候就必须定义一个代价函数，代价函数量化了模型预测值与实际观察值之间的误差大小。有了代价函数就可以评价取当前参数时模型性能的好坏。</p>
<p>在选择一个恰当的代价函数后，整个模型的训练过程就是求代价函数最小值的过程。这个过程并不容易，可能会出现下面两种情况：</p>
<ol>
<li>得到<strong>全局最优解</strong>：即代价函数的最小值；</li>
<li>得到<strong>局部最优解</strong>：由于很多原因我们可能仅仅只能求的代价函数在某个区间内的极小值.</li>
</ol>
<p>如果代价函数是一个凸函数（convex function），那么从数学上可以保证肯定能求得全局最优解；如果代价函数是非凸函数，就无法从理论上保证最终能得到代价函数的全局最优解（NP-hard问题）。</p>
<p>对于线性回归算法，比较常用的代价函数是均方误差(Mean Square Error, MSE)函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E = ∑(h(Xi)-Yi)^2 = ∑[(WXi + b) - Yi ]^2</span><br/></pre></td></tr></table></figure>
<ul>
<li>上式表示所有模型的预测值与实际观察值之差的平方和，因此训练集中任何一个实际观察值与模型预测值之间的误差都包含在了这个公式中；</li>
<li>为了求导方便，有时添加了一个系数1/2；</li>
<li>该函数是一个凸函数.</li>
</ul>
<h2 id="利用梯度下降训练模型"><a class="header-anchor" href="#利用梯度下降训练模型">¶</a>利用梯度下降训练模型</h2>
<p>梯度下降几乎可以说是机器学习算法中，训练模型和调参最重要的方法了。梯度就是所有偏导数构成的向量。因为计算代价函数的梯度需要求导，这里应该是机器学习中使用微积分最多的地方了。</p>
<h3 id="梯度下降的一般步骤"><a class="header-anchor" href="#梯度下降的一般步骤">¶</a>梯度下降的一般步骤</h3>
<ol>
<li>参数的初始化：通常所有参数都初始化为1；</li>
<li>确定学习率；</li>
<li>求代价函数的梯度（所有参数的偏导数）；</li>
<li>所有参数都沿梯度方向移动一步，步长就是学习率的大小；</li>
<li>重复步骤4直到参数不再发生变化（此时取到极值点，梯度为0）或达到预先设定的迭代次数.</li>
</ol>
<h3 id="学习率"><a class="header-anchor" href="#学习率">¶</a>学习率</h3>
<p>学习率一般用希腊字母α表示，可能需要多尝试几次，才能找到合适的学习率。过大的学习率会导致梯度下降时越过代价函数的最小值点，随着训练步数的增加，代价函数不减反增；如果学习率太小，训练中的每一步参数的变化会非常小，这时可以看到代价函数的值在不断减小，但是需要非常大的迭代次数才能到达代价函数的最小值点。</p>
<p>按照吴恩达老师的建议，每次可以3倍放大或者3倍缩小来调整，直到找到合适的学习率。</p>
<p><img alt="" src="https://images2018.cnblogs.com/blog/1035701/201803/1035701-20180302101623727-1532524307.jpg"/></p>
<p>学习率过大会导致参数的取值越过最小值点；学习率过小会导致参数变化缓慢</p>
<h3 id="代价函数的梯度"><a class="header-anchor" href="#代价函数的梯度">¶</a>代价函数的梯度</h3>
<p>在机器学习中，对代价函数包含的每一个参数求偏导数，这些偏导数组成的向量就是代价函数的梯度。</p>
<p>这个时候就要用到微积分中求导数的知识了。</p>
<p>均方误差函数的梯度，<a href="http://www.cnblogs.com/Belter/p/6653773.html" rel="noopener" target="_blank">详细内容见梯度下降介绍</a></p>
<h2 id="一个简单的线性回归模型训练"><a class="header-anchor" href="#一个简单的线性回归模型训练">¶</a>一个简单的线性回归模型训练</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br/><span class="line"></span><br/><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br/><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br/><span class="line">m = <span class="number">100</span>  <span class="comment"># 样本量</span></span><br/><span class="line">X = <span class="number">2</span> * np.random.rand(m, <span class="number">1</span>)  <span class="comment"># 取大小在区间(0, 1)上的随机数，构成一个100*1的矩阵</span></span><br/><span class="line">y = <span class="number">5</span> + <span class="number">2</span> * X + np.random.rand(m, <span class="number">1</span>)</span><br/><span class="line"></span><br/><span class="line"><span class="comment"># J = ∑(hθ(x(i))−y(i))^2</span></span><br/><span class="line"><span class="comment"># 计算代价函数</span></span><br/><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">L_theta</span><span class="params">(theta, X_x0, y)</span>:</span>     </span><br/><span class="line">        <span class="keyword">return</span> np.sum(np.square(np.dot(X_x0, theta) - y))  <span class="comment"># np.dot 表示矩阵乘法</span></span><br/><span class="line">    </span><br/><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_regression</span><span class="params">(rate,tim)</span>:</span></span><br/><span class="line">        T = tim  <span class="comment"># 迭代次数</span></span><br/><span class="line">        X_x0 = np.c_[np.ones((m, <span class="number">1</span>)), X]  <span class="comment"># ADD X0 = 1 to each instance</span></span><br/><span class="line">        theta=np.ones((<span class="number">2</span>, <span class="number">1</span>))</span><br/><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(T):</span><br/><span class="line">                theta[<span class="number">0</span>, <span class="number">0</span>] -= rate * (<span class="number">1</span>/m * np.sum(np.dot(X_x0, theta) - y))</span><br/><span class="line">                theta[<span class="number">1</span>, <span class="number">0</span>] -= rate * (<span class="number">1</span>/m * np.sum(np.dot(np.transpose(X), np.dot(X_x0, theta) - y)))</span><br/><span class="line">        <span class="keyword">return</span> theta</span><br/><span class="line">        </span><br/><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br/><span class="line">        theta = linear_regression(<span class="number">0.006</span>,<span class="number">1000</span>)</span><br/><span class="line">        x2 = np.linspace(<span class="number">0</span>, <span class="number">2</span>, <span class="number">100</span>)</span><br/><span class="line">        y2 = theta[<span class="number">1</span>,<span class="number">0</span>] * x2 + theta[<span class="number">0</span>,<span class="number">0</span>]</span><br/><span class="line">        plt.plot(X, y, <span class="string">"b."</span>)</span><br/><span class="line">        plt.plot(x2,y2,color=<span class="string">red</span>)</span><br/><span class="line">        plt.show()</span><br/></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/Belter/p/8487002.html" rel="noopener" target="_blank">来源文章</a><br/>
<a href="http://www.cnblogs.com/Belter/p/6653773.html" rel="noopener" target="_blank">梯度下降介绍</a></p>
</div>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/13b460a8.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>机器学习常见算法模型练习——决策树</title>
                <link>https://me.idealli.com/post/a9a07428.html</link>
                <guid>https://me.idealli.com/post/a9a07428.html</guid>
                <pubDate>2019-3-21</pubDate>
                <description>
                
¶决策树
以下概念介绍转自——参考文章：决策树算法介绍及应用
决策树是附加概率结果的一个树状的决策图，是直观的运用统计概率分析的图法。机器学习中决策树是一个预测模型，它表示对象属性和对象值之间的一种映射，树中的每一个节点表示对象属性的判断
                </description>
                <content:encoded>
                <![CDATA[<div class="post-body" itemprop="articleBody">
<h2 id="决策树"><a class="header-anchor" href="#决策树">¶</a>决策树</h2>
<p>以下概念介绍转自——参考文章：<a href="https://www.ibm.com/developerworks/cn/analytics/library/ba-1507-decisiontree-algorithm/index.html" rel="noopener" target="_blank">决策树算法介绍及应用</a><br/>
决策树是附加概率结果的一个树状的决策图，是直观的运用统计概率分析的图法。机器学习中决策树是一个预测模型，它表示对象属性和对象值之间的一种映射，树中的每一个节点表示对象属性的判断条件，其分支表示符合节点条件的对象。树的叶子节点表示对象所属的预测结果。</p>
<a id="more"></a>
<h3 id="决策树案例"><a class="header-anchor" href="#决策树案例">¶</a>决策树案例</h3>
<p><img alt="" src="https://www.ibm.com/developerworks/cn/analytics/library/ba-1507-decisiontree-algorithm/img01.png"/></p>
<p>上图是一棵结构简单的决策树，用于预测贷款用户是否具有偿还贷款的能力。贷款用户主要具备三个属性：是否拥有房产，是否结婚，平均月收入。每一个内部节点都表示一个属性条件判断，叶子节点表示贷款用户是否具有偿还能力。例如：用户甲没有房产，没有结婚，月收入 5K。通过决策树的根节点判断，用户甲符合右边分支 (拥有房产为“否”)；再判断是否结婚，用户甲符合左边分支 (是否结婚为否)；然后判断月收入是否大于 4k，用户甲符合左边分支 (月收入大于 4K)，该用户落在“可以偿还”的叶子节点上。所以预测用户甲具备偿还贷款能力。</p>
<h3 id="决策树建立"><a class="header-anchor" href="#决策树建立">¶</a>决策树建立</h3>
<p>本文上一节已经讨论如何用一棵决策树进行分类。本节将通过特征选择、剪枝，介绍如何根据已有的样本数据建立一棵决策树。</p>
<p>首先介绍下特征选择。选择一个合适的特征作为判断节点，可以快速的分类，减少决策树的深度。决策树的目标就是把数据集按对应的类标签进行分类。最理想的情况是，通过特征的选择能把不同类别的数据集贴上对应类标签。特征选择的目标使得分类后的数据集比较纯。如何衡量一个数据集纯度，这里就需要引入数据纯度函数。下面将介绍两种表示数据纯度的函数。</p>
<h4 id="信息增益"><a class="header-anchor" href="#信息增益">¶</a>信息增益</h4>
<p>信息熵表示的是不确定度。均匀分布时，不确定度最大，此时熵就最大。当选择某个特征对数据集进行分类时，分类后的数据集信息熵会比分类前的小，其差值表示为信息增益。信息增益可以衡量某个特征对分类结果的影响大小。</p>
<p>假设在样本数据集 D 中，混有 c 种类别的数据。构建决策树时，根据给定的样本数据集选择某个特征值作为树的节点。在数据集中，可以计算出该数据中的信息熵：</p>
<p><img alt="" src="https://www.ibm.com/developerworks/cn/analytics/library/ba-1507-decisiontree-algorithm/img02.png"/></p>
<p>其中 D 表示训练数据集，c 表示数据类别数，Pi 表示类别 i 样本数量占所有样本的比例。</p>
<p>对应数据集 D，选择特征 A 作为决策树判断节点时，在特征 A 作用后的信息熵的为 Info(D)，计算如下：</p>
<p><img alt="" src="https://www.ibm.com/developerworks/cn/analytics/library/ba-1507-decisiontree-algorithm/img03.png"/></p>
<p>其中 k 表示样本 D 被分为 k 个部分。</p>
<p>信息增益表示数据集 D 在特征 A 的作用后，其信息熵减少的值。公式如下：</p>
<p><img alt="" src="https://www.ibm.com/developerworks/cn/analytics/library/ba-1507-decisiontree-algorithm/img04.png"/></p>
<p>对于决策树节点最合适的特征选择，就是 Gain(A) 值最大的特征。</p>
<h2 id="算法"><a class="header-anchor" href="#算法">¶</a>算法</h2>
<p>找bug太累了！！！</p>
<h4 id="计算信息熵"><a class="header-anchor" href="#计算信息熵">¶</a>计算信息熵</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_san</span><span class="params">(data)</span>:</span> <span class="comment">#计算信息熵</span></span><br/><span class="line">    count = {}</span><br/><span class="line">    index = {}</span><br/><span class="line">    i = - <span class="number">1</span></span><br/><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> data:</span><br/><span class="line">        charge = a[<span class="number">-1</span>]</span><br/><span class="line">        <span class="keyword">if</span> str(charge) <span class="keyword">in</span> index:</span><br/><span class="line">            temp = index[str(charge)]</span><br/><span class="line">            count[temp] = count[temp] + <span class="number">1</span></span><br/><span class="line">        <span class="keyword">else</span>:</span><br/><span class="line">            i += <span class="number">1</span></span><br/><span class="line">            index[str(charge)] = i</span><br/><span class="line">            count[i] = <span class="number">1</span></span><br/><span class="line">    total = <span class="number">0</span></span><br/><span class="line">    info = <span class="number">0.0</span></span><br/><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(len(count)):</span><br/><span class="line">        total = total + count[t]</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(len(count)):</span><br/><span class="line">        r = count[t] / float(total)</span><br/><span class="line">        info = info - r * math.log(r,<span class="number">2</span>)</span><br/><span class="line">    </span><br/><span class="line">    <span class="keyword">return</span> info</span><br/></pre></td></tr></table></figure>
<h4 id="划分数据集并计算划分后的信息熵"><a class="header-anchor" href="#划分数据集并计算划分后的信息熵">¶</a>划分数据集并计算划分后的信息熵</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">splitData</span><span class="params">(data, proper)</span>:</span> <span class="comment">#划分数据集并计算划分后的信息熵</span></span><br/><span class="line">    proper_key = []</span><br/><span class="line">    proper_item = {}</span><br/><span class="line">    cut = <span class="number">0</span></span><br/><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br/><span class="line">        value = str(d[proper])</span><br/><span class="line">        <span class="keyword">if</span>  value <span class="keyword">in</span> proper_item:</span><br/><span class="line">            proper_item[value].append(d)</span><br/><span class="line">        <span class="keyword">else</span>:</span><br/><span class="line">            proper_item[value] = []</span><br/><span class="line">            proper_key.append(value)</span><br/><span class="line">    info = <span class="number">0</span></span><br/><span class="line">    <span class="keyword">for</span> pk <span class="keyword">in</span> proper_key:</span><br/><span class="line">        min_data = proper_item[pk]</span><br/><span class="line">        r = len(min_data) / float(len(data))</span><br/><span class="line">        info = info + r * calc_san(min_data)</span><br/><span class="line">    <span class="keyword">return</span> {<span class="string">info</span>:info,<span class="string">key</span>:proper,<span class="string">value</span>:proper_key,<span class="string">data</span>:proper_item}</span><br/></pre></td></tr></table></figure>
<h4 id="选择一个最好的属性"><a class="header-anchor" href="#选择一个最好的属性">¶</a>选择一个最好的属性</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chooseBestProper</span><span class="params">(data,com_key)</span>:</span> <span class="comment"># 根据信息增益，选择一个最好的属性</span></span><br/><span class="line">    cur_info = calc_san(data[<span class="number">1</span>])</span><br/><span class="line">    cur_data = {}</span><br/><span class="line">    gain = <span class="number">0</span></span><br/><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> range(len(data[<span class="number">0</span>])<span class="number">-1</span>):</span><br/><span class="line">        <span class="keyword">if</span> data[<span class="number">0</span>][p] <span class="keyword">in</span> com_key:</span><br/><span class="line">            <span class="keyword">continue</span></span><br/><span class="line">        p_data = splitData(data[<span class="number">1</span>],p)</span><br/><span class="line">        <span class="keyword">if</span> cur_info - p_data[<span class="string">info</span>] &gt; gain:</span><br/><span class="line">            gain = cur_info - p_data[<span class="string">info</span>]</span><br/><span class="line">            cur_data = p_data</span><br/><span class="line">    </span><br/><span class="line">    <span class="keyword">return</span> cur_data</span><br/></pre></td></tr></table></figure>
<h3 id="数据集"><a class="header-anchor" href="#数据集">¶</a>数据集</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">编号,色泽,根蒂,敲声,纹理,脐部,触感,好瓜</span><br/><span class="line">1,青绿,蜷缩,浊响,清晰,凹陷,硬滑,是</span><br/><span class="line">2,乌黑,蜷缩,沉闷,清晰,凹陷,硬滑,是</span><br/><span class="line">3,乌黑,蜷缩,浊响,清晰,凹陷,硬滑,是</span><br/><span class="line">4,青绿,蜷缩,沉闷,清晰,凹陷,硬滑,是</span><br/><span class="line">5,浅白,蜷缩,浊响,清晰,凹陷,硬滑,是</span><br/><span class="line">6,青绿,稍蜷,浊响,清晰,稍凹,软粘,是</span><br/><span class="line">7,乌黑,稍蜷,浊响,稍糊,稍凹,软粘,是</span><br/><span class="line">8,乌黑,稍蜷,浊响,清晰,稍凹,硬滑,是</span><br/><span class="line">9,乌黑,稍蜷,沉闷,稍糊,稍凹,硬滑,否</span><br/><span class="line">10,青绿,硬挺,清脆,清晰,平坦,软粘,否</span><br/><span class="line">11,浅白,硬挺,清脆,模糊,平坦,硬滑,否</span><br/><span class="line">12,浅白,蜷缩,浊响,模糊,平坦,软粘,否</span><br/><span class="line">13,青绿,稍蜷,浊响,稍糊,凹陷,硬滑,否</span><br/><span class="line">14,浅白,稍蜷,沉闷,稍糊,凹陷,硬滑,否</span><br/><span class="line">15,乌黑,稍蜷,浊响,清晰,稍凹,软粘,否</span><br/><span class="line">16,浅白,蜷缩,浊响,模糊,平坦,硬滑,否</span><br/><span class="line">17,青绿,蜷缩,沉闷,稍糊,稍凹,硬滑,否</span><br/></pre></td></tr></table></figure>
<h3 id="结果如下"><a class="header-anchor" href="#结果如下">¶</a>结果如下</h3>
<blockquote>
<p>{‘纹理’: {‘清晰’: {‘根蒂’: {‘稍蜷’: {‘触感’: {‘硬滑’: ‘是’, ‘软粘’: {‘色泽’: {‘青绿’: ‘是’, ‘乌黑’: ‘否’}}}}, ‘硬挺’: ‘否’, ‘蜷缩’: ‘是’}}, ‘模糊<br/>
’: ‘否’, ‘稍糊’: {‘敲声’: {‘沉闷’: ‘否’, ‘浊响’: {‘脐部’: {‘凹陷’: ‘否’, ‘稍凹’: ‘是’}}}}}}</p>
</blockquote>
<p>源码地址：<a href="https://github.com/flymysql/Fly_Mac_learing" rel="noopener" target="_blank">https://github.com/flymysql/Fly_Mac_learing</a></p>
</div>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/a9a07428.html#disqus_thread
                </comments>
            </item>
            
            <item>
                <title>腾讯前端暑期实习生电话面试小经历</title>
                <link>https://me.idealli.com/post/6f063057.html</link>
                <guid>https://me.idealli.com/post/6f063057.html</guid>
                <pubDate>2019-3-10</pubDate>
                <description>
                
缘起 上周接到一个腾讯视频的电话，说是要电话面试，可把我懵逼了一下，当时没想起来有投过腾讯的简历，后来回去打开腾讯招聘的官网才发现一年前在腾讯投了简历，那是大二暑假的时候投的。大概是那时候时间还没到，现在大三了，简历才进入简历池，又看了会
                </description>
                <content:encoded>
                <![CDATA[<div class="post-body" itemprop="articleBody">
<p><strong>缘起</strong> 上周接到一个腾讯视频的电话，说是要电话面试，可把我懵逼了一下，当时没想起来有投过腾讯的简历，后来回去打开腾讯招聘的官网才发现一年前在腾讯投了简历，那是大二暑假的时候投的。大概是那时候时间还没到，现在大三了，简历才进入简历池，又看了会儿招聘信息，明白了这是腾讯暑期实习生的面试。</p>
<p>这是我第一次面试，虽然是，电话面试，但还是挺紧张，时间定在第二天下午3：00，面试岗位为web前端,晚上回去开始看书复习。。。</p>
<a id="more"></a>
<p>当天晚上，我拿出了数据结构，c++，网络技术。。。。。。emmmm对的，一点经验都没有的我完全不知道该看啥，又感觉看什么都来不及，数据结构算法那么多，c++也不知道会问啥，不过电话面试应该不会让写代码啥的，网络技术也好多，看了基础的东西</p>
<p>就这样稀里糊涂看了一晚上！~第二天早上起来继续复习，这时候我意识到，我面试的是前端岗位呀！不应该看点前端内容吗？！</p>
<p>打开浏览器开始搜索<strong>前端面试题</strong>。。。</p>
<p>又是一个多小时的紧凑复习，越复习越感觉自己越菜，自己虽然平常一直在写一些前端的小东西，但是涉及面还不是很广，有很多基础的东西还是没接触到，比如后面会让我非常难堪的缓存问题，非常基础并且前端面试经常会问到的问题，然而因为我平时做的没有涉及到缓存，也没主动去了解，被问的哑口无言，菜鸡哭泣。。。</p>
<h2 id="面试内容"><a class="header-anchor" href="#面试内容">¶</a>面试内容</h2>
<p>下午三点准时打来了电话，先是自我介绍，之前是有打好草稿的，然而讲的时候还是支支吾吾拖泥带水，最后被打断直接开始问问题了。。</p>
<ol>
<li>
<p>js的原型链是什么</p>
</li>
<li>
<p>前端优化策略列举</p>
</li>
<li>
<p>闭包是什么</p>
</li>
<li>
<p>ajax如何实现</p>
</li>
<li>
<p>怎么处理跨域</p>
</li>
<li>
<p>get和post的区别</p>
</li>
<li>
<p>事件代理解释</p>
</li>
<li>
<p>web端cookie的设置和获取方法</p>
</li>
<li>
<p>vuejs的双向绑定</p>
</li>
<li>
<p>缓存技术</p>
</li>
<li>
<p>http2与http1的区别</p>
</li>
<li>
<p>说一个排序算法</p>
</li>
<li>
<p>将两个链表合并成一个链表</p>
</li>
<li>
<p>给3升和5升的水杯如何倒出4升的水</p>
</li>
<li>
<p>1000瓶酒中一瓶有毒，有若干只小白鼠，小白鼠可以在24小时后测出是否有毒（喝死掉就是有毒）如何用最少的小白鼠找出毒酒</p>
</li>
<li>
<p>谈谈项目经历</p>
</li>
</ol>
<p>。。。。。。有点忘了</p>
<h3 id="还是被刷了"><a class="header-anchor" href="#还是被刷了">¶</a>还是被刷了</h3>
<p>后面一星期又打了两次电话</p>
<p>一共面了三次，最后还是被刷了，不过也挺有趣，毕竟第一次面试，还是涨经验了。<br/>
然而我也不太想做前端，，，继续学习算法好了</p>
<p>还是要感谢腾讯的宝贵面试机会哈</p>
<p>继续复习考研了</p>
<p>加油！！！</p>
</div>]]>
                </content:encoded>
                <comments>
                https://me.idealli.com/post/6f063057.html#disqus_thread
                </comments>
            </item>
            </channel>
        </rss>